<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ddupg.github.io/blog</id>
    <title>Ddupg Blog</title>
    <updated>2023-10-26T01:58:54.769Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ddupg.github.io/blog"/>
    <subtitle>Ddupg Blog</subtitle>
    <icon>https://ddupg.github.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[HBase Scan Snapshot基本原理]]></title>
        <id>https://ddupg.github.io/blog/20231026-hbase-scan-snapshot</id>
        <link href="https://ddupg.github.io/blog/20231026-hbase-scan-snapshot"/>
        <updated>2023-10-26T01:58:54.769Z</updated>
        <summary type="html"><![CDATA[HBase Scan Snapshot基本原理]]></summary>
        <content type="html"><![CDATA[<p>HBase作为数据库，可以用于线上TP类需求，但如果直接基于HBase表运行AP类的离线分析型任务，则有2个问题：</p><ul><li>可能会对线上读写产生影响，造成集群抖动。</li><li>速度慢</li></ul><p>所以HBase提供了工具，可以直接越过HBase层直接读存储在HDFS上的文件，常用的就是Scan Snapshot功能。好处是：</p><ul><li>在某个时间点打snapshot，基于snapshot做查询</li><li>直接读HDFS文件，避免与在线请求竞争HBase的计算资源，有效减轻对在线业务的影响。但如果对HDFS的吞吐过高也会有影响，所以也要根据集群规模考虑对IO限流。</li><li>速度快。可以基于MR实现，轻松实现弹性。并且因为跳过了HBase这一层，执行速度得到极大提高。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="配置权限">配置&amp;权限<a href="#配置权限" class="hash-link" aria-label="配置&amp;权限的直接链接" title="配置&amp;权限的直接链接">​</a></h2><p>HBase是存算分离架构，数据持久化在HDFS上。但正常读写请求都是通过HBase层读写HDFS上数据，默认并不会给用户授予HDFS目录及文件的权限，则用户就不能读HDFS上的数据文件。所以要实现scan snapshot，第一步需要解决权限问题。</p><p>分两部分介绍</p><ul><li>配置：配置打开后，才会将权限下放到HDFS目录和文件</li><li>实现：具体如何下放权限</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="配置">配置<a href="#配置" class="hash-link" aria-label="配置的直接链接" title="配置的直接链接">​</a></h3><p>配置有两层：集群级别和表级别。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="集群级别">集群级别<a href="#集群级别" class="hash-link" aria-label="集群级别的直接链接" title="集群级别的直接链接">​</a></h4><p>配置通过配置文件设置：<code>hbase.acl.sync.to.hdfs.enable</code>，默认false</p><p>只需要修改master的该配置项即可生效，无需修改全集群。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="表级别">表级别<a href="#表级别" class="hash-link" aria-label="表级别的直接链接" title="表级别的直接链接">​</a></h4><p>记录在表的schame上，可以动态调整。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">alter 't1', CONFIGURATION =&gt; {'hbase.acl.sync.to.hdfs.enable' =&gt; 'true'}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>两层配置全部打开后，则表示该表的读权限需要同步加到HDFS的对应目录和文件。后面来看HBase是如何将权限下放的。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="权限实现">权限实现<a href="#权限实现" class="hash-link" aria-label="权限实现的直接链接" title="权限实现的直接链接">​</a></h3><p>scan snapshot需要对HDFS目录和文件加权限的逻辑，其实是基于<code>SnapshotScannerHDFSAclController</code>这个master的Coprocessor实现的。简单说，就是在表的各类操作前后增加hook，来处理表对应目录和文件的权限。</p><p>这个CP的具体实现细节很多，但没太多深入的内容，所以仅以<code>postCompletedCreateTableAction()</code>为例介绍，其他的可以举一反三。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="postcompletedcreatetableaction">postCompletedCreateTableAction<a href="#postcompletedcreatetableaction" class="hash-link" aria-label="postCompletedCreateTableAction的直接链接" title="postCompletedCreateTableAction的直接链接">​</a></h4><p>在建表操作的最后，会调用到CP的这个方法：</p><ul><li>正常走shell或者admin接口createTable，触发的<code>CreateTableProcedure</code>会执行这个CP方法</li><li>执行clone snapshot建表，触发的<code>CloneSnapshotProcedure</code>会执行这个CP方法</li></ul><p>以下是执行逻辑：</p><ol><li>检查该表是否需要添加acl权限，即非系统表 &amp; 表的schame里有<code>hbase.acl.sync.to.hdfs.enable=true</code></li><li>创建表相关的目录，新表有些目录可能没有，方便之后的子目录继承权限。目录包含：<ul><li>data目录：<code>{root}/data/{ns}/{table}/</code></li><li>mob目录：<code>{root}/mobdir/data/{ns}/{table}/</code></li><li>arthive目录：<code>{root}/arvhive/data/{ns}/{table}/</code></li></ul></li><li>给表owner加HDFS的acl。这里的owner账号是触发建表的用户账号。<ol><li>给namespace的相关目录加权限，仅一层目录不递归，仅ACCESS权限。目录包含：<ul><li>tmp目录：<code>{root}/.tmp/data/{ns}/</code></li><li>data目录：<code>{root}/data/{ns}/</code></li><li>mob目录：<code>{root}/mobdir/data/{ns}/</code></li><li>archive目录：<code>{root}/arvhive/data/{ns}/</code></li></ul></li><li>给table目录加hdfs的acl，递归处理所有子目录，ACCESS和DEFAULT权限，后续表目录下的子目录就会继承权限。目录包含：<ul><li>data目录：<code>{root}/data/{ns}/{table}/</code></li><li>mob目录：<code>{root}/mobdir/data/{ns}/{table}/</code></li><li>arthive目录：<code>{root}/arvhive/data/{ns}/{table}/</code></li><li>snapshot目录：该表的snapshot目录。</li></ul></li></ol></li><li>记录到hbase:acl表。记录之后表示该表已经处理完了，之后比如revoke权限或删表时，会根据hbase:acl的记录来检查哪些表的哪些目录需要处理。</li></ol><table><thead><tr><th>rowkey</th><th>CF</th><th>column</th><th>value</th></tr></thead><tbody><tr><td>tableName</td><td>m</td><td>user</td><td>R</td></tr></tbody></table><h3 class="anchor anchorWithStickyNavbar_LWe7" id="小结">小结<a href="#小结" class="hash-link" aria-label="小结的直接链接" title="小结的直接链接">​</a></h3><ul><li>通过调整两级配置，打开开关，允许将表数据文件的读权限直接开放给用户。</li><li>具体的HDFS目录及文件的权限管理，由<code>SnapshotScannerHDFSAclController</code>这个CP实现。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="tablesnapshotscanner-单线程-scan-snapshot">TableSnapshotScanner 单线程 scan snapshot<a href="#tablesnapshotscanner-单线程-scan-snapshot" class="hash-link" aria-label="TableSnapshotScanner 单线程 scan snapshot的直接链接" title="TableSnapshotScanner 单线程 scan snapshot的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="基本认识">基本认识<a href="#基本认识" class="hash-link" aria-label="基本认识的直接链接" title="基本认识的直接链接">​</a></h3><p>直接来看<code>TableSnapshotScanner</code>的类图，从图中就能获得一些信息。</p><ul><li>从继承关系中发现，<code>TableSnapshotScanner</code>间接实现了<code>ResultScanner</code>，所以其具备了单线程类似迭代器式地读表数据的能力。</li><li><code>TableSnapshotScanner</code>的属性来看，它是将snapshot关联的文件以region的形式组织起来，然后迭代读取的<ul><li>snapshotName：snapshot相关信息</li><li>fs、rootDir、restoreDir：文件系统及目录相关信息</li><li>scan：如何读数据</li><li>regions：snapshot的region信息</li><li>currentRegionScanner：可以直接读region数据的scanner</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="重温restore-snapshot">重温restore snapshot<a href="#重温restore-snapshot" class="hash-link" aria-label="重温restore snapshot的直接链接" title="重温restore snapshot的直接链接">​</a></h3><p>在我们读取snapshot关联文件的时候，一般是长时任务，如果过程中snapshot被删，文件也可能被清理，那任务则容易失败。所以需要一个办法，保证任务执行过程中，即使snapshot本身被删，其关联文件也应保留。</p><p>根据HBase HFile清理的逻辑，能想到的方法就是为关联的HFile建立一个link文件，表示文件还有用，不能删。这里就复用了restore snapshot。</p><p>在<a href="https://ddupg.github.io/blog/20230706-hbase-snapshot" target="_blank" rel="noopener noreferrer">Snapshot基本原理</a>中有介绍restore_snapshot的记录原理，回顾2个重点：</p><ul><li>使用snapshot恢复表，主要是<strong>在文件系统中建立完整表目录</strong></li><li>不涉及数据文件拷贝，新表目录中的<strong>文件都是link文件</strong></li></ul><p>restore snapshot建表目录的位置是可配置的，用于恢复表时，选择的位置是正常的表数据目录<code>{root}/data/{ns}/table</code>。在用于scan snapshot的场景时，就没必要在表数据目录了，选择的位置默认则是：<code>/hbase/.tmpdir-to-restore-snapshot/{UUID}</code></p><ul><li>这个路径可以与HBase集群无关，可以不在集群的root目录下，甚至可以多集群使用一个目录做restore snapshot</li><li>这个路径是运行<code>TableSnapshotScanner</code>的client端传递的，而server端也会通过配置项配死（master的HFile清理会检查该目录下的引用），如果两者不匹配，HFile可能会被删导致任务失败</li><li>路径中的UUID是每次随机生成的，所以如果触发太多的<code>TableSnapshotScanner</code>，会产生大量目录和小文件，加重master和namenode的负担。后面会介绍解决方法。</li><li>目录需要给用户授权（保证用户可以建restore目录），也需要给master使用的管理员账号授权（保证master可以清理）。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="读数据实现">读数据实现<a href="#读数据实现" class="hash-link" aria-label="读数据实现的直接链接" title="读数据实现的直接链接">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="tablesnapshotscanner重要逻辑">TableSnapshotScanner重要逻辑<a href="#tablesnapshotscanner重要逻辑" class="hash-link" aria-label="TableSnapshotScanner重要逻辑的直接链接" title="TableSnapshotScanner重要逻辑的直接链接">​</a></h4><h5 class="anchor anchorWithStickyNavbar_LWe7" id="关于restore-snapshot">关于restore snapshot<a href="#关于restore-snapshot" class="hash-link" aria-label="关于restore snapshot的直接链接" title="关于restore snapshot的直接链接">​</a></h5><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**  </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">* Creates a TableSnapshotScanner.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">...</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">* @param snapshotAlreadyRestored true to indicate that snapshot has been restored. </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">*/</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token class-name">TableSnapshotScanner</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">boolean</span><span class="token plain"> snapshotAlreadyRestored</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">throws</span><span class="token plain"> </span><span class="token class-name">IOException</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">snapshotAlreadyRestored</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">restoreDir </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> restoreDir</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">openWithoutRestoringSnapshot</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// restoreDir will be deleted in close(), use a unique sub directory</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">restoreDir </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Path</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">restoreDir</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">UUID</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">randomUUID</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">openWithRestoringSnapshot</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>构造参数中的bool变量<code>snapshotAlreadyRestored</code>，表示是否已经完成restore snapshot，即是否复用restore snapshot的目录。以此来解决多次restore造成的小文件过多的问题。</p><p>比如在通过MR任务并行完成scan snapshot时，就可以进行一次restore snapshot，复用其目录，并行执行多个scanner加速处理。</p><h5 class="anchor anchorWithStickyNavbar_LWe7" id="如何读数据">如何读数据<a href="#如何读数据" class="hash-link" aria-label="如何读数据的直接链接" title="如何读数据的直接链接">​</a></h5><p>逻辑也比较简单，直接看代码和注释就好。</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token annotation punctuation" style="color:#393A34">@Override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">throws</span><span class="token plain"> </span><span class="token class-name">IOException</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">Result</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">currentRegionScanner </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      currentRegion</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// 所有region都已读完，结束</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">currentRegion </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> regions</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">size</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// 当前region读完，通过ClientSideRegionScanner读下一个region</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token class-name">RegionInfo</span><span class="token plain"> hri </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> regions</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">currentRegion</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      currentRegionScanner </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">ClientSideRegionScanner</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">conf</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> fs</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> restoreDir</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> htd</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> hri</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> scan</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> scanMetrics</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">try</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> currentRegionScanner</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">result </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 按scan的limit限制，结束请求</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">scan</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getLimit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">++</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">numOfCompleteRows </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">  scan</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getLimit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">finally</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// 当前currentRegionScanner已经读完，进行清理</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">result </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        currentRegionScanner</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">close</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        currentRegionScanner </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>核心的功能由<code>ClientSideRegionScanner</code>实现。</p><h5 class="anchor anchorWithStickyNavbar_LWe7" id="clientsideregionscanner">ClientSideRegionScanner<a href="#clientsideregionscanner" class="hash-link" aria-label="ClientSideRegionScanner的直接链接" title="ClientSideRegionScanner的直接链接">​</a></h5><p><code>ClientSideRegionScanner</code>实际上并不复杂，其充分复用了<code>HRegion</code>的代码来实现对目标region数据文件的读取。</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token class-name">ClientSideRegionScanner</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Configuration</span><span class="token plain"> conf</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">FileSystem</span><span class="token plain"> fs</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Path</span><span class="token plain"> rootDir</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token class-name">TableDescriptor</span><span class="token plain"> htd</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">RegionInfo</span><span class="token plain"> hri</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Scan</span><span class="token plain"> scan</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">ScanMetrics</span><span class="token plain"> scanMetrics</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">throws</span><span class="token plain"> </span><span class="token class-name">IOException</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// region是只读的，所以隔离级别不会影响结果</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  scan</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">setIsolationLevel</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">IsolationLevel</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">READ_UNCOMMITTED</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  htd </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">TableDescriptorBuilder</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">newBuilder</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">htd</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">setReadOnly</span><span class="token punctuation" style="color:#393A34">(</span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">build</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 为region指定目录，构造HRegion对象。在scan snapshot时这里的root目录实际是restore的目录</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  region </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">HRegion</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">newHRegion</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">CommonFSUtils</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getTableDir</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rootDir</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> htd</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getTableName</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> fs</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    conf</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> hri</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> htd</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 设置此时是在restore region，避免对文件系统有修改。比如replay wal</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  region</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">setRestoredRegion</span><span class="token punctuation" style="color:#393A34">(</span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 只开启L1的block cache，只缓存HFile的index block，减少内存使用</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">BlockCacheFactory</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">BLOCKCACHE_POLICY_KEY</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"IndexOnlyLRU"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">setIfUnset</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">HConstants</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">HFILE_ONHEAP_BLOCK_CACHE_FIXED_SIZE_KEY</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">valueOf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">HConstants</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">HBASE_CLIENT_SCANNER_ONHEAP_BLOCK_CACHE_FIXED_SIZE_DEFAULT</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// don't allow L2 bucket cache for non RS process to avoid unexpected disk usage.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unset</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">HConstants</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">BUCKET_CACHE_IOENGINE_KEY</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  region</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">setBlockCache</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">BlockCacheFactory</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">createBlockCache</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">conf</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  region</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">setMobFileCache</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">MobFileCache</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">conf</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  region</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">initialize</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 构造该region的scanner</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">scanner </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> region</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getScanner</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">scan</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  values </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">ArrayList</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  region</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">startRegionOperation</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li><code>ClientSideRegionScanner</code>使用指定目录构造<code>HRegion</code>，在scan snapshot的场景时，该目录则是<code>/hbase/.tmpdir-to-restore-snapshot/{UUID}</code></li><li>随后则使用<code>HRegion</code>的<code>RegionScanner</code>来读数据。该scanner的细节就不展开了，RegionServer读数据也会最终用到这个<code>RegionScanner</code>。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="小结-1">小结<a href="#小结-1" class="hash-link" aria-label="小结的直接链接" title="小结的直接链接">​</a></h3><ul><li><code>TableSnapshotScanner</code>实现上很巧妙。大量复用了已有功能和代码。</li><li>复用restore snapshot：以表目录及link文件形式组织数据，同时另起目录不污染线上表数据</li><li>复用<code>HRegion</code>：以region形式识别restore的目录，借助region的代码实现数据读取</li><li><code>TableSnapshotScanner</code>只实现了单线程读snapshot的能力，对于大数据量读取速度过慢，但可以基于它进一步实现MR版本。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="mr并行扫描snapshot">MR并行扫描snapshot<a href="#mr并行扫描snapshot" class="hash-link" aria-label="MR并行扫描snapshot的直接链接" title="MR并行扫描snapshot的直接链接">​</a></h2><p>为了使用MR任务跑scan snapshot，到目前为止，只需要解决2个问题：</p><ul><li>任务如何分片？默认每个region一个分片。</li><li>每个分片如何执行？类似<code>TableSnapshotScanner</code></li></ul><p>这部分核心逻辑的入口在<code>TableSnapshotInputFormat</code></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="如何分片">如何分片<a href="#如何分片" class="hash-link" aria-label="如何分片的直接链接" title="如何分片的直接链接">​</a></h3><p>方法入口在<code>org.apache.hadoop.hbase.mapreduce.TableSnapshotInputFormat#getSplits</code>，最终实现在<code>org.apache.hadoop.hbase.mapreduce.TableSnapshotInputFormatImpl#getSplits</code>。</p><p>简单说：默认每个region一个分片。可以通过参数调整每个region产生多个分片，但这里不展开了。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="如何执行">如何执行<a href="#如何执行" class="hash-link" aria-label="如何执行的直接链接" title="如何执行的直接链接">​</a></h3><p>实现类是<code>org.apache.hadoop.hbase.mapreduce.TableSnapshotInputFormatImpl.RecordReader</code>，实际也是使用了<code>ClientSideRegionScanner</code>实现，和<code>TableSnapshotScanner</code>基本类似，所以不再展开。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a href="#总结" class="hash-link" aria-label="总结的直接链接" title="总结的直接链接">​</a></h2><ul><li><a href="https://ddupg.github.io/blog/20230706-hbase-snapshot" target="_blank" rel="noopener noreferrer">HBase Snapshot基本原理</a>之前一篇文章介绍了HBase Snapshot的基本原理，本文围绕如何利用snapshot直接读取HDFS数据文件来加速查询</li><li>权限部分解决了如何让用户能顺利读到文件</li><li>其次介绍了如何实现单线程的读snapshot</li><li>最后介绍了如何使用MR来读snapshot，加速查询</li></ul>]]></content>
        <author>
            <name>Ddupg</name>
            <uri>https://ddupg.github.io</uri>
        </author>
        <category label="数据库" term="数据库"/>
        <category label="HBase" term="HBase"/>
        <category label="Snapshot" term="Snapshot"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[记一次线上HBase服务JVM metaspace内存泄漏问题]]></title>
        <id>https://ddupg.github.io/blog/20230921-hbase-metaspace-memory-leak</id>
        <link href="https://ddupg.github.io/blog/20230921-hbase-metaspace-memory-leak"/>
        <updated>2023-09-21T09:53:04.578Z</updated>
        <summary type="html"><![CDATA[记一次线上HBase服务JVM metaspace内存泄漏问题]]></summary>
        <content type="html"><![CDATA[<p>公司的HBase集群偶尔有个很奇怪的现象：内存占用会逐渐升高，超过堆内堆外内存限制，直到把操作系统内存占满被oom-killer杀死。在内存占用逐步升高的期间，响应延迟越来越高，最终服务宕机也会造成集群抖动，影响SLA。</p><p>内存增长过程非常缓慢，大概一两个月宕机一次。之前一直苦恼于没有现场，这次终于抓到了一个稳定复现的集群。</p><p>目前还没正式修复，修复验证也要几周时间，所以等我验证后再补充效果。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="现象">现象<a href="#现象" class="hash-link" aria-label="现象的直接链接" title="现象的直接链接">​</a></h2><p>用户反馈集群的延迟远高于其他集群，之前SRE进行过扩容也没有效果，所以开发介入开始排查。</p><p><img loading="lazy" alt="用户侧请求的P95延迟" src="/assets/images/falcon-user-p95-04f97fcea864c0737fc4f98b172bad1f.png" width="1873" height="452" class="img_ev3q"></p><p>查看集群监控，发现两台节点的内存占用非常高，接近100%。随后就会被oom-killer杀掉。</p><p><img loading="lazy" alt="HBase集群内存监控，不断增长接近100%，进程被杀后陡降" src="/assets/images/falcon-hbase-memory-b47d00049acc996af339c00bdffc680d.png" width="1875" height="408" class="img_ev3q"></p><p>我们线上机器128G内存，这个集群HBase配置堆内40G堆外50G，加上其他进程的内存使用，整体内存使用率在80%算是比较合理的。</p><p>内存占用高之后，操作系统没有可用内存，会频繁的进行内存回收，如果回收速度跟不上，还会由后台回收变为直接回收，暂停进程的内存申请。在Java进程里也会看到莫名的GC。</p><p>可以用<code>sar -B</code>查看内存回收情况。忘记现场留图了，之后有图再补。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="现场处理">现场处理<a href="#现场处理" class="hash-link" aria-label="现场处理的直接链接" title="现场处理的直接链接">​</a></h2><p>开始排查时还有两个节点内存异常，请求慢日志数量明显高于其他节点。</p><p>用<code>top</code>查看内存使用，RegionServer进程占用在113G左右，远超限制，可以确定是发生内存泄漏了。</p><p>其中一台已经没法用arthas进行挂载了，只能先重启。</p><p>剩余一台赶紧用arthas挂进去看，发现堆内堆外大小都正常，但metaspace达到12G。当时也没有截图，这里用目前线上的一台机器示意一下：</p><p><img loading="lazy" alt="非故障现场的截图，这是目前线上机器的情况，仅示意" src="/assets/images/arthas-metaspace-f8fc98cb1d45cf0d0323fc91ea224dcb.png" width="943" height="205" class="img_ev3q"></p><p>补图，某个节点的metaspace逐渐增长到11G：
<img loading="lazy" alt="非故障现场的截图，这是目前线上机器的情况，仅示意" src="/assets/images/online-jstat-5ef8f4bc31d553614b93fbfd3fd54cd9.png" width="1183" height="161" class="img_ev3q"></p><p>这时候猜测是JVM的metaspace发生了内存泄漏，因为metaspace没有大小限制，会一直向操作系统申请内存，直至把内存占满。</p><p>赶紧打个heap dump好慢慢查。因为打dump会Full GC，发生长时间的STW，大内存的RS会因为和ZK失联宕机，所以一般线上不轻易打dump。</p><blockquote><p>在我重启了两台节点之后，用户侧的延迟就明显下降了</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="排查">排查<a href="#排查" class="hash-link" aria-label="排查的直接链接" title="排查的直接链接">​</a></h2><p>把heap dump下载到本地之后，用MAT打开。好家伙250多万的Class，这时候可以确定是metaspace出问题了。</p><p><img loading="lazy" alt="MAT分析heap dump" src="/assets/images/mat-histogram-1b1c617244280ca10d06642ce51ab517.png" width="875" height="502" class="img_ev3q"></p><blockquote><p>这里还有个插曲，在用MAT打开的时候，一直卡在分析unreachable objects的这一步。这个dump只有8G，之前分析30G的dump都没卡住，查了一下把这一步跳过就顺利打开了。</p></blockquote><p>直接通过MAT查看Class的引用关系，并看不出是怎么产生的。后面的<code>DelegatingClassLoader</code>的异常，也是后来发现的，当时没注意到。</p><p>网上一通查，找到<a href="https://heapdump.cn/article/54786" target="_blank" rel="noopener noreferrer">从一起GC血案谈到反射原理</a>，按步骤可以完整复现。</p><p>用sa-jni.jar dump出<code>GeneratedMethodAccessor</code>的字节码：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">20: aaload</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">21: checkcast     #14                 // class "[B"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">24: invokestatic  #10                 // Method org/apache/hadoop/hbase/filter/FirstKeyOnlyFilter.parseFrom:([B)Lorg/apache/hadoop/hbase/filter/FirstKeyOnlyFilter;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">27: areturn</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>看24这行，这里显示是在执行<code>org.apache.hadoop.hbase.filter.FirstKeyOnlyFilter.parseFrom()</code>方法，这是HBase的Filter功能相关的类。那就直接去找代码，看什么地方会用反射处理Filter的逻辑。</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">   * Convert a protocol buffer Filter to a client Filter</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">   *</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">   * @param proto the protocol buffer Filter to convert</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">   * @return the converted Filter</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">   */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token annotation punctuation" style="color:#393A34">@SuppressWarnings</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"unchecked"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token class-name">Filter</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">toFilter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">FilterProtos</span><span class="token class-name punctuation" style="color:#393A34">.</span><span class="token class-name">Filter</span><span class="token plain"> proto</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">throws</span><span class="token plain"> </span><span class="token class-name">IOException</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">String</span><span class="token plain"> type </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> proto</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getName</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">byte</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> proto</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getSerializedFilter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">toByteArray</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">String</span><span class="token plain"> funcName </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"parseFrom"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">try</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token class-name">Class</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics operator" style="color:#393A34">?</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> c </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Class</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">forName</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">type</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">ClassLoaderHolder</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">CLASS_LOADER</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token class-name">Method</span><span class="token plain"> parseFrom </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> c</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getMethod</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">funcName</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">byte</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">class</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">parseFrom </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">throw</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">IOException</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Unable to locate function: "</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> funcName </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">" in type: "</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> type</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Filter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">parseFrom</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">invoke</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">c</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Exception</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// Either we couldn't instantiate the method object, or "parseFrom" failed.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// In either case, let's not retry.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">throw</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">DoNotRetryIOException</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>找到唯一一处：RS从client发来的请求中，用反射的方式解析出Filter。那八成就是这个地方有问题了。</p><blockquote><p>因为这个字节码只能从运行中的进程中去抓，所以分析dump的进程和抓这个<code>GeneratedMethodAccessor</code>字节码的进程不是同一个，虽然它的<code>GeneratedMethodAccessor</code>数量也明显异常，并且绝大多数都和Filter有关，但不能百分百联系起来，后面我会再抓一次现场确认。</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="原因">原因<a href="#原因" class="hash-link" aria-label="原因的直接链接" title="原因的直接链接">​</a></h2><p>补充个背景，这个集群使用的是ShenandoahGC，是公司内自己编译的包含SGC的JDK8，并不是社区的发行版。之前也出现过兼容问题导致出core dump。而且加了<code>-XX:+ShenandoahAlwaysClearSoftRefs</code>配置，不管其他配置，直接清理软连接。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Unconditionally clear soft references, instead of using any </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">other cleanup policy. This minimizes footprint at expense of</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">more soft reference churn in applications.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>然后参考<a href="https://heapdump.cn/article/54786" target="_blank" rel="noopener noreferrer">从一起GC血案谈到反射原理</a>梳理下原因：</p><ol><li>Java <code>Class</code>里的<code>reflectionData</code>是用<code>SoftReference</code>修饰的，会在GC时回收，而因为有<code>-XX:+ShenandoahAlwaysClearSoftRefs</code>配置，回收软连接会更激进</li><li>在通过<code>Class</code>获取<code>Method</code>时，可能会因为<code>reflectionData</code>被回收，而需要重新copy产生一个新的<code>Method</code></li><li>在<code>Method.invoke</code>的时候，会通过<code>methodAccessor</code>去执行。因为<code>Method</code>是copy产生的新对象，所以<code>methodAccessor</code>也是新对象。</li><li><code>methodAccessor</code>的实现是<code>DelegatingMethodAccessorImpl</code>，这是个包装类，具体逻辑会委派给<code>NativeMethodAccessorImpl</code>和<code>GeneratedMethodAccessorXXX</code>，后面XXX是递增的数字。</li><li><code>DelegatingMethodAccessorImpl</code>的前15次执行是<code>NativeMethodAccessorImpl</code>处理，超出后产生一个<code>GeneratedMethodAccessorXXX</code>类进行处理，而这些对于JVM来说是不同的类，即都需要在metaspace里存储自己的元信息。这就是<code>GeneratedMethodAccessorXXX</code>和<code>Class</code>泛滥的原因</li><li>而每个<code>GeneratedMethodAccessorXXX</code>都有个单独的ClassLoader，就是<code>DelegatingClassLoader</code>，这就是<code>DelegatingClassLoader</code>也有250多万个的原因</li></ol><p>目前不明确的问题还有为什么<code>GeneratedMethodAccessor</code>和<code>DelegatingClassLoader</code>不会被回收，我理解在metaspace不断扩大的过程中，应该是会触发回收的。不知道是不是和SGC有关。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="模拟复现">模拟复现<a href="#模拟复现" class="hash-link" aria-label="模拟复现的直接链接" title="模拟复现的直接链接">​</a></h2><p>复现的基本思路：</p><ol><li>模拟Filter触发反射</li><li>使用类似的GC和JVM参数</li><li>监控一段时间的metaspace变化</li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="代码模拟">代码模拟<a href="#代码模拟" class="hash-link" aria-label="代码模拟的直接链接" title="代码模拟的直接链接">​</a></h3><p>写个demo模拟HBase高并发的情况下处理Filter：</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">MemLeakFilter</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 构造一些不同的filter</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">List</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">Supplier</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">Filter</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> suppliers </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Lists</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">newArrayList</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">FirstKeyOnlyFilter</span><span class="token operator" style="color:#393A34">::</span><span class="token keyword" style="color:#00009f">new</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">ColumnCountGetFilter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">ColumnPrefixFilter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"prefix"</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getBytes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">ColumnRangeFilter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"start"</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getBytes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"end"</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getBytes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">ColumnValueFilter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"family"</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getBytes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"qualifier"</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getBytes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">CompareOperator</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">EQUAL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"value"</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getBytes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">throws</span><span class="token plain"> </span><span class="token class-name">Exception</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">MemLeakFilter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">run</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">run</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 64线程并发执行</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">ExecutorService</span><span class="token plain"> es </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Executors</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">newFixedThreadPool</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">64</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">64</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token class-name">Supplier</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">Filter</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> supplier </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> suppliers</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">%</span><span class="token plain"> suppliers</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">size</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      es</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">submit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">runOnce</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">supplier</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">runOnce</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Supplier</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">Filter</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> supplier</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> cnt </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">try</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">++</span><span class="token plain"> cnt </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">100000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          cnt </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token class-name">Thread</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">sleep</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 构造一些大对象，尽量频繁触发GC</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">byte</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">byte</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1024</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">Arrays</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">fill</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">byte</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 触发filter的序列化和反序列化，ProtobufUtil.toFilter中会执行反射的逻辑</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">ProtobufUtil</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">toFilter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">ProtobufUtil</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">toFilter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">supplier</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Exception</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        log</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">warn</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"filter exception"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="执行demo">执行demo<a href="#执行demo" class="hash-link" aria-label="执行demo的直接链接" title="执行demo的直接链接">​</a></h3><p>参考线上JVM配置，执行demo程序：</p><ol><li>内存设置，堆内外都是1G</li><li>使用SGC，并开启<code>-XX:+ShenandoahAlwaysClearSoftRefs</code></li></ol><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">/opt/soft/j2sdk-image/bin/java </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-XX:+UnlockExperimentalVMOptions </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-verbosegc </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-XX:+PrintGCApplicationStoppedTime </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-Xmx1g -Xms1g -XX:MaxDirectMemorySize</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">1g -Xss256k </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-XX:+PrintTenuringDistribution </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-XX:PrintFLSStatistics</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-XX:+DisableExplicitGC </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-XX:+UseShenandoahGC </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-XX:ShenandoahAllocationThreshold</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">5</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-XX:ShenandoahRefProcFrequency</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">3</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-XX:+ShenandoahAlwaysClearSoftRefs </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-XX:ShenandoahGCHeuristics</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">compact </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-XX:ConcGCThreads</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">8</span><span class="token plain"> -XX:ParallelGCThreads</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">12</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-XX:+UseBiasedLocking </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-XX:NumberOfGCLogFiles</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">100</span><span class="token plain"> -XX:+UseGCLogFileRotation -XX:GCLogFileSize</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">128m </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-XX:+PrintHeapAtGC </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-XX:+PrintGCDateStamps </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-XX:+UseNUMA </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-XX:+PrintSafepointStatistics </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-XX:+SafepointTimeout </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-XX:+PrintAdaptiveSizePolicy </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-XX:+PrintGC -XX:+PrintGCDetails </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-XX:+AlwaysPreTouch </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-XX:PrintSafepointStatisticsCount</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-XX:+HeapDumpOnOutOfMemoryError </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-XX:HeapDumpPath</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">/home/work/test </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-jar demo.jar</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="监控metaspace">监控metaspace<a href="#监控metaspace" class="hash-link" aria-label="监控metaspace的直接链接" title="监控metaspace的直接链接">​</a></h3><p>demo程序启动后，使用jstat一直监控进程内存的变化</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">jstat -gc </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">pid</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10000</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>从9.26号收集到10.7号，10s一个点，metaspace的MC从32M逐渐增长到128M。</p><p><img loading="lazy" alt="demo程序11天metaspace的变化" src="/assets/images/demo-jstat-01a1903cdc8ffc4f71279530c08ac5ae.png" width="1755" height="723" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="小结">小结<a href="#小结" class="hash-link" aria-label="小结的直接链接" title="小结的直接链接">​</a></h3><ol><li>基本上成功复现线上问题，但确实没有线上观察到的内存增长那么快</li><li>因为整个复现过程比较漫长，所以没做更多的实验，不好判断各个参数对metaspace的影响程度</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="后续">后续<a href="#后续" class="hash-link" aria-label="后续的直接链接" title="后续的直接链接">​</a></h2><ol><li>因为SGC后续也不再使用，延迟敏感的会上到JDK11用ZGC，延迟不敏感的换回G1</li><li>等十一节后，差不多又有节点内存飙高了，再抓个现场验证下前文分析的逻辑， 补下图</li><li>验证下G1在高并发的情况下疯狂调用这个反射的逻辑，会不会出现类似的情况，如果仍然存在，需要继续考虑调参，或者提给社区讨论下这里能不能减少或避免反射。</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="参考">参考<a href="#参考" class="hash-link" aria-label="参考的直接链接" title="参考的直接链接">​</a></h2><ul><li><a href="https://heapdump.cn/article/54786" target="_blank" rel="noopener noreferrer">从一起GC血案谈到反射原理</a></li><li><a href="https://chriswhocodes.com/" target="_blank" rel="noopener noreferrer">VM Options Explorer - OpenJDK11 HotSpot</a></li></ul>]]></content>
        <author>
            <name>Ddupg</name>
            <uri>https://ddupg.github.io</uri>
        </author>
        <category label="数据库" term="数据库"/>
        <category label="HBase" term="HBase"/>
        <category label="JVM/metaspace" term="JVM/metaspace"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[译：The Part of PostgreSQL We Hate the Most]]></title>
        <id>https://ddupg.github.io/blog/20230916-the-part-of-postgresql-we-hate-the-most</id>
        <link href="https://ddupg.github.io/blog/20230916-the-part-of-postgresql-we-hate-the-most"/>
        <updated>2023-09-16T03:15:18.626Z</updated>
        <summary type="html"><![CDATA[译：The Part of PostgreSQL We Hate the Most]]></summary>
        <content type="html"><![CDATA[<p>最近学习了MySQL的MVCC实现，然后看到了这篇博客详细介绍了PG MVCC的实现，以及这种实现有哪些问题。既能深入理解数据库MVCC实现基本原理，也能对比MySQL和PG的MVCC实现，理解为什么PG的MVCC深受吐槽，所以翻译了这篇文章。</p><p><a href="https://ottertune.com/blog/the-part-of-postgresql-we-hate-the-most/" target="_blank" rel="noopener noreferrer">原文链接</a></p><p>当前有大量的数据库可供选择（到2023年4月有897个）。在2000年代，最普遍的选择是MySQL。最近5年，PostgreSQL成为互联网上最受欢迎的数据库。因为它可靠，有丰富的feature，可扩展，适合大多数工作负载。</p><p>尽管PostgreSQL很受欢迎，但它有些方面还不是很好。这篇博客想讨论下一个很严重的问题：PostgreSQL怎么实现MVCC（多版本并发控制）。我们在卡耐基梅隆大学的研究，以及对Amazon RDS上PostgreSQL数据库实例的优化经验表明，它的MVCC实现是主流数据库（MySQL、Oracle、Microsoft SQL Server）中最差的。并且，Amazon的Aurora也有这些问题。</p><p>在这篇文章中，我们深入MVCC：</p><ul><li>MVCC是什么？</li><li>PostgreSQL怎么实现的？</li><li>为什么很糟糕？</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="什么是mvcc">什么是MVCC？<a href="#什么是mvcc" class="hash-link" aria-label="什么是MVCC？的直接链接" title="什么是MVCC？的直接链接">​</a></h2><p>在DBMS中MVCC的目的是允许读和写并行执行而尽可能不会相互干扰。MVCC的基本思路是不会覆盖写入已经存在的行。对每一（逻辑上的）行，维护多个版本。当应用执行一个查询，DBMS根据版本号（像时间戳）选择适合当前查询的版本。这个方法的优点是多个查询可以同时读更老版本的数据，而不会阻塞更新。查询观察到的是DBMS开启事务时的快照（快照隔离）。这个方法不需要在更新时增加行锁去堵塞对相同行的读请求。</p><p>我们认为1978年David Reed的 <a href="https://dspace.mit.edu/handle/1721.1/16279" target="_blank" rel="noopener noreferrer">Concurrency Control in Distributed Database Systems</a> 是第一篇描述MVCC的出版物。1980年代，<a href="https://en.wikipedia.org/wiki/InterBase#History" target="_blank" rel="noopener noreferrer">InterBase</a>是第一个使用MVCC实现的商业DBMS。从这之后，几乎近20年诞生的支持事务的DBMS都实现了MVCC。</p><p>当实现一个支持MVCC的DBMS时必须做几个设计决策。从较高的层面来看，它可以归结为以下几点：</p><ol><li>对已经存在的行，怎么存储对它的更新</li><li>对查询来说，怎么找到一行数据的正确版本</li><li>怎么删除不再可见的过期版本</li></ol><p>这些决策并不互斥。在PostgreSQL的例子中，他们在1980年代解决第一个问题的方式导致我们今天仍需解决其他两个问题。</p><p>之后的讨论我们使用下面这个例子：一张电影信息表。表中的每行数据包含电影名、发布年份、导演、和一个唯一ID作为主键，以及在电影名和导演字段上建立二级索引。下面是这个表的DDL命令。</p><div class="language-SQL codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-SQL codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">CREATE TABLE movies (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name VARCHAR(256) NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  year SMALLINT NOT NULL,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  director VARCHAR(128)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CREATE INDEX idx_name ON movies (name);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CREATE INDEX idx_director ON movies (director);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这个表包含一个主键索引 <code>movies_pkey</code> 和两个B+树的二级索引 <code>idx_name</code>,&nbsp;<code>idx_director</code></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="postgresql-的-mvcc">PostgreSQL 的 MVCC<a href="#postgresql-的-mvcc" class="hash-link" aria-label="PostgreSQL 的 MVCC的直接链接" title="PostgreSQL 的 MVCC的直接链接">​</a></h2><p>PostgreSQL自设计之初就支持多版本。PostgreSQL MVCC的核心思想很直接：当更新已经存在的行时，对行数据做一份拷贝，并将更新应用到拷贝后的版本上，而不是在已有行上覆盖更新。我们称这种方式为<code>append-only</code>的版本存储方式。但这个方法对系统的其余部分有一些重要的影响。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="多版本的存储方式">多版本的存储方式<a href="#多版本的存储方式" class="hash-link" aria-label="多版本的存储方式的直接链接" title="多版本的存储方式的直接链接">​</a></h3><p>PostgreSQL在相同的存储空间中存储表的所有版本数据。为了更新已经存在的tuple，DBMS首先为新版本申请一个空的slot。然后拷贝当前版本的行数据作为新版本，再应用更新到新版本中。你可以在下面的例子中看到这个过程，</p><p><img loading="lazy" src="/assets/images/p1-4303dfa7b3ee7139e31ea9b8ae66f1d1.png" width="1056" height="422" class="img_ev3q"></p><p>现在对于一个逻辑行已经存在两个版本，DBMS需要记录这些版本的关系，以便之后查询。DBMS通过一个基于单向链表的版本链来实现这个目的。版本链只能按一个方向去迭代以减少存储和维护开销。这意味着DBMS必须决定使用哪个顺序：<em>newest-to-oldest</em>（N2O）或者<em>oldest-to-newest</em>（O2N）。</p><blockquote><p>版本链的存储方式是单向链表，只能按一个方向迭代查找。</p></blockquote><p>对于N2O顺序，每个tuple版本指向它的前一个版本，版本链的头节点总是最新的版本。对于O2N顺序，每个tuple版本指向它的新版本，并且头节点是最老的tuple版本。O2N方法避免了在每次修改的时候还要去更新索引使其指向新版本。</p><p>然而，在查询时为了找到最新版本可能要花很长时间在版本链上迭代。大多数的DBMS，包括Oracle和MySQL都是N2O实现。但PostgreSQL仍然使用O2N。</p><blockquote><p>O2N的方式，通过索引找到旧版本，再通过版本链找到合适的新版本。
所以数据更新如果不涉及索引字段变化，可以不用更新索引。但代价就是使用索引的查询效率更低。</p></blockquote><p>下一件事是PostgreSQL在版本指针里记录了什么。每行记录的header包含一个tuple id字段（t_tcid）指向下一个版本（如果它自己就是最新版本则指向它自己）。因此，像下面例子展示的，当查询一行记录最新版本的数据时，DBMS需要根据索引，加载最老的版本，然后沿着指针迭代找到它需要的版本。</p><p><img loading="lazy" src="/assets/images/p2-b1b95d3eb74124ff0c1acb03d00c11ed.png" width="1056" height="422" class="img_ev3q"></p><p>PostgreSQL的开发者很早就意识到MVCC设计的两个问题。首先，每次更新都拷贝整个tuple很昂贵。第二，查询最新版本要迭代整个版本链代价也很高。</p><p>为了避免迭代整个版本链，PostgreSQL的索引为一行数据的每个版本都添加一条记录。这意味着如果一个逻辑行有5个版本，索引中就会有5条记录。在下面的例子中，我们看的索引<code>idx_name</code>包含一条记录的两个版本，分散在两个page中。这使得可以直接访问最新版本的tuple，而不用迭代整个版本链。</p><p><img loading="lazy" src="/assets/images/p3-799edc1ab71417ce9c60075a0d05303e.png" width="1056" height="422" class="img_ev3q"></p><p>PostgreSQL使用 <a href="https://www.postgresql.org/docs/current/storage-hot.html" target="_blank" rel="noopener noreferrer">heap-only tuple (HOT)</a>&nbsp;updates技术，将新版本的拷贝放到和旧版本同一个page中，避免去更新多条索引记录和跨page存储多个相关版本的数据，以此减少磁盘IO。如果更新字段不涉及索引相关的列，并且旧版本所在的page有足够的空间，就可以使用HOT方式优化。在我们的例子中，在更新后索引仍然指向旧版本，查询请求通过迭代版本链获取最新版本。正常操作期间，PostgreSQL通过删除旧版本来优化查询。</p><blockquote><p>为了加速索引查询效率，修改时也在索引中增加指向新版本的记录。但每次都更新索引代价也高，所以提出HOT update技术，如果修改不涉及索引字段变化，且新旧版本仍然在同一个page中，就不去更新索引。
我觉得这种方案的考虑可能是：在一个page中迭代版本链是内存操作速度快，但如果新旧记录跨page，就会涉及一次磁盘随机IO，通过索引找到旧版本，再迭代版本链找新版本，那何不直接由索引指向新版本，节省跨页时的磁盘IO。</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="版本清理">版本清理<a href="#版本清理" class="hash-link" aria-label="版本清理的直接链接" title="版本清理的直接链接">​</a></h3><p>我们已经确定PostgreSQL在更新时会产生新的版本。下一个问题是怎么回收无效版本。在PostgreSQL的早期版本中并不清理无效版本。想法是存储所有的历史版本，允许应用查询任意时间点的数据。但不清理无效版本意味着表空间不会收缩。也意味着频繁更新tuple的长版本链，这会降低查询速度。除非PostgreSQL的索引可以直接找的正确的版本而不用迭代版本链。但这又意味着索引会变大，降低查询速度，增加存储压力。你现在明白为什么这些问题都是相互关联的了吧。</p><p>为了解决这些问题，PostgreSQL使用了vacuum来清理表中无效的tuple。vacuum会顺序扫描表的数据页找过期版本。一个版本，如果没有存活的事务可见，就会被认为是过期版本。这意味着当前没有事务正在访问这个版本，之后的事务也会访问更新的版本。因此删除过期版本并回收空间是安全的。</p><p>PostgreSQL按照配置的固定时间间隔，自动执行vacuum（autovacuum）。除了有影响所有表的全局配置之外，PostgreSQL还提供表级别的配置。用户也可以通过<code>VACUUM</code>命令手动触发。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="为什么postgresql的mvcc是最糟糕的">为什么PostgreSQL的MVCC是最糟糕的<a href="#为什么postgresql的mvcc是最糟糕的" class="hash-link" aria-label="为什么PostgreSQL的MVCC是最糟糕的的直接链接" title="为什么PostgreSQL的MVCC是最糟糕的的直接链接">​</a></h2><p>老实说：如果今天有人要实现一个MVCC的MBMS，他们不会采用PostgreSQL的方式实现。在我们的这篇论文里&nbsp;<a href="https://db.cs.cmu.edu/papers/2017/p781-wu.pdf" target="_blank" rel="noopener noreferrer">2018 VLDB paper</a>&nbsp;(aka “<a href="https://twitter.com/andy_pavlo/status/902863242774634496" target="_blank" rel="noopener noreferrer">the best paper ever on MVCC</a>“)，我们没有找到其他DBMS像PostgreSQL一样实现MVCC。它的设计是1990年代日志结构系统爆发前，1980年代的遗迹。</p><p>让我们讨论PostgreSQL MVCC的4个问题。我们也会讨论为什么其他MVCC的DBMS，像Oracle、MySQL避免了这些问题。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="问题-1-版本拷贝">问题 #1: 版本拷贝<a href="#问题-1-版本拷贝" class="hash-link" aria-label="问题 #1: 版本拷贝的直接链接" title="问题 #1: 版本拷贝的直接链接">​</a></h3><p>在append-only的存储模式中，如果更新一个tuple，无论修改多少列，DBMS都会拷贝所有的列作为新版本。可以想象，append-only的MVCC会导致大量数据重复和存储需求增加。这个方法意味着PostgreSQL比其他DBMS需要更多的内存和磁盘，意味着更慢的查询和更高的云成本。</p><p>相比于拷贝整个tuple作为新版本，MySQL和Oracle存储的是新版本和当前版本的差异（文章中用的是‘delta’）（就像git diff）。如果一个请求只更新了一张1000列的表中的一列，PostgreSQL需要创建一个新版本，包含修改的1列和未修改的999列。而MySQL这类DBMS只需要记录更新的这一列的差异。</p><blockquote><p>这种方式文章中成为delta versions。后面也直接用这个词。</p></blockquote><p>为了让PostgreSQL的多版本存储更现代化，EnterpriseDB在2013年开始了<a href="https://wiki.postgresql.org/wiki/Zheap" target="_blank" rel="noopener noreferrer">zheap project</a>，尝试使用delta versions的方式替换append-only的存储引擎。遗憾的是失败了。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="问题-2-表膨胀">问题 #2: 表膨胀<a href="#问题-2-表膨胀" class="hash-link" aria-label="问题 #2: 表膨胀的直接链接" title="问题 #2: 表膨胀的直接链接">​</a></h3><p>PostgreSQL过期版本数据相对于delta versions的方式，会占用更多的存储空间。尽管PostgreSQL的自动清理最终会删掉无效tuple，但写压力大的场景下可能会导致数据增长比清理速度更快，导致数据库的持续增长。因为DBMS把无效tuple和存活tuple混合存储在page中，查询时必须把过期tuple也加载进内存。</p><p>无限的膨胀会增高IOPS并且消耗更多内存，最终降低查询性能。另外，由无效tuple引起的不准确的优化器统计信息可能会导致糟糕的查询计划。</p><p>假设我们的电影表有1000万有效tuple，4000万无效tuple，有80%的无效数据。而且表中列较多，平均每个tuple占用1KB。这种场景下，有效tuple占用10GB存储空间，无效tuple占用40GB空间，整个表占用50GB。</p><p>当一个查询执行全表扫描，PostgreSQL必须从磁盘加载50GB数据，并且存储在内存中，尽管大多数数据是无效数据。尽管PostgreSQL有保护机制避免顺序扫描污染缓存池，但也不能避免IO消耗。</p><p>尽管你可以确定PostgreSQL的自动清理正在周期性执行并且能跟得上你的workload（本身并不容易），自动清理也无法回收存储空间。自动回收会删除每个page上的无效tuple，并且重新存储存活tuple，但他也不会回收磁盘上的空page。</p><blockquote><p>这里的空page只是DBMS逻辑上的空page，像是文件中的空闲区域，仍然受DBMS管理，在后续分配时使用。
而返还OS得对文件重写。</p></blockquote><p>在我们上面的例子中，即使PostgreSQL从电影表中删掉了40GB的无效tuple，它仍然会保留从操作系统申请的50GB存储空间（AWS的RDS就是这个情况）。为了回收这些无用空间，必须使用<code>VACUUM FULL</code>或pg_repack去重写整个表到一片新空间。</p><p>在不考虑生产数据库的性能影响的情况下，运行这两种操作都不是一件容易的事。它们是耗资源且耗时的操作，会拖垮查询性能。下图展示了<code>VACUUM</code>和<code>VACUUM FULL</code>如何工作</p><p><img loading="lazy" src="/assets/images/p4-bf8546dc481f7ed53c9b04c37f787af2.png" width="1575" height="629" class="img_ev3q"></p><p>当PostgreSQL执行<code>VACUUM</code>操作，DBMS只是从表的page中删掉无效tuple，然后重新组织，将所有有效tuple放到page的末尾。而执行<code>VACUUM FULL</code>，PostgreSQL从每个page中删掉无效tuple，重新合并所有剩余存活tuple到一个新的page中(Table Page #3)，并且删掉无用的page(Table Pages #1 / #2)</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="问题3-二级索引的维护">问题#3: 二级索引的维护<a href="#问题3-二级索引的维护" class="hash-link" aria-label="问题#3: 二级索引的维护的直接链接" title="问题#3: 二级索引的维护的直接链接">​</a></h3><p>对一个tuple的一次更新，PostgreSQL要更新表的所有索引，因为PostgreSQL在主键索引和二级索引中存储的都是一个版本的物理地址。除非新版本和旧版本在同一个page上（HOT update），否则就要更新所有索引。</p><p>回到我们<code>UPDATE</code>请求的例子，PostgreSQL在一个新的page上创建了旧版本的拷贝形成新版本。但它也需要在主键索引（movies_pkey）和2个二级索引（idx_director，idx_name）中插入指向新版本的记录。</p><p><img loading="lazy" src="/assets/images/p5-f6394e454d7a57b0e9fdd30a5e11f4c6.png" width="1577" height="746" class="img_ev3q"></p><p>在上图的例子中，展示非HOT update操作时索引的维护。DBMS在Page#2上创建了tuple的一个新版本，然后在表的所有索引中插入一条新纪录指向这个版本。</p><p>每次更新都要修改表的全部索引会带来性能损耗。DBMS增加了额外的I/O去读写每个索引。访问索引也会在索引和DBMS内部数据结构上引入锁竞争（例如buffer pool的page table）。</p><p>另外，对索引的维护工作带来的额外读写对于基于IOPS向用户收费的DBMS是有问题的，像Amazon Aurora。</p><p>根据上面描述的，PostgreSQL通过将新版本与旧版本写在同一个page上（HOT update）来避免更新索引。我们基于OtterTune用户的PostgreSQL数据库分析平均大约46%的更新使用了HOT update。仍然有超过50%的更新要付出这个代价。</p><p>有很多用户例子挣扎于PostgreSQL的MVCC实现的。最著名是Uber 2016年的博客，关于他们<a href="https://www.uber.com/en-HK/blog/postgres-to-mysql-migration/" target="_blank" rel="noopener noreferrer">为什么从Postgres迁到了MySQL</a>。他们写密集型的workload，在一些有较多二级索引的表上，有严重的性能问题。</p><p>Oracle和MySQL在他们MVCC的实现上没有这个问题，因为他们的二级索引不是存储的新版本的物理地址。相反，他们存储了一个逻辑ID（例如 tuple id，主键ID）。这可能会导致读二级索引更慢，因为必须要解析逻辑ID（回表），但这些DBMS在他们MVCC的实现上有其他优势来降低损耗。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="问题-4-vacuum-management">问题 #4: Vacuum management<a href="#问题-4-vacuum-management" class="hash-link" aria-label="问题 #4: Vacuum management的直接链接" title="问题 #4: Vacuum management的直接链接">​</a></h3><p>PostgreSQL的性能严重依赖autovacuum删除过期数据并回收空间的效率。无论你正在使用的是RDS，Aurora或者Aurora Serverless，所有基于PostgreSQL的变体都有一样的autovacuum问题。</p><p>但是因为其复杂度，很难确保autovacuum可以最佳地运行。PostgreSQL对优化autovacuum的配置并不适合于所有表，尤其是大表。例如，默认autovacuum触发前，更新操作占比至少20%(<a href="https://www.postgresql.org/docs/15/runtime-config-autovacuum.html#GUC-AUTOVACUUM-VACUUM-SCALE-FACTOR" target="_blank" rel="noopener noreferrer">autovacuum_vacuum_scale_factor</a>)。这个阈值的意思是，如果一张表里有1亿tuple，在更新至少2千万前不会触发autovacuum。因此，PostgreSQL可能保存了大量无效tuple很长时间，这会增加IO和内存消耗。</p><p>PostgreSQL autovacuum的另一个问题是，它可能被长时间运行的事务阻塞，这会导致更多无效tuple的积累和过时的统计数据。未能及时清理过期版本会导致更严重的性能问题，导致更多长时间运行的事务阻塞autovacuum执行。这变成一个恶性循环，要求手动kill掉长时间运行的事务。</p><p>下图展示了一个OtterTune客户的数据库中，两周内无效tuple的数量：</p><p><img loading="lazy" src="/assets/images/p6-df5f4b69dd51b3e4de22e9031cfe443f.png" width="1573" height="628" class="img_ev3q"></p><p>PostgreSQL Amazon RDS 数据库中一段时间​​内失效tuple的数量。</p><p>图中的锯齿状表示autovacuum大约每天执行一次major clean-up。例如，在Feb-14th，DBMS清理了320万的无效tuple。这个图展示的，就是一个不健康的PostgreSQL数据库的例子，因为autovacuum赶不上无效tuple增长的速度。</p><p>在OtterTune，我们经常在用户的数据库中碰到这个问题。一个 PostgreSQL RDS 实例由于批量插入数据后，过时的统计信息导致查询长时间运行。此请求阻塞autovacuum更新统计信息，导致了更多长时间运行的请求。这就需要管理员手动kill掉请求。</p><blockquote><p>根据上文描述，这里的统计信息（statistics）应该是指查询优化器的统计信息，查询优化器统计信息不准，导致查询计划不合理，事务运行时间更长。</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="结束语">结束语<a href="#结束语" class="hash-link" aria-label="结束语的直接链接" title="结束语的直接链接">​</a></h2><p>构建 DBMS 时总是必须做出一些艰难的设计决策，这些决定将导致任何 DBMS 在不同的工作负载上表现不同。对于Uber这类写密集型workload，由于PostgreSQL MVCC带来的索引写放大问题，就是他们迁移到MySQL的原因。</p><p>但请不要误解我们的谩骂意味着我们不认为你应该用PostgreSQL。尽管它的MVCC实现采用了错误的方式，PostgreSQL仍然是我们最喜欢的DBMS。热爱某件事就是愿意克服它的缺陷。</p><p>所以如何解决PostgreSQL的问题？你可能会花费大量的时间和精力自己调整它。<a href="https://philbooth.me/blog/nine-ways-to-shoot-yourself-in-the-foot-with-postgresql" target="_blank" rel="noopener noreferrer">祝你好运</a>。</p><p><a href="https://ottertune.com/blog/yes-postgresql-has-problems-but-we-re-sticking-with-it" target="_blank" rel="noopener noreferrer">下一篇博客</a>我们会详细介绍你可以做哪些事情。</p>]]></content>
        <author>
            <name>Ddupg</name>
            <uri>https://ddupg.github.io</uri>
        </author>
        <category label="数据库" term="数据库"/>
        <category label="后端" term="后端"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[HBase MVCC基本原理]]></title>
        <id>https://ddupg.github.io/blog/20230824-hbase-mvcc</id>
        <link href="https://ddupg.github.io/blog/20230824-hbase-mvcc"/>
        <updated>2023-08-23T09:56:00.791Z</updated>
        <summary type="html"><![CDATA[HBase MVCC基本原理]]></summary>
        <content type="html"><![CDATA[<p>现代数据库中，为提高并发行能，对于读写冲突，往往避免采用全程加锁的方案，而采用MVCC多版本并发控制。</p><p>本文简单介绍下HBase的MVCC的实现机制。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="mvcc基本结构">MVCC基本结构<a href="#mvcc基本结构" class="hash-link" aria-label="MVCC基本结构的直接链接" title="MVCC基本结构的直接链接">​</a></h2><p>HBase的MVCC是由<code>MultiVersionConcurrencyControl</code>类实现。</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">MultiVersionConcurrencyControl</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">AtomicLong</span><span class="token plain"> readPoint </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">AtomicLong</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">AtomicLong</span><span class="token plain"> writePoint </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">AtomicLong</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// This is the pending queue of writes.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">LinkedList</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">WriteEntry</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> writeQueue </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">LinkedList</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>关键属性就这么多。语言描述太麻烦，直接看图。</p><p><img loading="lazy" src="/assets/images/p1-e77cad36f698573a76cb03058fc3adbd.png" width="1263" height="869" class="img_ev3q"></p><p><strong>HBase的MVCC维护的可读范围是连续区间，没有空洞</strong>。图中6先于4、5完成但不可读。直到4、5都完成时，会连续更新<code>readPoint</code>到6，6才可读。</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">WriteEntry</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 从writePoint中取的值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">long</span><span class="token plain"> writeNumber</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 当前entry是否已经完成</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">boolean</span><span class="token plain"> completed </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>WriteEntry</code>也很简单，不废话。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="mvcc-初始化">MVCC 初始化<a href="#mvcc-初始化" class="hash-link" aria-label="MVCC 初始化的直接链接" title="MVCC 初始化的直接链接">​</a></h2><p>HBase的事务只做到region级别，原生不支持跨region的事务。所以每个Region持有一个MVCC对象来做版本控制。</p><p>在region初始化时，会从region的数据目录下加载所有的HFile以及recoverd edits/hfiles，找到最大的seqId，用来初始化MVCC的<code>readPoint</code>和<code>writePoint</code>。</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// 初始化所有Store，返回的是所有Store中所有HFile的seqId最大值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">long</span><span class="token plain"> maxSeqId </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">initializeStores</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">reporter</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> status</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">mvcc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">advanceTo</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">maxSeqId</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">isRestoredRegion </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token class-name">ServerRegionReplicaUtil</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">shouldReplayRecoveredEdits</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">Collection</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">HStore</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> stores </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">stores</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">values</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">try</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Recover any edits if available.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 恢复recovered edits，更新maxSeqId</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    maxSeqId </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Math</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">max</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">maxSeqId</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">replayRecoveredEditsIfAny</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">maxSeqIdInStores</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> reporter</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> status</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Recover any hfiles if available</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 恢复recovered hfiles，更新maxSeqId</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    maxSeqId </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Math</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">max</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">maxSeqId</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">loadRecoveredHFilesIfAny</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">stores</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Make sure mvcc is up to max.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">mvcc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">advanceTo</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">maxSeqId</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="region的seqid是什么">region的seqId是什么<a href="#region的seqid是什么" class="hash-link" aria-label="region的seqId是什么的直接链接" title="region的seqId是什么的直接链接">​</a></h3><p>region的每个Cell都有个seqId，由MVCC生成的不断递增的整型。同一个事务中的Cell具有相同的seqId。</p><ol><li>如果是新表的空region，seqId则从1开始生成</li><li>如果是已存在的region，在重新open的时候，则需要通过读HFile和recovered edits/hfiles获知当前最大的seqId，再继续递增。</li><li>其中split/merge产生的region，也会找到split/merge之前的region的HFile最大的seqId，即子region会在父region的seqId基础上继续递增。</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="写请求">写请求<a href="#写请求" class="hash-link" aria-label="写请求的直接链接" title="写请求的直接链接">​</a></h2><p>Region的写操作，都会收敛到<code>doMiniBatchMutate()</code>方法，所以直接来看这里的逻辑</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">doMiniBatchMutate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">BatchOperation</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics operator" style="color:#393A34">?</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> batchOp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">throws</span><span class="token plain"> </span><span class="token class-name">IOException</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// STEP 3. Build WAL edit</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 对于正常的写入操作，walEdits只有一个元素</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">List</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">Pair</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">NonceKey</span><span class="token generics punctuation" style="color:#393A34">,</span><span class="token generics"> </span><span class="token generics class-name">WALEdit</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> walEdits </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> batchOp</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">buildWALEdits</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">miniBatchOp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// STEP 4. Append the WALEdits to WAL and sync.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Iterator</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">Pair</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">NonceKey</span><span class="token generics punctuation" style="color:#393A34">,</span><span class="token generics"> </span><span class="token generics class-name">WALEdit</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> it </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> walEdits</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">iterator</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> it</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">hasNext</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">walEdit </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">walEdit</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">isEmpty</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// 把修改追加写到WAL中，在这里面会调用到mvcc.begin()，并将writeEntry最终返回</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// 在这里面，会把WALEdit中所有的Cell的seqId设置成writeEntry的writePoint</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      writeEntry </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">doWALAppend</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">walEdit</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> batchOp</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> miniBatchOp</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> now</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> nonceKey</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Complete mvcc for all but last writeEntry (for replay case)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">it</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">hasNext</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> writeEntry </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// 因为walEdits只有一个元素，所以不会执行到这里</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      mvcc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">complete</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">writeEntry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      writeEntry </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// STEP 5. Write back to memStore</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// NOTE: writeEntry can be null here</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  writeEntry </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> batchOp</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">writeMiniBatchOperationsToMemStore</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">miniBatchOp</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> writeEntry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> now</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// STEP 6. Complete MiniBatchOperations: If required calls postBatchMutate() CP hook and  </span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// complete mvcc for last writeEntry</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 这里会执行mvcc.completeAndWait(writeEntry)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 标志writeEntry完成，并阻塞到writeEntry之前的所有entry完成，实际就是阻塞到当前事务可见</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  batchOp</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">completeMiniBatchOperations</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">miniBatchOp</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> writeEntry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>为介绍简单，省略了大部分细节。总结下上面的写入流程：</p><ol><li>根据写入内容，构造WAL中的WALEdit</li><li>写WAL，在必要的时候通过region的MVCC生成writeEntry，并填充Cell的seqId</li><li>把变更内容写进MemStore</li><li>阻塞等待当前事务的writePoint可见，代表事务完成</li></ol><p>这时候再来看下MVCC的两个核心方法怎么实现的：</p><p><code>begin()</code>开启一个写事务</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token class-name">WriteEntry</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">begin</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Runnable</span><span class="token plain"> action</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 对writeQueue上锁</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">synchronized</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">writeQueue</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// writePoint递增，生成新的WriteEntry，并加入到writeQueue中</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">long</span><span class="token plain"> nextWriteNumber </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> writePoint</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">incrementAndGet</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">WriteEntry</span><span class="token plain"> e </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">WriteEntry</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nextWriteNumber</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    writeQueue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 为理解简单，忽略这里的Runnable就好</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    action</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">run</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>complete()</code>完成一个事务</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">boolean</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">complete</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">WriteEntry</span><span class="token plain"> writeEntry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 对writeQueue上锁</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">synchronized</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">writeQueue</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 标记当前writeEntry完成</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    writeEntry</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">markCompleted</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">long</span><span class="token plain"> nextReadValue </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NONE</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">boolean</span><span class="token plain"> ranOnce </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">writeQueue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">isEmpty</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      ranOnce </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// 取出writeQueue的头节点</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token class-name">WriteEntry</span><span class="token plain"> queueFirst </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> writeQueue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getFirst</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// 如果头节点已经完成，则从队列中移除</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">queueFirst</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">isCompleted</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        nextReadValue </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> queueFirst</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getWriteNumber</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        writeQueue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">removeFirst</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        queueFirst</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">runCompletionAction</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nextReadValue </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">synchronized</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">readWaiters</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 更新readPoint</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        readPoint</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nextReadValue</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 唤醒可能在等待事务完成的线程</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        readWaiters</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">notifyAll</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 当前的事务可读了，返回true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> readPoint</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> writeEntry</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getWriteNumber</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="读请求">读请求<a href="#读请求" class="hash-link" aria-label="读请求的直接链接" title="读请求的直接链接">​</a></h2><p>region读数据都会最终构造成<code>RegionScannerImpl</code>执行，我们直接看<code>RegionScannerImpl</code>的构造方法。</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">RegionScannerImpl</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Scan</span><span class="token plain"> scan</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">List</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">KeyValueScanner</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> additionalScanners</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">HRegion</span><span class="token plain"> region</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">long</span><span class="token plain"> nonceGroup</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">long</span><span class="token plain"> nonce</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">throws</span><span class="token plain"> </span><span class="token class-name">IOException</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">region </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> region</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">IsolationLevel</span><span class="token plain"> isolationLevel </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> scan</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getIsolationLevel</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 从scan信息中读readPoint。因为scan可能跨越多次rpc，为保证每次的可见性一致，会在scan里记录readPoint</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">long</span><span class="token plain"> mvccReadPoint </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">PackagePrivateFieldAccessor</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getMvccReadPoint</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">scan</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">try</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">mvccReadPoint </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// 如果scan里有readPoint，则直接使用</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">readPt </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> mvccReadPoint</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">hasNonce</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">region</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> nonce</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// 忽略，正常读请求不会走到这</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">readPt </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> rsServices</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getNonceManager</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getMvccFromOperationContext</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nonceGroup</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> nonce</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// 根据隔离级别，获取readPoint</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">readPt </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> region</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getReadPoint</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">isolationLevel</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>RegionScannerImpl</code>会层层分拆为读MemStore的<code>SegmentScanner</code>和读HFile的<code>StoreFileScanner</code>，<code>readPt</code>参数也会一直传递下去。</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**  </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">* Private internal method for iterating over the segment, skipping the cells with irrelevant MVCC  </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">*/</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">protected</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">updateCurrent</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">Cell</span><span class="token plain"> next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">iter</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">hasNext</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> iter</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// 只有&lt;=readPoint的Cell才会被读到</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">next</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getSequenceId</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">readPoint</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        current </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> next</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token punctuation" style="color:#393A34">;</span><span class="token comment" style="color:#999988;font-style:italic">// skip irrelevant versions</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// end of while</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">protected</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">boolean</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">skipKVsNewerThanReadpoint</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">throws</span><span class="token plain"> </span><span class="token class-name">IOException</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// We want to ignore all key-values that are newer than our current</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// readPoint</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 跳过所有&gt;readPt的Cell</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">enforceMVCC </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> cur </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">cur</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getSequenceId</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> readPt</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">boolean</span><span class="token plain"> hasNext </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> hfs</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">setCurrentCell</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hfs</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getCell</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>通过以上两段代码，可以看出scan操作只会返回&lt;=readPoint的Cell</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a href="#总结" class="hash-link" aria-label="总结的直接链接" title="总结的直接链接">​</a></h2><ul><li>HBase的版本MVCC比较简单，只支持Region级别的事务，事务可见范围只有从(-∞, readPoint]的单段区间</li><li>写操作执行前申请WriteEntry，执行完成后，等待WriteEntry可见，以此保证强一致性</li><li>读操作则根据readPoint，过滤掉所有不可见的Cell即可</li></ul>]]></content>
        <author>
            <name>Ddupg</name>
            <uri>https://ddupg.github.io</uri>
        </author>
        <category label="数据库" term="数据库"/>
        <category label="HBase" term="HBase"/>
        <category label="MVCC" term="MVCC"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[HBase Snapshot基本原理]]></title>
        <id>https://ddupg.github.io/blog/20230706-hbase-snapshot</id>
        <link href="https://ddupg.github.io/blog/20230706-hbase-snapshot"/>
        <updated>2023-07-06T14:20:10.791Z</updated>
        <summary type="html"><![CDATA[HBase Snapshot基本原理]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="前言">前言<a href="#前言" class="hash-link" aria-label="前言的直接链接" title="前言的直接链接">​</a></h2><p>成熟的数据库都有备份与恢复的功能，在意外或故障时还能尽量恢复数据，同时还能实现数据迁移。接下来就是介绍HBase的备份与恢复功能——Snapshot。</p><p>出于学习目的，代码参考社区master分支，最接近的release版本应该是3.0.0-alpha-4，目前肯定是没有公司在线上使用的。也许实现细节上会有些区别，但核心逻辑基本一致。</p><p>HBase Snapshot具备以下能力：</p><ul><li>数据备份与恢复</li><li>利用ExportSnapshot工具实现数据迁移，可以迁移至HDFS或各类主流对象存储</li><li>使用MR/Spark直接扫描Snapshot，进行离线分析，避免对实时读写的影响</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="snapshot数据组织">Snapshot数据组织<a href="#snapshot数据组织" class="hash-link" aria-label="Snapshot数据组织的直接链接" title="Snapshot数据组织的直接链接">​</a></h2><p>HBase基于LSM Tree实现，数据落盘形成HFile之后就不会再改动，所以实现Snapshot的基本思想就是生成某一时刻所有HFile的引用，而不需要做数据拷贝，所以足够轻量。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="文件系统上的snapshot">文件系统上的snapshot<a href="#文件系统上的snapshot" class="hash-link" aria-label="文件系统上的snapshot的直接链接" title="文件系统上的snapshot的直接链接">​</a></h3><p>Snapshot在HDFS上的数据文件：</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./hdfs dfs -ls -R </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">hbase-root-path</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">/.hbase-snapshot/</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">snapshot-name</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r-x---+  </span><span class="token number" style="color:#36acaa">3</span><span class="token plain"> hbase supergroup        </span><span class="token number" style="color:#36acaa">211</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2023</span><span class="token plain">-07-04 </span><span class="token number" style="color:#36acaa">17</span><span class="token plain">:13 </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">hbase-root-path</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">/.hbase-snapshot/</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">snapshot-name</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">/.snapshotinfo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r-x---+  </span><span class="token number" style="color:#36acaa">3</span><span class="token plain"> hbase supergroup        </span><span class="token number" style="color:#36acaa">591</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2023</span><span class="token plain">-07-04 </span><span class="token number" style="color:#36acaa">17</span><span class="token plain">:13 </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">hbase-root-path</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">/.hbase-snapshot/</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">snapshot-name</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">/data.manifest</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>即只有两个文件：</p><table><thead><tr><th>文件</th><th>作用</th></tr></thead><tbody><tr><td><code>.snapshotinfo</code></td><td>记录snapshot的基本信息，包含snapshot名、表名、创建时间等</td></tr><tr><td><code>data.manifest</code></td><td>记录表schame和snapshot引用的所有HFile</td></tr></tbody></table><p>真实的数据文件都是通过<code>data.manifest</code>中记录的文件引用链接到的。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="snapshot数据格式">snapshot数据格式<a href="#snapshot数据格式" class="hash-link" aria-label="snapshot数据格式的直接链接" title="snapshot数据格式的直接链接">​</a></h3><p>然后来看<code>data.manifest</code>是如何引用HFile的：</p><div class="language-protobuf codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-protobuf codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">message SnapshotDataManifest {  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  required TableSchema table_schema = 1;  // 表schema，用snapshot恢复表时有用</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  repeated SnapshotRegionManifest region_manifests = 2;  // 引用的region信息</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">message SnapshotRegionManifest {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  optional int32 version = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  required RegionInfo region_info = 2; // region基本信息，startkey等</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  repeated FamilyFiles family_files = 3; // 引用的列簇</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  message StoreFile {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    required string name = 1; // HFile文件名</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    optional Reference reference = 2; // 如果HFile是split产生的ref文件，则有这个属性</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    optional uint64 file_size = 3;  // 文件大小</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  message FamilyFiles {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    required bytes family_name = 1;  // 列簇名</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    repeated StoreFile store_files = 2;  // 引用的文件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>实际也是按照Snapshot-Region-CF-HFile的层级表示，每层再记录一些基本信息。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="hfile文件引用">HFile文件引用<a href="#hfile文件引用" class="hash-link" aria-label="HFile文件引用的直接链接" title="HFile文件引用的直接链接">​</a></h3><p>HFile在HDFS上的路径为<code>{hbase-root-path}/data/{namespace-name}/{table-name}/{region-name}/{CF}/{hfile-name}</code></p><p>而通过<code>clone_snapshot</code>或<code>restore_snapshot</code>将snapshot恢复成表时，也不会涉及任何数据文件的拷贝，即snapshot引用的文件并不会拷贝为普通的HFile，而是产生一个LinkFile文件。格式为：<code>{hbase-root-path}/data/{namespace-name}/{table-name}/{region-name}/{CF}/{原表名}={原region name}-{原hfile name}</code></p><p>后续在读HFile的时候，根据文件名发现是link文件，根据文件名就能找到真正的HFile文件。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="snapshot执行过程">Snapshot执行过程<a href="#snapshot执行过程" class="hash-link" aria-label="Snapshot执行过程的直接链接" title="Snapshot执行过程的直接链接">​</a></h2><p>在HBase 2.x版本Snapshot的实现中，仍然使用ZK来协调Master和RegionServer的执行。3.0版本已经改用ProcedureV2框架来实现了，后面以3.0来介绍，实现虽然不同，但逻辑一致。</p><p>执行snapshot的表有两种状态，enabled和disabled。enabled的表可以正常读写，region由RS持有，做snapshot可能需要flush memstore，所以过程中有RS参与。而disabled的表无法读写，没有RS持有region，做snapshot则全由master执行。后面按照enabled的表来介绍。</p><p>过滤掉处理细节，方便理解执行过程。</p><ol><li>master建临时目录，默认是<code>{hbase-root-path}/.hbase-snapshot/.tmp/{snapshot-name}</code>。</li></ol><blockquote><p>HBase中很多逻辑的原子性是通过HDFS的rename实现的，即先写到临时目录，完成后rename到正式目录。这里也是这个逻辑，后续所有操作都是在这个临时目录执行。</p></blockquote><ol start="2"><li>master写<code>.snapshotinfo</code>文件，记录snapshot基本信息</li><li>master通过RPC通知该表region所在的所有的RS去执行region的snapshot工作</li><li>RS执行单个region的snapshot<ol><li>如果是Flush类型的snapshot，则Flush Memstore</li><li>然后遍历所有HFile生成SnapshotRegionManifest，存储到<code>{hbase-root-path}/.hbase-snapshot/.tmp/{snapshot-name}\region-manifest.{region-name}</code></li></ol></li><li>master做所有split的父region的snapshot，执行逻辑与RS一样，只是不用考虑flush。</li></ol><blockquote><p>a. split后的子region仍然存在对父region文件的引用，所以必须也将父region记录到snapshot中。
b. 已经split的父region不再由RS持有，所以是由master直接从HDFS上读其HFile生成region manifest。</p></blockquote><ol start="6"><li>master处理mob region，暂时把它看作一个普通region就好</li><li>master从HDFS上读出所有region的manifest数据，即前缀是<code>region-manifest.</code>的文件，构造完整的snapshot manifest写入HDFS，然后删掉region的manifest文件。</li><li>校验生成的snapshot是否正确。检查项包括：<ul><li>table信息</li><li>region数量</li><li>region信息</li><li>HFile信息，ref</li></ul></li></ol><blockquote><p>默认是master执行。但如果表的region数太多，默认超过10000，Master就会通知各自RS去校验region，而不是自己校验了。参数是<code>hbase.snapshot.remote.verify.threshold</code>
如果RS校验发现有异常，会在snapshot临时目录下生成一个<code>_CORRUPTED</code>空文件，master之后会检查。</p></blockquote><ol start="9"><li>master将snapshot从临时目录rename到正式目录，即<code>{hbase-root-path}/.hbase-snapshot/{snapshot-name}</code></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="snapshot恢复">Snapshot恢复<a href="#snapshot恢复" class="hash-link" aria-label="Snapshot恢复的直接链接" title="Snapshot恢复的直接链接">​</a></h2><p>恢复snapshot有两种命令<code>clone_snapshot</code>和<code>restore_snapshot</code>，clone是用snapshot建一个新表，restore是对一个已存在的表恢复指定snapshot，恢复过程会替换掉原有数据，比较危险，我们线上从来没用这个命令，都是使用<code>clone_snapshot</code></p><p>因为<code>restore_snapshot</code>是在已有表上执行，相比较<code>clone_snapshot</code>，会涉及原有表region和HFile的增删，即多余的region/HFile要删掉（挪到archive目录），缺少的region/HFIle补充目录和引用文件。</p><p>后面按<code>clone_snapshot</code>来介绍。</p><ol><li>做一些前置工作：检查表是否已经存在，检查snapshot的TTL是否已经过期，执行CP</li><li>在HDFS上创建表目录，并写入表schema</li><li>用snapshot manifest的信息，建立region目录，以及HFile引用文件<ol><li>如果是restore，还要考虑增删改region及HFile</li></ol></li></ol><blockquote><p>此时表目录下的HFile都是引用文件，没有发生数据拷贝。
之后会随着compaction的执行，转化为正常的HFile</p></blockquote><ol start="4"><li>将region信息记录到meta表</li><li>将table置为 ENABLING 状态。更新meta表中table状态，以及master内存中table状态。</li><li>将split的父region记录到AM内存中。</li><li>assign 正常 region。</li></ol><blockquote><p>这一步master由TRSP实现，master会将region分配给RS，RS收到master的RPC请求后，会open对应的region。</p></blockquote><ol start="8"><li>将表状态置为enabled。更新meta表中table状态，以及master内存中table状态。</li><li>如果允许，也恢复表的ACL</li></ol><blockquote><p>在做snapshot的时候，snapshot中会记录表的ACL信息，在clone_snapshot或restore_snapshot时，可以选择恢复这些ACL，以保证原来用户可以正常访问。</p><p>a. 如果是走admin接口，则指定<code>restoreAcl</code>为true；
b. 如果是shell，可以这样指定
<code>clone_snapshot 'snapshotName', 'namespace:tableName', {RESTORE_ACL=&gt;true}</code></p></blockquote><ol start="10"><li>收尾工作：执行CP，记录metrics</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a href="#总结" class="hash-link" aria-label="总结的直接链接" title="总结的直接链接">​</a></h2><ol><li>HBase的snapshot是较轻量的行为，不会涉及数据拷贝，只需要维护HFile引用</li><li>在执行snapshot和恢复snapshot过程中，仍然有些注意点，都是与HBase其他功能相关<ol><li>split父region需要维护</li><li>restore snapshot需要维护原表的region和HFile</li><li>表的ACL记录需要存储和恢复</li></ol></li></ol>]]></content>
        <author>
            <name>Ddupg</name>
            <uri>https://ddupg.github.io</uri>
        </author>
        <category label="数据库" term="数据库"/>
        <category label="HBase" term="HBase"/>
        <category label="Snapshot" term="Snapshot"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[论文：Compaction management in distributed key-value datastores]]></title>
        <id>https://ddupg.github.io/blog/20230523-compaction-offload-paper</id>
        <link href="https://ddupg.github.io/blog/20230523-compaction-offload-paper"/>
        <updated>2023-05-23T18:25:10.791Z</updated>
        <summary type="html"><![CDATA[论文：Compaction management in distributed key-value datastores]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="abstract">ABSTRACT<a href="#abstract" class="hash-link" aria-label="ABSTRACT的直接链接" title="ABSTRACT的直接链接">​</a></h2><p>在基于LSMT实现的数据库中，compaction是很重要的机制。compaction虽然有助于维持长期运行过程中的读低延迟，但在compaction过程中读延迟牺牲大。这篇论文中，深度分析了compaction相关的性能损耗，并提出了缓解的技术。我们将大的昂贵的compaction offload到了单独的compaction server，让datastore server更好地利用他自己的资源。此外，因为新compact的数据已经在compaction server的主内存里了，我们通过网络从compaction server把数据抓到datastore server的本地内存，避免读filesystem的性能损耗。事实上，在把workload切换到compaction server之前，预取 compact的数据已经可以消除缓存失效的影响，这时候compaction server只当是远程缓存。因此，我们实现了一个更智能的预热算法确保所有读请求都能被datastore server的本地缓存服务，即使它还在预热。我们已经集成进了hbase，使用YCSB和TPC-C的benchmark显示我们的方法显著消除了compaction相关的性能问题。也展示了compaction server可扩展性。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-introduction">1. INTRODUCTION<a href="#1-introduction" class="hash-link" aria-label="1. INTRODUCTION的直接链接" title="1. INTRODUCTION的直接链接">​</a></h2><p>这篇论文的主要贡献：</p><ol><li>对HBase和Cassandra中compaction的性能分析</li><li>一个将compaction卸载到一或多个独立的compaction server上的可扩展的解决方案</li><li>一个将compact后的数据从compaction server的内存中通过网络高效地流向datastore server本地缓存的方案</li><li>一种智能算法，用compact的数据预热datastore server本地缓存</li><li>基于HBase的上述功能的实现和分析</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-background">2. BACKGROUND<a href="#2-background" class="hash-link" aria-label="2. BACKGROUND的直接链接" title="2. BACKGROUND的直接链接">​</a></h2><p>本节概述了对基于 LSMT 的数据存储中的compaction的背景，并简要概述了在 HBase 和 Cassandra 中如何执行compaction。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="21-lsmt">2.1 LSMT<a href="#21-lsmt" class="hash-link" aria-label="2.1 LSMT的直接链接" title="2.1 LSMT的直接链接">​</a></h3><p>log-structured merge-tree(LSMT)是一种key-value的数据结构，用来实现高吞吐的数据存储。它是一种混合数据结构，有主内存层(C0)，和一或多层的文件系统层(C1或更多)。更新都写进C0，然后批量flush到C1，每次flush生成一个不可变文件，文件内容是有序的key-value对。</p><blockquote><p>介绍了下LSMT的基本结构。他把memstore或者memtable叫做C0，把文件系统中的file叫做C1。有的实现可能存在多层文件系统，可能有C2、C3...</p></blockquote><p>首先对于client，更新操作极快，因为只写内存。第二，flush因为能明显减少磁盘I/O，所以也很高效。对于磁盘来说（HDD），批量顺序写文件比随机写文件更快。这个是该数据结构能够支持高吞吐的原因。第三，对于一个key的多次更新，可能分散在C0和C1的多个文件中。因此一次随机读必须先查C0，然后C1，然后C...，直到找到最新的value。因此文件内容是按key排序的，每个文件会有一个索引用于加速随机读。</p><blockquote><p>介绍写性能高的原因。
介绍读过程要读多处，对结果做合并。</p></blockquote><p>这些只读文件在文件系统中不断生成，会导致读越来越慢。定期地选择两个或多个文件合并成一个文件，可以解决这个问题。合并过程会用最新的value覆盖旧value，并且抛弃已删除的value，从而清理过时的数据。</p><blockquote><p>该过程就是compaction。compaction可以优化读性能。</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="22-hbase">2.2 HBase<a href="#22-hbase" class="hash-link" aria-label="2.2 HBase的直接链接" title="2.2 HBase的直接链接">​</a></h3><blockquote><p>介绍了HBase的数据模型</p></blockquote><p><img loading="lazy" src="/assets/images/figure1-f7d2ba0ad349b02f1f78c4ae35facb29.png" width="1142" height="830" class="img_ev3q"></p><blockquote><p>介绍了HBase的架构，主要是能做到表的弹性和集群的弹性。</p></blockquote><p>HBase用HDFS作为底层文件系统，每个region的每个column family下存储一或多个storefile（就是上面说的C1层不可变文件）。通常一个HBase的region server节点和一个HDFS的datanode部署在一起，用来保证数据的本地化率。</p><p>client和HBase的交互方式：支持点读、点写，和带有filter的scan。写请求会先写入memstore（LSMT的C0）。允许每个row的每个column有多个版本的value。每个region每个column family有一个memstore。当memstore的大小达到阙值，会flush到HDFS生成storefile。读操作会扫描memstore和所有可能的storefile。每个region server还维护了一个block cache缓存storefile中的block，用来提高读性能。</p><p>当一个region的storefile数量达到限制，region server会执行compaction，把多个storefile合并成一个。当compaction触发，有个特定的算法会选择合并哪些storefile。如果选了了全部storefile，就叫做major compaction，否则是minor compaction。major compaction会清理被标记删除的数据。<strong>因此major compaction更昂贵，也通常更耗时</strong>。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="221-exploring-compactions">2.2.1 Exploring Compactions<a href="#221-exploring-compactions" class="hash-link" aria-label="2.2.1 Exploring Compactions的直接链接" title="2.2.1 Exploring Compactions的直接链接">​</a></h4><p>HBase 中的默认compaction算法使用启发式算法，尝试根据管理员指定的某些约束来选择要compact的storefile的最佳组合。目的是让管理员更大程度地控制compaction的大小，从而间接控制compaction的频率。例如，可以指定每次compaction可以处理的存储storefile数量的最小和最大限制。算法还允许对一次compact的总文件大小进行限制，以便minor compaction不会变得太大。最后，可以指定一个 ratio 参数，以确保compaction中包含的每个 storefile 的大小在平均storefile大小的某个因子内。该算法会寻找满足所有这些要求的排列组合，并选择最好的一个（或没有），优化比率参数。我们可以配置 HBase 以在高峰时段和低峰时段使用不同的ratio参数。</p><p>#TODO 搞明白这个ratio的逻辑</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="23-cassandra">2.3 Cassandra<a href="#23-cassandra" class="hash-link" aria-label="2.3 Cassandra的直接链接" title="2.3 Cassandra的直接链接">​</a></h3><p>Cassandra是另一个流行的分布式KV数据库。它的设计融合了Bitgtable和Dynamo的元素。和HBase有很多相同点，也在一些重要的方面有区别。</p><p>Cassandra是无中心的架构，client可以发送请求给集群中任意节点， 然后再被转发给正确节点。Cassandra也允许应用选择一致性级别，选择最终一致，可以提高性能。选择和HBase一样的强一致，会牺牲性能。为了快速访问热数据文件，HBase维护了自己的block cache，Cassandra依赖OS cache，还可以使用更细粒度的行级缓存。最后Cassandra使用了和HBase略有不同的compaction算法（Section 8的tired compaction）。Cassandra的minor compaction也会清理被删除的数据。Cassandra也可以限制compaction速度。</p><p>但Cassandra和HBase还是有两个重要的相似点：</p><ul><li>Cassandra也会将数据分区，每个分区单独跑compaction</li><li>Cassandra也会flush内存中的更新，有序批量的写入只读文件
虽然我们是在HBase上实现的，但这些相似点让我们相信，该方法同样适用于Cassandra和其他基于LSMT的数据库。</li></ul><blockquote><p>HBase是存算分离架构，offload掉compaction很容易。但Cassandra存算一体，如果要offload掉compaction，难道要把compact前后的数据都通过网络IO与compaction server交互吗？</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-architecture">3. ARCHITECTURE<a href="#3-architecture" class="hash-link" aria-label="3. ARCHITECTURE的直接链接" title="3. ARCHITECTURE的直接链接">​</a></h2><p>我们的方案在架构上增加了两个组件：</p><ul><li>一个中心化的compaction manager</li><li>一堆compaction server</li></ul><p>与HBase的集成架构如图Figure 2
<img loading="lazy" src="/assets/images/figure2-816f7904a26782c988e26abe7bb14d50.png" width="1470" height="864" class="img_ev3q"></p><p>compaction server像region server一样执行compact。同样是从HDFS读需要compact的文件，将compact后的文件写回HDFS。</p><p>compaction server可以弹性扩缩容。每个compaction server负责一部分region的compaction。compaction manager负责将region分配给compaction server，就像HBase master负责将region分配给region server一样。</p><p>虽然实现上对HBase的代码做了大量修改，但我们实现上尝试用模块化的方式来做。我们使用HBase master和region server的代码作为基础来实现compaction manager和compaction server。例如把compaction算法作为黑盒，compaction server复用了从HDFS读取storefile和执行compact的代码。然而也<strong>需要修改特定的region server子模块，能够让region server将compaction卸载到compaction server，并且通过网络接收compact后的数据来做高效的预热</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-experimental-setup">4. EXPERIMENTAL SETUP<a href="#4-experimental-setup" class="hash-link" aria-label="4. EXPERIMENTAL SETUP的直接链接" title="4. EXPERIMENTAL SETUP的直接链接">​</a></h2><p>本节介绍实验环境。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="41-environment">4.1 Environment<a href="#41-environment" class="hash-link" aria-label="4.1 Environment的直接链接" title="4.1 Environment的直接链接">​</a></h3><p>我们在一个由20台Linux机器组成的同构集群上运行了实验。每个节点都有一个 2.66 GHz 双核英特尔酷睿 2 处理器、8 GB RAM 和一个 160 GB 的 7200 RPM SATA 硬盘。节点通过千兆以太网交换机连接。操作系统是 64 位 Ubuntu Linux，Java 环境是 64 位 Oracle JDK 7。我们使用了低级软件版本：HBase 0.96，HDFS 2.3，Cassandra 2.0和YCSB 0.1.4。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="42-datastores">4.2 Datastores<a href="#42-datastores" class="hash-link" aria-label="4.2 Datastores的直接链接" title="4.2 Datastores的直接链接">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="421-hbasehdfs">4.2.1 HBase/HDFS<a href="#421-hbasehdfs" class="hash-link" aria-label="4.2.1 HBase/HDFS的直接链接" title="4.2.1 HBase/HDFS的直接链接">​</a></h4><p>HBase master、HDFS namenode和Zookeeper部署在一个节点上。为了更好的了解compaction的性能损耗，我们修改了HBase少量关键配置。</p><ul><li>compaction文件选择率从1.2调整到3.0</li><li>region server设置使用7G内存，其中6G用于block cache</li><li>选择Snappy做压缩算法
在所有的实验中，每个region server和compaction server都有各自的datanode，集群中只有3个datanode。</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="422-cassandra">4.2.2 Cassandra<a href="#422-cassandra" class="hash-link" aria-label="4.2.2 Cassandra的直接链接" title="4.2.2 Cassandra的直接链接">​</a></h4><p>因为Cassandra使用OS cache，我们只为它配置4G内存，并且不启用row cache。我们使用了ByteOrderedPartitioner，能更好的用主键来做顺序scan操作。</p><blockquote><p>ByteOrderedPartitioner应该是一种顺序分区的功能。看样子Cassandra支持多种分区方式。</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="43-benchmarks">4.3 Benchmarks<a href="#43-benchmarks" class="hash-link" aria-label="4.3 Benchmarks的直接链接" title="4.3 Benchmarks的直接链接">​</a></h2><p>典型的 OLTP 工作负载会生成大量并发执行的读写事务。大多数事务执行较小的读和更新，但少数可能执行较大的范围扫描或全表扫描。在我们的实验中，我们尝试使用两个基准测试来模拟这些工作负载特征。</p><p>使用YCSB来做HBase和Cassandra的更新密集型workload的压测。我们启动不同的client进程分别进行读和写。写workload就是100%的更新，读workload有90%的gets和10%的scan。使用Zipfian分布来更接近一个OLTP workload。</p><p>TPC-C是一个著名的OLTP基准测试，我们用了TPC-C的实现PyTPCC，可以用于多种云数据库，包括HBase。因为HBase不支持事务，所以基准测试简化了事务执行，不保证ACID。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-offloading-compaction">5. OFFLOADING COMPACTION<a href="#5-offloading-compaction" class="hash-link" aria-label="5. OFFLOADING COMPACTION的直接链接" title="5. OFFLOADING COMPACTION的直接链接">​</a></h2><p>OLTP应用的一个关键性能指标是在高吞吐下的低响应时间。这一节，我们首先展示在一次大compaction执行期间和刚执行完的时候，读性能显著受损。然后提出和评论一些缓解策略。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="51-motivation">5.1 Motivation<a href="#51-motivation" class="hash-link" aria-label="5.1 Motivation的直接链接" title="5.1 Motivation的直接链接">​</a></h3><p>为了明白HBase compaction对读性能的影响，我们运行10个读线程访问1个region server（没有compaction server）。测试表有1个region，3百万行，大约4GB未压缩数据。这能确保数据集能放进region server的6GB block cache。5秒一次记录get和scan的响应时间。</p><p><img loading="lazy" src="/assets/images/figure3-2027d1cb1dbca6afa9a5bda537425124.png" width="2516" height="974" class="img_ev3q"></p><p>Figure3展示了在每个实验中get和scan的响应时间。Figure3(a)观测到，在完全关闭compaction的情况下，读性能随时间推移逐步下降。Figure3(b)显示，虽然compaction有助于保证读性能在合理范围内，但每次compaction都会引发响应时间显著增长。也能看出major compaction比minor compaction对读性能影响更大时间更长。注意，get和scan都会被major compaction影响。Figure3(c)显示，Cassandra也是同样的现象。</p><p><img loading="lazy" src="/assets/images/figure4-4a08d67756939ec3ab2994ea0ccb09c7.png" width="2006" height="762" class="img_ev3q"></p><p>Fugure4(a)中展示了compaction的两个阶段对读性能的影响。</p><ul><li>compaction：执行过程中需要消耗CPU，自然影响读性能。</li><li>warmup：compaction执行结束之后，之前block cache中缓存的数据失效，需要重新加载compact后的文件并缓存。
这两个原因导致读响应时间在长时间内严重受损。</li></ul><blockquote><p>warmup阶段要经历缓存命中率从0到100%的过程。</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="52-compaction-phase">5.2 Compaction Phase<a href="#52-compaction-phase" class="hash-link" aria-label="5.2 Compaction Phase的直接链接" title="5.2 Compaction Phase的直接链接">​</a></h3><p>我们先尝试分析compaction阶段的性能损耗。观察表明，在datastore server高负载的情况下，compaction阶段的性能下降可能会更明显。换句话说，使已经饱和的处理器过载会导致响应时间激增，并且compaction本身需要更长的时间才能完成。对datastore server来说，一个管理这种负载的方法是限制compaction资源消耗。通过限制compaction速度，datastore server可以在更长的时间内摊销其成本。事实上，这也是Cassandra采用的方法，它限制compaction吞吐为一个可配置项（默认16MB/s）。然而，这个方法也没有彻底解决这个问题，主要有3个理由。</p><ol><li>Figure 3(a)显示，即使限速，compaction时的响应时间仍然有激增</li><li>如果限速更严格，用更长的时间去消化性能损耗，那么compaction花费的时间越长，在这期间就有越多的过期数据需要维护，这也会影响读性能</li><li>即使限速可以缓解一些性能损耗，但它对随后的warmup阶段没有用
![<!-- -->[阅读/20221018-Compaction management in distributed key-value datastores/figure4.png]<!-- -->]</li></ol><p>因此，我们的方法将昂贵的compaction卸载到了单独的compaction server上，让region server可以使用全部资源处理真正的应用程序的workload。该方法有两个明显的收益：</p><ol><li>避免了region server用于compaction的CPU损耗</li><li>compaction可以更快执行，因为它运行在独立的server上
尽管compaction需要从文件系统读storefile，而不是内存（region server是可以从它的block cache里读的），但我们在实验中没有观察到任何负面影响。我们用YCSB评估卸载compaction的优势。我们简单添加了compaction manager和一个compaction server，Figure4(b)展示了get和scan的响应时间。对比Figure4(b)和正常模式的Figure4(a)，可以看出有独立的compaction server时，compaction阶段更短，读延迟也明显优化。另一方面，也能看到在compaction完成之后，长时间的warmup阶段，读性能没有提升。因此，接下来我们讨论使用compaction server主内存中compcat后的数据来优化warmup阶段的优势。</li></ol><blockquote><p>执行compaction要占用CPU，则会影响正常读性能。一般解决方法是限制compaction速度。但会拉长compaction执行时间。
offload compaction之后，不需要做限速，自然compaction执行更快，从头论文提供的图来看，读性能没明显改善。而且warmup阶段的读性能下降仍然存在。
之后就是讨论如何优化warmup阶段。</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="52-warmup-phase">5.2 Warmup Phase<a href="#52-warmup-phase" class="hash-link" aria-label="5.2 Warmup Phase的直接链接" title="5.2 Warmup Phase的直接链接">​</a></h3><p>如之前的讨论，我们发现一旦compaction完成，region server必须将新compact的storefile从磁盘读到block cache。在这个阶段，会因为block cache的缓存命中率低，导致读性能受损严重。实验结果表明，这对我们的workload有很明显的负面影响。事实上，我们往往会看到一个延长的阶段，长达几分钟的响应时间严重降级，无论是单个get还是scan。因此，在本节的其余部分中，我们将分析此特定性能问题并尝试缓解它。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="531-write-through-caching">5.3.1 Write-Through Caching<a href="#531-write-through-caching" class="hash-link" aria-label="5.3.1 Write-Through Caching的直接链接" title="5.3.1 Write-Through Caching的直接链接">​</a></h4><p>首先，我们分析标准模式的warmup阶段。我们考虑在write-through模式下，是否缓存compaction的输出，即每个block写入HDFS的同时也缓存到block cache。理想情况下，可以完全消除warmup阶段。然而我们实验表明，这种方法并没有产生有希望的结果。为了测试这个想法，我们修改了HBase允许在write-though模式下缓存compact之后的block。figure5(b)我们使用的该方法，对比标准模式的figure5(a)。我们看到虽然warmup阶段有一定改善，但性能下降传递回了compaction阶段。进一步分析后发现，在compaction期间有大规模的热block被逐出block cache，导致读性能下降。换句话说，在compaction期间，新compact的完成的数据竞争region server有限的block cache，可能将仍需读的数据逐出内存，然而只有在compaction完成之后，才会切换到读新数据。因此，这个方法只是将问题转移到了compaction阶段。</p><p><img loading="lazy" src="/assets/images/figure5-e153602dd042f6510ab75501e2e5fb77.png" width="2080" height="602" class="img_ev3q"></p><blockquote><p>offload compaction优化了compaction阶段的性能影响，然后开始优化warmup阶段。
warmup阶段的问题根源是，compaction之后大量缓存失效，重新加载影响读性能。首先想到的是在compact过程中，写HDFS时将block直接缓存到block cache。
但发现，有限的block cache既要存储当前正在使用的block，还要存储compact后的新block，而compact后的新block不会立刻使用，要等整个compacion完成才能使用。这过程中，自然也会导致缓存命中率降低，读性能下降。</p></blockquote><p>显然，region server的主内存越大，就有越多的当前数据和compact后的数据同时放进主内存，就有更少的缓存抖动。然而，这会预留大量内存，多余的内存只有在compaction时才会用到。基于这个理由，我们相信使用少量的compaction server做远程缓存，让region server共享，可以用更少的资源解决这个问题。</p><blockquote><p>每个region server预留更多的内存，更大的block cache自然能缓解这个问题，但又有明显的资源浪费。
随后提出使用compaction server做远程缓存，可以让所有region server共享，则可以用更少的资源缓解这个问题。</p></blockquote><h4 class="anchor anchorWithStickyNavbar_LWe7" id="532-remote-caching">5.3.2 Remote Caching<a href="#532-remote-caching" class="hash-link" aria-label="5.3.2 Remote Caching的直接链接" title="5.3.2 Remote Caching的直接链接">​</a></h4><p>compaction offload之后，可以利用compaction server上的write-through缓存，从而将这两种方法结合起来。作为独立的节点，compaction server可以在warmup阶段作为远程缓存，因为它早已经将compaction输出的数据缓存在主内存中了。使用这个方法，region server读最新compact的数据，可以请求compaction server的内存，而不是读磁盘。在磁盘和网络 I/O 之间有一个明显的权衡。由于我们的主要目标是优化响应时间，网络 I/O 比磁盘 I/O 更快，这种权衡是值得的。</p><p>我们已经实现了一个RPC允许region server从compaction server读取缓存的block而不是HDFS的datanode。为了降低网络传输开销，我们在compaction server使用Snappy压缩了block，在region server接收到之后再解压。这会带来轻微开销，但能节省总的传输时间和网络I/O，是一个可接受的权衡。figure5(c)使用了该方法，在warmup阶段的响应时间有显著优化。虽然仍然会有过时的block被逐出内存导致缓存未命中，但是warmup阶段完成的更快，因为读compaction server内存比读磁盘更快。当然，compaction offload的优点依然能保留下来。</p><p>不过仍然能观察到，因为缓存未命中，compaction阶段和warmup阶段存在明显的性能差距。因此，虽然远程缓存比从本地磁盘读取提供了显着的改进，但由于这些缓存未命中而导致的性能损失仍有待解决。</p><blockquote><p>compaction offload解决了compaction阶段的性能损耗。
write-through缓解了warmup阶段的性能损耗，但有俩问题：</p><ol><li>要冗余内存，浪费资源</li><li>反而因为竞争缓存空间，会影响compaction阶段性能
结合这两个方法：使用compaction server做远程缓存，在保证compaction阶段性能不受影响的同时，极大优化了warmup阶段的性能。</li></ol></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="54-smart-warmup">5.4 Smart Warmup<a href="#54-smart-warmup" class="hash-link" aria-label="5.4 Smart Warmup的直接链接" title="5.4 Smart Warmup的直接链接">​</a></h3><p>为了实现进一步的优化，我们通过事先读取并缓存compacted后的数据，从根本上避免缓存不命中。我们讨论两种选项。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="541-pre-switch-warmup">5.4.1 Pre-Switch Warmup<a href="#541-pre-switch-warmup" class="hash-link" aria-label="5.4.1 Pre-Switch Warmup的直接链接" title="5.4.1 Pre-Switch Warmup的直接链接">​</a></h4><p>在第一个选项中，我们在切换到compacted后的数据之前，预热本地缓存（从compaction server传输到region server）。这很像我们之前讨论的write-through缓存的方案。也就是说，它的有效性取决于主内存的富余程度，以便于region server可以同时缓存当前block和compacted后的block，从而实现无缝切换。与write-through缓存（在compaction期间进行预热）相比，我们在compaction完成后执行预热。compaction在远程执行，并且通过网络读取compacted后的数据，所以region server的compaction阶段性能不受影响，warmup也能更有效率。</p><blockquote><p>先理解下
switch：compaction完成之后，读数据要切换到新的storefile。
warmup：切换后，新的storefile没有缓存，逐渐加载进block cache的过程是warmup。
write-through cache：在没有compaction offload的情况下，compact过程中，将产生的新block直接放进block cache。但因为内存有限，在compaction阶段就会产生内存竞争。
pre-switch warmup：使用compaction server做远程缓存之后，compact完成之后，从compaction server读新数据到region server的block cache。好处是不影响compaction阶段，从网络读也更快。</p></blockquote><p>figure6(a)展示了这个方法的性能。pre-switch warmup包含两个子阶段，分别在图中用灰色和粉色表示。回忆一下，我们有6G内存用于block cache。因为当前数据只使用大约4G，pre-switch warmup可以在不对性能产生严重影响的情况下使用剩余的2G（图中gray部分）。然而，随着warmup持续进行（达到pink区域），compacted后的数据和当前数据都在内存中，造成严重的内存竞争。这也会影响切换后的性能（orange部分），因为必须重新读取那些被当前数据覆盖掉的compacted后的数据。因此，pre-switch warmup阶段花费的时间越长，这种方法的效果就越差。尽管如此，它的整体性能仍然优于没有compaction server的write-through 缓存方法（figure5(b)），因为在后一种情况下，一旦block cache填满，新旧数据已经在压缩阶段开始竞争; 然而，对于远程缓存，有害的缓存变动仅在pre-switch warmup阶段的较短部分发生。</p><p><img loading="lazy" src="/assets/images/figure6-bba0143bf0a112eb610c741210d8e431.png" width="2322" height="654" class="img_ev3q"></p><blockquote><p>pre-switch warmup分为了3个阶段，图中没有标颜色，我按理解标了一下：
gray：在block cache有富余内存（2G）时，从远程缓存warmup，对性能影响不大
pink：block cache不足时，出现新旧数据的内存竞争，影响性能
orange：switch之后，因为加载的新数据又可能被逐出内存了，又重新加载，所以性能需要时间逐渐恢复。
整体上比write-through cache方法要好，起码不会影响compaction阶段性能。</p></blockquote><p>由于 OLTP 工作负载通常会存在热点，因此我们还尝试了此方法的一个版本，在该版本中，我们仅使用与当前数据（灰色）并排的热数据来预热缓存，这样我们就不会导致任何缓存抖动（粉红色）。然而，这种策略在测试时似乎没有提供额外的好处。我们意识到这是因为热数据只占blocks的不到 1%，在任何一种情况下（切换之前或之后）都可以轻松立即获取，这意味着 99% 的缓存未命中实际上与冷数据相关联。</p><blockquote><p>单独对1%热点数据的情况做了测试。因为热数据只有1%，没有缓存竞争。
然而加载1%的数据，在任何情况下都很快，也就没有太大意义。</p></blockquote><h4 class="anchor anchorWithStickyNavbar_LWe7" id="542-incremental-warmup">5.4.2 Incremental Warmup<a href="#542-incremental-warmup" class="hash-link" aria-label="5.4.2 Incremental Warmup的直接链接" title="5.4.2 Incremental Warmup的直接链接">​</a></h4><p>我们以上的实验分析表明，region server富余内存越少，pre-switch warmup性能表现越差。因此，我们提出一种incremental warmup策略来解决这个问题，并且不需要富余内存。要满足两个前提。第一个方面是我们<strong>顺序地</strong>从远程缓存中获取compacted的数据，其中每个block替换本地缓存中相应范围的当前数据。为此，我们依赖 LSMT 写入的storefile按key预排序。也就是说，按key顺序传输compacted后的block，新compacted的block替换同样key范围的当前block。在任何给定时间，我们维护incremental warmup阈值 T，它表示具有以下属性的行键：所有row key小于或等于 T 的新block都已被获取且缓存，相应地，所有row key小于等于 T 的旧block都已从本地缓存中逐出。这意味着row key大于 T 的所有旧block尚未被逐出，并且仍在region server的缓存中。</p><p>读操作按如下规则执行。对于请求 R 这个row key的get请求，或者以 R 为start key的scan，如果 R ≤ T ，我们直接读新compacted的storefile，否则就读旧的。按这个方法，我们确保所有请求都能立即使用region server的block cache，因此消除了缓存未命中的影响。如figure6(b)显示，该方法的提升效果非常显著。</p><p>一个get请求只读一个row，但scan却跨多个row甚至多个storefile的block。因此scan请求会遇到以下三种情况。如果start的start和end row都在T以内，它将只读已经缓存的compacted的数据。如果scan的start row比T小，但end row比T大，它仍然读compacted的数据，虽然需要读的数据还没全部被缓存，但随着scan进行，compacted的数据也在并行地流入region server，因此scan会尽可能地读到缓存的数据，当要读的key超过当前的T，才会因为没命中缓存而降级。如果scan的start和end key都超过T，它将读当前的block，尽可能地命中缓存。如果T中途超越scan的key，将会驱逐要读的block，才会碰到缓存未命中。然而，因为scan读本地缓存的数据，比从远程缓存读数据要快，所以我们没有观察到这样的情况经常发生。事实上，我们在实验中看到的缓存未命中相对较少。<strong>实验中，在所有情况下，任何读请求要么完全由compacted数据提供，要么完全由当前数据提供</strong>。</p><p>作为最后的改进，我们<strong>warmup阶段做了限速</strong>。结果如图fiture6(c)所示。这实质上意味着 T 的前进速度比没有限速时慢，因此，warmup阶段持续时间更长了。但是，结果是，此阶段的性能开销几乎被消除了。它降低了数据传输的 CPU 成本，并减少了由于当前的block被新数据覆盖过快而导致缓存未命中的可能性。因此，我们看到compact和warmup阶段几乎没有留下任何明显的影响。</p><p><img loading="lazy" src="/assets/images/figure7-7688b51da86895a958615a537712adc7.png" width="1418" height="862" class="img_ev3q"></p><p>我们的 YCSB 测试总结在figure 7 中。对于每种方法，我们分别显示了压缩和warmup阶段读取延迟的下降，用compact开始前的平均延迟作为基线来比较。重要的改进以绿色突出显示。我们可以看到，使用我们最好的方法，限流incremental warmup（TIW），get的性能下降到只有7%/9%（compacted/warmup），而scan的性能下降到只有20%/4%。compact阶段的持续时间也大大缩短。虽然warmup阶段比简单的远程缓存 （RC） 长，但 TIW 显著优越的性能弥补了这一点!</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="55-tpc-c">5.5 TPC-C<a href="#55-tpc-c" class="hash-link" aria-label="5.5 TPC-C的直接链接" title="5.5 TPC-C的直接链接">​</a></h3><p><img loading="lazy" src="/assets/images/figure8-1d0ef4f7e46082367d6403224153ae95.png" width="2241" height="735" class="img_ev3q"></p><p>又在TPC-C的benchmark上做了性能测试，同样平均响应时间降低很大。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6-scalability">6. SCALABILITY<a href="#6-scalability" class="hash-link" aria-label="6. SCALABILITY的直接链接" title="6. SCALABILITY的直接链接">​</a></h2><p>通过使用compaction manager来监督所有compaction sever上compaction的执行，我们可以像扩展region server一样扩展compaction server。事实上，由于 HBase 将其数据分成region，因此我们可以方便地使用相同的分区方案来实现我们的目的。因此，我们的分布式设计继承了HBase的弹性和负载分布特性。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="61-elasticity">6.1 Elasticity<a href="#61-elasticity" class="hash-link" aria-label="6.1 Elasticity的直接链接" title="6.1 Elasticity的直接链接">​</a></h3><p>对于随时间波动的应用workload，HBase提供了按需增删region server的能力。同样，compaction manager可以同时管理多个compaction server。它同样基于Zookeeper管理region与compaction server之间映射的元信息。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="62-load-distribution">6.2 Load Distribution<a href="#62-load-distribution" class="hash-link" aria-label="6.2 Load Distribution的直接链接" title="6.2 Load Distribution的直接链接">​</a></h3><p>随着数据集的增长，HBase会创建新的region并分布到region server上。我们的compaction manager能自动探测这些新region并且分配到可用的compaction server上。我们继承了HBase的模块化设计，允许我们根据需要使用自定义的负载均衡算法。我们当前使用的是一个简单的round-bobin策略。我们可以设想更复杂的算法，根据compaction server当前 CPU 和内存负载动态平衡region。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="63-compaction-scheduling">6.3 Compaction Scheduling<a href="#63-compaction-scheduling" class="hash-link" aria-label="6.3 Compaction Scheduling的直接链接" title="6.3 Compaction Scheduling的直接链接">​</a></h3><p>调度compaction是个有意思的问题。当前，我们让region server调度它自己的compaction。然而，我们的设计是让compaction manager基于compaction server的动态全局视角来执行compaction调度。</p><p>一个重要的参数是一个compaction server当前可以执行多少compaction。因为我们用compaction server的主内存做远程缓存，所以当前正在compact的数据量总和不能超过它的内存。该限制的粗略估计可以计算如下。</p><p>给一个compaction server读且compact的预估速率c (in bytes/s)，一个region server通过网络将compact后的数据取回的速率w (in bytes/s)，处理b (in bytes)大小的数据，可以计算出时间 D (in seconds)： D(b) = b/c + b/w。然而，一个有m bytes主内存的compaction server可以同时处理l个平均大小为b的compaction， l = ⌊m/b⌋。因此，平均一个region t seconds有b bytes的数据需要compact，那一个compaction server最多可以负担的region数是h = t/D(b) ∗ ⌊m/b⌋。因此给定一个工作负载：每个region每t seconds触发T次compaction，我们就可以给每个compaction server分配⌊h/T ⌋ 个regions 。我们对于R个region的数据集，就需要给出 C = ⌈R/ ⌊h/T ⌋⌉ 个compaction server。例如对于以下的参数，c=20MB/s,w=8MB/s,m=6GB,b=4GB, T=1/hour,and R=10regions，得出需要C=2 个compaction servers。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="64-performance-evaluation">6.4 Performance Evaluation<a href="#64-performance-evaluation" class="hash-link" aria-label="6.4 Performance Evaluation的直接链接" title="6.4 Performance Evaluation的直接链接">​</a></h3><p>我们将5台region server增加到10台，使用YCSB来测试方案的扩展性。5个region server节点的部署，5个region，1000万row数据，配1台compaction server。启动两个client，分别有40读线程2写线程。10个region server的部署配置2倍的负载：2000万row数据，10个region，4个client。起初只配置一台compaction server，使其过载。接下来，我们使用两个compaction server运行了相同的实验，以展示我们的架构有效地在两个server之间分配负载的能力。实验运行了四个小时；在此期间触发了多个major compaction。</p><p><img loading="lazy" src="/assets/images/figure9-bbc11a0018db3023118ad3e4b9df4a09.png" width="2057" height="1398" class="img_ev3q"></p><p>Figures 9(a) 和 9(d) 展示了实验结果。Figures 9(a) 展示标准模式部署，没有compaction server，5台region server情况下的平均响应时间，可以看到有明显的延迟尖刺。Figures 9(d) 展示的是5台region server配1台compaction server，可以处理由5台region server触发的compaction，消除标准模式下的延迟尖刺。Figure 9(c) 中，10个region server配1个compaction server，在这个case中compaction server已经过载。1个compaction server有6G主内存，只能同时处理1个region 4G的数据，无法并行执行多个compaction。因此compaction执行推迟，region server的读性能越来越差，因为store file被创建的越来越多，block cache空间不足。最后，我们可以在Figure 9(d)中观察到，使用两个compaction server，我们可以轻松处理10个region server的compaction负载，并且响应时间在整个执行过程中保持平稳。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7-fault-tolerance">7. FAULT-TOLERANCE<a href="#7-fault-tolerance" class="hash-link" aria-label="7. FAULT-TOLERANCE的直接链接" title="7. FAULT-TOLERANCE的直接链接">​</a></h2><p>我们的方法为卸载compaction提供了高效的解决方案，即使某些组件异常，也能确保其正确执行。本节讨论了几个重要的故障情况，并讨论了我们解决方案的容错性。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="71-compaction-server-failure">7.1 Compaction Server Failure<a href="#71-compaction-server-failure" class="hash-link" aria-label="7.1 Compaction Server Failure的直接链接" title="7.1 Compaction Server Failure的直接链接">​</a></h3><p>当compaction manager探测到一个compaction server失败后，会重新分配它的region给其他可用的compaction server。一个compaction server失败的时候会处于这三种状态之一：空闲，正在compact一些region，正在传送数据回region server。如果正在执行一个compaction，它的失败会导致region server收到一个远程异常，然后终止compaction。注意不会有有数据丢失，因为compaction server写的是临时文件，region server也不会去读未compact完的文件。region server会重试这个compaction，分配给其他compaction server。如果没有compaction server可用，region server会自己执行compaction。</p><p>如果compaction server失败的时候正在传输compact后的文件回region server，region server也会收到远程异常。在incremental warmup的情况下，有些请求可能已经读到了部分传输过来的数据。因此region server最终去HDFS上去读compact后的store file。因为compaction server在传输数据前已经写完了store file。然而因为剩余的数据需要从HDFS上读取，在预热阶段的剩余时间内，读性能可能会下降。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="72-compaction-manager-failure">7.2 Compaction Manager Failure<a href="#72-compaction-manager-failure" class="hash-link" aria-label="7.2 Compaction Manager Failure的直接链接" title="7.2 Compaction Manager Failure的直接链接">​</a></h3><p>在我们当前的实现中，为了卸载compaction，region server必须通过compaction manager才能转发compaction server。因此，compaction manager在我们的部署中会出现单点故障。但是，这只是一个实现问题。由于我们使用 ZooKeeper 来维护compaction server的region分配，因此我们的设计为region server提供了一种直接与compaction server通信的可靠方法。</p><p>与HBase Master一样，如果compaction manager失败，将不能增删compaction server，因此需要尽快重新启动。但是，正在进行的compaction不受影响，因为region server和compaction server一旦连接就直接通信。</p><blockquote><p>用ZK分配region的实现应该是参考老版HBase的实现，现在都是ProcedureV2了。</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="73-region-server-failure">7.3 Region Server Failure<a href="#73-region-server-failure" class="hash-link" aria-label="7.3 Region Server Failure的直接链接" title="7.3 Region Server Failure的直接链接">​</a></h3><p>如果一个region server在等待compaction返回的过程中宕机，compaction server会根据超时发现连接断开，然后中断compaction。Master会重新分配受影响的region到其他region server，然后重新发起compaction请求。如果region server在incremental warmup阶段宕机，新的region server必须保证只会从HDFS加载新的compact后的store file，旧的store file要同时丢弃。尽管我们目前不处理此故障情况，但我们打算用一个简单的方法，在启动incremental warmup阶段之前修改文件名。这样，如果该region被另一个region server重新open，它可以检测该region的HDFS目录中的哪些文件由于被较新的compact文件取代而被丢弃。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="8--related-work">8.  RELATED WORK<a href="#8--related-work" class="hash-link" aria-label="8.  RELATED WORK的直接链接" title="8.  RELATED WORK的直接链接">​</a></h2><p>在过去十年中，可扩展KV存储以及提供更复杂的数据模型和事务一致性的更高级数据存储的数量增长非常迅速。部分数据存储服务为了满足高写入吞吐的需求，都依赖创建多value或多版本，而不是就地更新(in-place)。然而读性能就会受损。因此，compaction是这些数据存储服务的基本功能，有助于定期清理过期的版本，从而将读取性能保持在可接受的水平。</p><p>存在各种类型的compaction算法。为了使compaction更有效率，这些算法通常试图通过选择文件避免旧数据重复compact。例如，tiered compaction首先由Bigtable使用，也被Cassandra采用。该算法不是随机选择一组store file进行压缩，而是一次只选择固定数量（通常为4个）、大小大致相同的store file。这种机制的其中一个效果是越大的store file被compact的频率越低，以此降低整体的I/O吞吐。leveled compactions算法由Level DB使用，现在也被Cassandra实现了。此算法的目的是避免读请求要搜索多个store file的需要。该算法实现的方式比较简单，就是通过防止更新值最初就分散到多个store file中。leveled compactions的整体I/O负载显著高于标准压缩，但是压缩本身很小且快速，因此随着时间的推移，对运行时性能的干扰往往要小得多。另一方面，如果集群I/O负载已经很高，或者工作负载是更新密集型（例如时序），那么leveled compaction将变得无效。striped compaction是leveled compaction的一种变体，已经在HBase中进行了原型设计，作为其当前算法的改进。bLSM中实现了另一种变体，它提供了一种解决方案，通过动态平衡现有数据的compaction速率与传入更新的速率，将compaction成本完全摊销到工作负载中。在我们的方法中，我们将compaction方法本身视为黑盒。事实上，除了incremental warm-up方法之外，其他方法根本不关心store file的实际内容是什么。incremental warm-up方法需要按row排序，但也独立于压缩算法。</p><p>与 LSMT 一样执行定期数据维护操作的其他数据结构包括 R- trees和differential files 。与 LSMT 数据存储一样，更新最初写入某个短期存储层，随后通过定期合并操作整合到底层长期存储层中，从而弥合 OLTP 和 OLAP 功能之间的差距。SAP HANA 是属于此类别的主要内存数据库。HANA 中的合并是完全在内存中执行的资源密集型操作。因此，服务器必须有足够的内存来同时保存当前数据和压缩数据。原则上，我们的增量预热算法提供与完全内存中解决方案相同的性能优势，同时需要一半的内存。</p><p>计算卸载和智能缓存管理都是许多分布式系统中众所周知的技术。但是我们不知道任何其他方法可以考虑卸载压缩，以减轻查询处理服务器增加的 CPU 和内存负载。但是，分离需要处理相同数据的不同任务的概念在基于复制的方法中很普遍。例如，在使用主副本复制的方法中，更新事务仅在主副本上执行，而其他副本是只读的。例如，在Ganymed系统中，各种只读副本用于各种类型的只读查询，而主副本专用于更新事务。本着类似的精神，我们将compaction与事务处理分开，以最大程度地减少这两项任务的干扰。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="9-conclusions">9. CONCLUSIONS<a href="#9-conclusions" class="hash-link" aria-label="9. CONCLUSIONS的直接链接" title="9. CONCLUSIONS的直接链接">​</a></h2><p>在这篇论文中，我们为HBase中带来了一种新的compaction方法。我们的目的是为了降低compaction对更新密集型负载中对读性能的负面影响。我们提出把compaction从region server卸载到独立的compaction server上。这允许region server能充分利用机器资源去承担真实工作负载。我们也用compaction server做远程缓存，因为它已经将compact后的数据放在了主内存中。region server通过网络获取数据而不是磁盘。最后，我们提出了一种高效的incremental warmup算法，该算法从region server缓存中的当前数据平滑过渡到从远程缓存获取的compact数据。通过 YCSB 和 TPC-C，我们证明了最后一种方法能够消除所有与compaction相关的性能开销。最后，我们演示了我们的系统可以通过按需扩展compaction server。</p><p>对于未来的工作，我们希望使compaction manager更加了解region、region server和compaction server的负载均衡要求。</p>]]></content>
        <author>
            <name>Ddupg</name>
            <uri>https://ddupg.github.io</uri>
        </author>
        <category label="数据库" term="数据库"/>
        <category label="HBase" term="HBase"/>
        <category label="Compaction" term="Compaction"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[论文：Column-Stores vs. Row-Stores How Different Are They Really?]]></title>
        <id>https://ddupg.github.io/blog/2022-10-21-column-stores-vs-row-stores</id>
        <link href="https://ddupg.github.io/blog/2022-10-21-column-stores-vs-row-stores"/>
        <updated>2022-10-21T06:32:10.791Z</updated>
        <summary type="html"><![CDATA[Column-Stores vs. Row-Stores How Different Are They Really?]]></summary>
        <content type="html"><![CDATA[<p>论文分享：Column-Stores vs. Row-Stores: How Different Are They Really?</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="abstract">ABSTRACT<a href="#abstract" class="hash-link" aria-label="ABSTRACT的直接链接" title="ABSTRACT的直接链接">​</a></h2><p>面向列设计的数据库系统已经被证明，在一些 data warehouse 场景下，比传统的行存数据库的性能要高一个数量级。原因很简单：<strong>列存对只读查询的I/O效率更高，因为它们</strong>只<strong>从磁盘或内存中读</strong>所需<strong>的那些属性</strong>。</p><p><strong>这种简单的认识导致了这样的假设，用行存也能获得列存的性能提升</strong>：通过垂直划分schema，或者通过索引每一列以便可以独立访问列。<strong>这篇论文就是为了证明这个假设是错的</strong>。</p><p>我们将各种不同配置下的商业行存与列存的性能进行了比较，结果表明，在数据仓库基准测试中，行存储的性能明显更慢。然后我们分析了两个系统的性能差异，结果显示在<strong><em>查询引擎层</em></strong>存在很大差异（除了存储层的明显差异）。我们分别梳理了这些不同，发现各种<strong>面向列的查询执行技术对性能的影响，包括向量化查询，压缩，和这篇论文中介绍的一种新的join算法</strong>。所以我们推断一个行存系统不可能获得列存的性能提升，要想充分获得列存的优势必须对存储层和查询引擎同时修改。</p><p>*<strong>*单单是存储层的不同不足以构成如此大的性能差异，更重要的是查询引擎层的优化。**</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-introduction">1. INTRODUCTION<a href="#1-introduction" class="hash-link" aria-label="1. INTRODUCTION的直接链接" title="1. INTRODUCTION的直接链接">​</a></h2><p>事实上，描述面向列的数据库系统的论文通常包括性能展示，显示与传统面向行的数据库相比有如此的优势。虽然这样的结果证明了列存的潜力，但留下了一个关键问题：这些性能提升是因为DBMS内部<strong>面向列</strong>的基本设计吗？在传统行存系统中，使用一种更面向列的设计，是否有可能也可以获得性能提升呢？</p><p>论文中尝试了几种优化：</p><ul><li><strong>垂直划分系统中的表</strong>，划分成一堆只有两列的表形成，以便只需要读取必要的列来响应查询。</li><li><strong>索引方案</strong>，创建一堆索引覆盖查询中的列，这样就有可能不用访问底层行存表直接响应请求了。</li><li>使用一堆<strong>物化视图</strong>，视图中恰好包含基准测试中查询所需的列。尽管这种方法使用了大量空间，但它是行存的“最佳情况”，并且提供了与列存实现的有用比较点。</li></ul><p>我们将这些不同技术的性能和SSBM上开源的列存数据库的基准性能进行比较，结果显示，<strong>尽管以上的方法能在行存中模仿列存的物理结构，它们的查询处理性能依然很差</strong>。因此，<strong>列存系统一定存在一些基础的设计让它们更适合用来做数据仓库</strong>。然后引出了第二个问题：<strong>在数据仓库的workload上，许多列存数据库特定优化中的哪一个最重要，对性能提升最大？</strong></p><p>先前的研究表明，面向列的DBMS的重要优化有：</p><ul><li><strong>延迟物化（Late materialization）</strong>，在一个查询计划里，将从磁盘里读出来的列数据，尽可能晚的转成行。</li><li><strong>块迭代（block iteration）</strong>，一列中的多个值作为一个块从一个运算符传递到下一个运算符。如果value是固定长度的，就可以当作数组来迭代。</li><li><strong>面向列的压缩技术</strong>，像run-length encoding，当使用了延迟实现时，在压缩的数据上直接进行操作。</li><li>我们也提供了一种新的优化，加<strong>invisible joins</strong>，能提升late-materialization的列存上的join性能。</li></ul><p>然而，因为这些技术每一项都是在单独的论文中描述的，没有工作分析哪项技术是最重要的。因此，这项研究的第三个贡献是：<strong>通过在列存数据库里一个一个的去掉列存的优化技术，小心测试不同技术，分解导致它性能好的各项因素。我们发现，压缩可以有效降低数据量，但对其他方面受益不大，late materialization能有3倍的全面性能提升。其他优化——包括block iteration和我们新的invisible join技术，平均提供大约 1.5 倍的性能提升。</strong></p><p>总结下，这篇论文做了3项贡献：</p><ol><li>我们表明，在<strong>行存系统中使用列存设计不会产生良好的性能结果</strong>，并且通常被视为对仓库性能“良好”的各种技术（查询计划全部使用索引、位图索引等）也没什么作用。</li><li>我们提供了一个新的技术来提升列存性能，叫<strong>invisible joins</strong>。我们通过实验证明，在许多情况下，在维表查询上效果不错。</li><li>我们分解了列存性能的几个来源，<strong>探索late materialization, compression, block iteration,和invisible joins对整体性能提升的贡献</strong>。我们的结果证明，<strong>没有压缩和延迟物化，简单的面相列的操作，并没有明显比优化较好的行存的设计好</strong>。</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-background-and-prior-work背景和之前的工作">4. BACKGROUND AND PRIOR WORK（背景和之前的工作）<a href="#4-background-and-prior-work背景和之前的工作" class="hash-link" aria-label="4. BACKGROUND AND PRIOR WORK（背景和之前的工作）的直接链接" title="4. BACKGROUND AND PRIOR WORK（背景和之前的工作）的直接链接">​</a></h2><p>在这一部分，简要介绍了列存储相对于传统行存储在性能方面的工作。总结就是，前人虽然有了一些想法或探索，但都成果有限。</p><p>虽然<strong>对数据表进行垂直分区</strong>来提高性能的想法已经存在很长时间了，MonetDB 和 MonetDB/X100 系统开创了现代面向列的数据库系统和向量化查询执行的设计。他们表明，面向列的设计——由于卓越的 CPU和缓存性能（除了减少 I/O）——可以在 TPC-H 等基准测试中明显优于商业和开源数据库。然而，MonetDB 的工作并没有尝试在行存系统中使用面向列的技术可能获得什么样的性能。</p><p>The fractured mirrors approach 是另一种最近的列存储系统，其中提出了<strong>混合行/列</strong>方法。 在这里，<strong>行存主要处理更新，列存主要处理读取</strong>，后台进程将数据从行存储迁移到列存储。这项工作还探讨了行存储 (Shore) 中完全垂直分区策略的几种形式，得出的结论是，原生scheme方案中的元组开销是一个重大问题，并且从磁盘预取元组的大数据块，能显著提升元组创建时间。</p><p>C-Store是最近的一个面向列的DBMS。它包含了很多和MonetDB/X100相同的特性，还有在压缩数据上直接进行操作的优化。和其他俩个系统一样，它也证明了在AP场景列存明显优于行存，但没有探索行存物理设计的设计空间。在本文中，我们剖析了 C-Store 的性能，并指出了文献中提出的各种优化对其整体性能做出的贡献，还有一些C-Store小组之前没有完成的工作。</p><p>Harizopoulos等人比较了从头开始构建的行存和列存的性能，研究了从磁盘扫描数据并立即构建元组（early materialization）的简单计划。这项工作表明，在简单的执行计划中，列存储的性能优于行存储，与它们从磁盘读取的列的比例成比例，但并未专门研究用于提高行存性能的优化，也没有研究某些提高列存储性能的先进技术。</p><p>Halverson 等人在 Shore 建立了一个列存实现，并将行存版本Shore与垂直分区版本的Shore进行了比较。他们的工作提出了一个优化，称为"超级元组"，避免重复的头信息，并将许多元组分在一个块中，这可以减少scheme完全垂直分区方案的开销，并且，对于本文中包含的基准，可以垂直制作分区数据库与列存储竞争。但是，那篇论文没有探讨最近许多面向列的性能优化。尽管如此，"超级元组"是本文需要添加到行存以模拟列存储性能的更高级优化。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-star-schema-benchmark介绍ssbm测试基准">3. STAR SCHEMA BENCHMARK（介绍SSBM测试基准）<a href="#3-star-schema-benchmark介绍ssbm测试基准" class="hash-link" aria-label="3. STAR SCHEMA BENCHMARK（介绍SSBM测试基准）的直接链接" title="3. STAR SCHEMA BENCHMARK（介绍SSBM测试基准）的直接链接">​</a></h2><p>在这篇论文，我们使用Star Schema Benchmark (SSBM)来比较C-Store和商业行存数据库的性能。</p><p>*<strong>*SSBM使用了存粹的星形模型**</strong>（数据仓库最佳的数据组织形式）。</p><p><strong>Scheme</strong>: 这个测试基准包含唯一一个事实表，按行排序（LINE-ORDER）的表，包含了TPC-H的LINEITEM和ORDERS表。这是一个包含订单信息的17列的表，由ORFERKEY和LINENUMBER属性组成的一个混合主键。LINEORDER 表中的其他属性包含CUSTOMER、PART、SUPPLIER和DATE表的外键引用，还有每个订单的属性，包括它的优先级、数量、价格和折扣。其他维表包含了它们各自的信息。Figure 1展示了这些表的scheme。</p><p>它有一个基本的"<strong>规模因子</strong>"，可用于缩放基准的大小。每个表的大小相对于此比例因子进行定义。本文使用的规模因子为10（产生具有 60,000,000 个元组的LINEORDER 表）。</p><p><img loading="lazy" src="/assets/images/figure1-e3c318075c1a50a01216c1a7ec7201fa.png" width="1612" height="1410" class="img_ev3q"></p><p><strong>Queries：</strong>SSBM包含4个种类共13个查询：</p><ol><li>第一种保护3个查询。查询对一维属性及LINEORDER表的DISCOUNT和QUANTITY有约束条件。查询衡量如果在给定年份过滤不同订单数量和各种折扣，会有多少收入（EXTENDEDPRICE和DISCOUNT的乘积）。3个查询的对LINEORDER表的选择率分别为1.9×10−2, 6.5×10−4, and 7.5×10−5。</li><li>第二种包含3个查询。查询在2个维属性上有约束，按产品类型和年份分组计算特定地区特定产品类型的收入。对LINEORDER表的选择率分别为8.0×10−3, 1.6×10−3, and 2.0×10−4。</li><li>第三种包含4个查询。在3个维属性上有约束。查询计算特定地区一段时间内的收入，按customer nation、supplier nation和年份分组。对LINEORDER表的选择率分别为3.4 × 10−2, 1.4 × 10−3, 5.5 × 10−5, and 7.6 × 10−7。</li><li>第四种包含3个查询。查询在3个维度列上有限制，query 1按year、nation和category分组计算利润（REVENUE - SUPPLYCOST），query 2、3按nation、category分组。对LINEORDER表的选择率分别为1.6×10−2, 4.5×10−3, and 9.1 × 10−5。</li></ol><p><strong>几类查询的区别就是有约束的维表数量不同，由少到多。每个分类中，有几个不同的查询，区别就是查询规模不同，数据的选择率不同，由多到少。</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-row-oriented-execution行存设计">4. ROW-ORIENTED EXECUTION（行存设计）<a href="#4-row-oriented-execution行存设计" class="hash-link" aria-label="4. ROW-ORIENTED EXECUTION（行存设计）的直接链接" title="4. ROW-ORIENTED EXECUTION（行存设计）的直接链接">​</a></h2><p>在这一节，我们要讨论几种可以在一个商业<strong>行存DBMS（System X）中使用的列存设计的技术</strong>。我们关注3个不同的设计：完全垂直分区设计、index only设计、物化试图设计。</p><p><strong>Vertical Partitioning：</strong>在行存中使用列存最直接的方法就是完全垂直分区。为逻辑表中的每一列都创建一个实体表，第i个表有两列，一列是逻辑表第i列的值，第二列是主键。主键列用于join同一行的不同属性。我们尝试在每个表的position列上添加聚集索引，这并没有提高性能——索引访问引起的额外 I/O 使它们比hash join慢。</p><p>垂直分区方案有两个问题。第一，它要求在每个实体表里都要存储position列，会浪费空间和带宽。第二：大多数的行存系统会在每一个元组存储一个较大的header信息，会进一步浪费空间。</p><p><strong>Index-only plans：</strong>第二个方法使用 <em>index-only plans</em>，逻辑表会按照标准的行存设计存储，然后每个表的每个列上都增加一个B+树的非聚集索引。尽管索引仍然显式存储主键，但它们不存储重复的列值，并且它们通常比垂直分区方法具有更低的元组开销，因为元组头没有存储在索引中。</p><p><strong>index-only方法有个问题是，回表操作慢</strong>。因此，一个优化是创建使用复合键做索引。比如，如果执行<code>SELECT AVG(salary) FROM emp WHERE age&gt;40</code>，就可以用(age,salary) 做<strong>复合索引。主要是为了避免回表操作造成性能损失</strong>。</p><p><strong>Materialized Views：</strong>第三个方法我们考虑使用物化视图。对workload中的每一种查询，创建完美的物化视图，视图中只包含查询所需要的列。但它需要提前知道workload的各种query，所以只在有限的情况下使用。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-column-oriented-execution列存设计">5. COLUMN-ORIENTED EXECUTION（列存设计）<a href="#5-column-oriented-execution列存设计" class="hash-link" aria-label="5. COLUMN-ORIENTED EXECUTION（列存设计）的直接链接" title="5. COLUMN-ORIENTED EXECUTION（列存设计）的直接链接">​</a></h2><p>现在我们已经介绍了我们面向行的设计，这一节，我们回顾下列存数据库中常用的3种性能优化，并且介绍invisible join。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="51-compression压缩">5.1 Compression（压缩）<a href="#51-compression压缩" class="hash-link" aria-label="5.1 Compression（压缩）的直接链接" title="5.1 Compression（压缩）的直接链接">​</a></h3><p><strong>使用针对列的压缩算法，并在压缩的数据格式上直接进行操作，已经证明可以将查询性能提高一个数据量级</strong>。直观地说，按列存储的数据比按行存错的数据更容易压缩。压缩算法在低信息熵的数据上表现更好。以包含客户信息（name, phone number, e-mail address, snail-mail address等）的数据库表为例。按列存储允许将所有的name存储在一起，将所有phone number存储在一起等。更进一步，如果在一列中的数据是有序的，就可以进行超级压缩（比如使用run-length编码对相同值进行压缩）。</p><p>但当然，上述观察只会立即影响压缩率。磁盘空间便宜，而且越来越便宜。然而<strong>压缩在降低磁盘空间的同时也提高了性能，因为数据被压缩之后，当数据从磁盘读到内存时，花费在I/O上的时间更少了。然而，不能一味的追求压缩率，还需要在压缩率和解压速度之间做取舍。事实上，压缩可以提高查询性能，而不仅仅是节省 I/O。如果可以在压缩数据上直接进行操作，就可以完全避免解压，进一步提升性能</strong>。例如像run-length编码。</p><p>先前的工作得出的结论是，行存压缩和列存压缩区别最大的情况是：列已经排序，并且有相同值连续重复。但对于我们在本文中使用的测试基准，我们不会以不同的排序顺序存储事实表的多个副本，因此事实表中只有 17 列中的一列可以排序（其他列进行二次排序），所以我们期望压缩不会有那么大的影响。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="52-late-materialization延迟物化">5.2 Late Materialization（延迟物化）<a href="#52-late-materialization延迟物化" class="hash-link" aria-label="5.2 Late Materialization（延迟物化）的直接链接" title="5.2 Late Materialization（延迟物化）的直接链接">​</a></h3><p><strong>在一个列存中，一个逻辑实体（比如一个人）的信息会被存储在多个位置，而行存中这些信息会被存储在表的一行里</strong>。但是，大多数查询访问来自特定实体的不止一个属性。此外，大多数数据库输出标准（例如 ODBC 和 JDBC）访问数据库的输出是实体，而不是列。<strong>因此，在大多数查询计划中的某个时刻，来自多个列的数据必须组合在一起，以“行”的形式组成有关实体信息</strong>。因此，这种类似join的元组物化（materialization）是列存储中极其常见的操作。</p><p>原生的列存储将数据逐列存储在磁盘（或内存中），仅读取（从磁盘或内存到 CPU）与特定查询相关的那些列，构造成元组，在这些行上执行普通的行存储运算符（像select, aggregate, and join）来处理数据。尽管在数据仓库workload上可能仍然优于行存，但这种在查询计划中early materialization，使面向列的数据库的大部分性能潜力没有实现。</p><p>较新的列存储（例如 X100、C-Store 以及较小程度上的 Sybase IQ）选择<strong>将数据按列的形式保留，直到查询计划进行的足够晚之后，直接对这些列进行操作</strong>。为此，<strong>通常需要构建中间的“position”列表以匹配已在不同列上执行的操作</strong>。以一个查询为例，它在两列上使用过滤，并查出第三个属性。在使用延迟物化的列存中，过滤分布应用于每个属性的列上，并生成一个position（列中的相对偏移）列表。这个position列表可以表示为简单数组、bit string或者一些范围集合。然后将这些position列表做相交运算生成一个新的position列表，<strong>如果是bitmap可以直接使用位与运算</strong>。然后用这个列表从第三列提取所需位置的值。</p><p>优势有4点：</p><ol><li>select和aggregate运算可能没必要构造某些元组，如果执行器等待最够长的时间，可能完全避免构造它。</li><li>如果数据被压缩，则必须与其他列组合之前进行解压。这就丢掉了直接操作压缩数据的优势。</li><li><strong>Cache的利用率提高</strong>，减少缓存不必要的数据。</li><li>下一小节描述的<strong>块迭代优化</strong>对定长属性的性能影响很大。因为数据以Column形式保存在一起，数据是定长的可能性更大。过早物化，数据以Row的形式表示，数据定长的概率就大大降低。（比如数据定长可以并行计算）。</li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="53-block-iteration块遍历">5.3 Block Iteration（块遍历）<a href="#53-block-iteration块遍历" class="hash-link" aria-label="5.3 Block Iteration（块遍历）的直接链接" title="5.3 Block Iteration（块遍历）的直接链接">​</a></h3><p>为了处理一系列元组，行存储首先遍历每个元组，然后需要通过元组表示接口从这些元组中提取所需的属性。在许多情况下，例如在 MySQL 中，这会导致一次元组处理，其中有 1-2 个函数调用从每个操作的元组中提取所需的数据。</p><p><strong>列存中，如果列中数据是等宽的，这些值可以像数组迭代一样来处理（计算数组中位置，指针取值）。按数组操作数据不仅可以优化元组开销，还可以并行执行。</strong></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="54-invisible-join">5.4 Invisible Join<a href="#54-invisible-join" class="hash-link" aria-label="5.4 Invisible Join的直接链接" title="5.4 Invisible Join的直接链接">​</a></h3><p>对数据仓库的查询，特别是对以星形建模的数据仓库的查询，通常是这样的结构：使用一个（或多个）维表上的过滤来限制事实表中的元组。 然后在事实表上执行一些聚合，通常按其他维表属性进行分组。因此，需要为每个选择谓词和每个聚合分组执行事实表和维度表之间的join。这是一个星形scheme查询的例子：</p><p><img loading="lazy" src="/assets/images/figure1-e3c318075c1a50a01216c1a7ec7201fa.png" width="1612" height="1410" class="img_ev3q"></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">SELECT c.nation, s.nation, d.year, sum(lo.revenue) as revenue  // 收益求sum</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FROM customer AS c, lineorder AS lo,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     supplier AS s, dwdate AS d</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">WHERE lo.custkey = c.custkey  // 事实表和3个维表的join条件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  AND lo.suppkey = s.suppkey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  AND lo.orderdate = d.datekey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  AND c.region = 'ASIA'  // Asia客户</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  AND s.region = 'ASIA'  // Asia供应商</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  AND d.year &gt;= 1992 and d.year &lt;= 1997 // 订单的时间在1992～1994年之间</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">GROUP BY c.nation, s.nation, d.year // 客户国家、供应商国和交易年份的分组</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ORDER BY d.year asc, revenue desc;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="传统方案">传统方案<a href="#传统方案" class="hash-link" aria-label="传统方案的直接链接" title="传统方案的直接链接">​</a></h4><p>传统方案是<strong>按谓词的选择性优劣顺序来一次join</strong>。</p><p>例如，如果<code>c.region = 'ASIA'</code>是选择性最好的谓词，那么lineorder和customer表上custkey的join就最先被执行，只剩下Asia用户的订单。执行这个join时，这些customer的nation就被添加到join后的用户订单表（中间表）了。再将结果表与supplier表的join，使用<code>s.region = 'ASIA'</code>谓词过滤。然后再同样的方法做year的谓词过滤。然后对这些join的结果进行分组和聚合，并将结果排序。</p><p><img loading="lazy" src="/assets/images/figure2-6840f3e6b7f5374ec650f0caf4feb677.png" width="1170" height="588" class="img_ev3q"></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="延迟物化方案">延迟物化方案<a href="#延迟物化方案" class="hash-link" aria-label="延迟物化方案的直接链接" title="延迟物化方案的直接链接">​</a></h4><p>传统计划的替代方案是<strong>延迟物化</strong>join技术。在这个例子中，<code>c.region = 'ASIA'</code>谓词执行时，customer表的主键也被提取，这些主键然后和事实表的外键列做join。<strong>join的结果是两个position集合，一个用于事实表，一个用于维表。</strong></p><p>通常，两个position列表中<strong>最多只有一个是有序的</strong>。然后c.nation列的值和事实表其他列的值一起被提取。然后在再其他表上执行类似的join。</p><p><img loading="lazy" src="/assets/images/figure3-72c1f4f31f0924c022befbaed56d9e14.png" width="1508" height="526" class="img_ev3q"></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="invisible-join方案">Invisible Join方案<a href="#invisible-join方案" class="hash-link" aria-label="Invisible Join方案的直接链接" title="Invisible Join方案的直接链接">​</a></h4><p>每种计划都有一些列缺点：</p><ol><li><strong>传统方案</strong>：过早构造元组（early materialication），丧失了延迟物化的好处。</li><li><strong>延迟物化</strong>：join时维表需要被无序提取，开销大。过早被提取的数据，可能最后发现是没有必要的。</li></ol><p>论文中引入了一种新技术，叫invisible join，可在面向列的数据库中，适用于<strong>星形表结构外键-主键join的情况</strong>。这是一种延迟物化join，但<strong>最小化了需要被无序提取的value数量</strong>，因此可以减轻上述两组缺点。它会重写事实表外键列的join谓词。像<em>between-predicate rewriting</em>的技术，在5.4.2节讨论。</p><p><strong>核心的想法</strong>：<strong>通过将join重写成应用于事实表上的谓词，这样就可以使用谓词的优化算法，而且也可以并行执行谓词，最后用bitmap合并结果。等到所有谓词都执行完再进行元组提取，这样无序提取的数量就是最少的。</strong></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="541-join-details"><em>5.4.1 Join Details</em><a href="#541-join-details" class="hash-link" aria-label="541-join-details的直接链接" title="541-join-details的直接链接">​</a></h4><p>invisible join分3个步骤执行join。</p><p><strong>第一阶段，每个维表都应用与之相关的谓词，提取维表主键的列表</strong>。这些主键用于构建一个hash表，用于判断一个特定的key value是否满足谓词（这个hash表应该很容易放进内存，因为维表通常很小并且hash表只包含主键）。Figure 2 表示在示例数据上执行上述第一阶段示例。</p><p>![<!-- -->[阅读/20221021-Column-Stores vs. Row-Stores How Different Are They Really?/figure4.png]<!-- -->]</p><p><strong>第二阶段，每个hash表用于提取事实表中记录的position</strong>。这是通过在事实表的外键列中找寻hash表中的值，然后创建满足谓词的外键值的position列表。然后，<strong>所有position列表做交集，生成事实表的position列表<code>P</code></strong> 。Figure 3是第二阶段的执行示例，注意position列表可能是一个明确的列表或者一个bitmap。</p><p><img loading="lazy" src="/assets/images/figure5-cbe7cad7f366a9b18347178fe2ed511b.png" width="644" height="674" class="img_ev3q"></p><p><strong>第三阶段，就是在事实表上使用position列表<code>P</code>组装最终返回的元组</strong>。使用P中的外键对维表进行取值，这里的外键可能有两种，一种是<strong>维表的position</strong>（常见情况，主键ID从1开始递增），另一种则是普通外键。如果是第一种情况，这意味着，可以使用position列表直接在所需的维表列中直接提取。</p><p><strong>整个查询的选择性决定了P的大小，P的大小决定了无序提取的数量</strong>。</p><p>Figure 4是第三阶段执行的例子。请注意，对于date表，主键列不是从 1 开始的有序连续列表，因此必须执行完整连接（而不是位置提取）。此外注意，由于这是一个外键-主键的连接，并且由于所有谓词都已执行，因此P中的每个position在每个维表中都只且仅对应一个值。这意味着从第三阶段开始，每个维表join的结果数量相同，因此每个连接可以单独完成，结果在查询计划中较晚组合。</p><p><img loading="lazy" src="/assets/images/figure6-940ff3a69b881a4445f3bdadb6b1d0a0.png" width="638" height="654" class="img_ev3q"></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="542-between-predicate-rewritingbetween谓词重写"><em>5.4.2 Between-Predicate Rewriting（between谓词重写）</em><a href="#542-between-predicate-rewritingbetween谓词重写" class="hash-link" aria-label="542-between-predicate-rewritingbetween谓词重写的直接链接" title="542-between-predicate-rewritingbetween谓词重写的直接链接">​</a></h4><p>正如目前所述，此算法只不过是另一种延迟物化的hash join的思维方式。尽管连接中的hash部分在事实表列上表示为谓词，但实际上，执行谓词的方式与执行（延迟物化）hash join的方式之间几乎没有区别。将join作为谓词表达的优势还体现在这种情况下：<strong>应用了谓词的维表的keys连续的情况</strong>。</p><p>前面讲到，维表与事实表join时，需要维护外键hash表来lookup查找事实表。如果<strong>维表外键表示连续的一段key，那就把事实表上的lookup重写为"between"的谓词</strong>。很明显，between谓词执行速度更快，因为可以直接判断，而无需任何查找。</p><p><img loading="lazy" src="/assets/images/figure7-a637997b80f0ba100c514b47f9543c15.png" width="713" height="448" class="img_ev3q"></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">SELECT sum(lo.revenue) as revenue FROM lineorder AS lo, dwdate AS d</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">WHERE lo.orderdate = d.datekey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  AND d.year = 2001</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SELECT sum(lo.revenue) as revenue FROM lineorder AS lo, dwdate AS d</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">WHERE lo.orderdate = d.datekey</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  AND d.yearmonth = '2001-01'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>事实上，数据仓库中的维表包含越来越细粒度的属性集。例如，SSBM的date表，有year列、yearmonth列，和一个完整的date列。这个表按year、yearmonth、date三个列排序，结果都是一样的。类似的例子还有地区表（国家、省、市、区）。</p><p>数据仓库的查询经常访问这些列，而且OLAP的查询中，经常会有对属性不同层级进行类似的查询（按年月日分别计算收入，按省市区分别统计之类的），所以，<strong>"between谓词重写"的使用频率可能超过最初预期，而且，通常会产生显著的性能提升</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6-experiments实验">6. EXPERIMENTS（实验）<a href="#6-experiments实验" class="hash-link" aria-label="6. EXPERIMENTS（实验）的直接链接" title="6. EXPERIMENTS（实验）的直接链接">​</a></h2><p>这一部分，比较行存系统和C-Store在SSBM基准测试中的表现。来回答以下4个问题：</p><ol><li>与C-Store的性能相比，在行存中使用的列存的几种尝试效果怎么样？</li><li>未经修改的行存有没有可能获得面向列的设计的优点？</li><li>几种优化方案（压缩、物化、块遍历），哪个是最重要的？</li><li>invisible join的性能怎么样？</li></ol><p>我们所有的实验都是在 2.8 GHz 单处理器上运行的，双核奔腾 （R） D 工作站与 3 GB 的 RAM 运行 RedHat Enterprise Linux 5。该机器有一个4块盘， I/O 吞吐量为 40 - 50 MB/秒/磁盘。报告中的数据是几次运行的平均值。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="61-motivation-for-experimental-setup">6.1 Motivation for Experimental Setup<a href="#61-motivation-for-experimental-setup" class="hash-link" aria-label="6.1 Motivation for Experimental Setup的直接链接" title="6.1 Motivation for Experimental Setup的直接链接">​</a></h3><p><img loading="lazy" src="/assets/images/figure8-e7894445f9c4b62281e4239e59c5ebed.png" width="1296" height="550" class="img_ev3q"></p><p>Figure 5 比较了C-Store和System-X 的性能。我们提醒读者不要过多地解读两个系统之间的绝对性能差异，除了影响这些性能的行与列的基本差异之外，这些系统的实现存在实质性的差异。</p><p><strong>RS表示行存系统，CS表示列存系统，MV表示使用了物化视图（只包含查询相关的列）</strong>。</p><p>CS(Row-MV)比较特殊，是在列存中模拟行存，即整个表只有一列，这一列中的值是整行数据组成的string。</p><p>通过这种方式进行实验，无需依靠跨系统比较，我们就可以得出一些关于列存性能优势的结论。例如，有趣的是，图 5 中指出，<strong>"CS"和"CS （Row MV）"之间有超过6倍的差异，尽管它们在同一系统上运行，并且都读取了回答每个查询所需的磁盘上最小列集。显然，列存储的性能优势不仅仅是从磁盘中读取较少数据的 I/O 优势</strong>。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="62-column-store-simulation-in-a-row-store在行存中模拟列存">6.2 Column-Store Simulation in a Row-Store（在行存中模拟列存）<a href="#62-column-store-simulation-in-a-row-store在行存中模拟列存" class="hash-link" aria-label="6.2 Column-Store Simulation in a Row-Store（在行存中模拟列存）的直接链接" title="6.2 Column-Store Simulation in a Row-Store（在行存中模拟列存）的直接链接">​</a></h3><p>对System X进行了5种实验：</p><ol><li>传统方式。可以使用bitmap和bloom filters。</li><li>传统方式（bitmap）。和传统方法类似，但偏向于使用bitmap。</li><li>垂直分区方法。</li><li>index-only方法。在每个列上都使用B+树的非聚集索引，然后直接从索引中取值来响应请求。</li><li>物化视图。只保留与请求相关的列。</li></ol><p><img loading="lazy" src="/assets/images/figure9-8c914b0deeeb34cff22cd55e417665c2.png" width="1315" height="698" class="img_ev3q"></p><p>Figure 6中可以看到，<strong>物化视图的优化效果最好</strong>。其次则是传统方案。</p><p>论文里分析了两个原因：</p><p><strong>Tuple overheads</strong>：元组额外的开销。在垂直分区的方案中，事实表占用的空间扩大了4倍，IO开销大。</p><p><strong>Column Joins</strong>：垂直分区后，不同列的值需要用主键合并到一起，这个过程是一次join，所以性能不好。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="63-column-store-performance列存性能">6.3 Column-Store Performance（列存性能）<a href="#63-column-store-performance列存性能" class="hash-link" aria-label="6.3 Column-Store Performance（列存性能）的直接链接" title="6.3 Column-Store Performance（列存性能）的直接链接">​</a></h3><p>这一节是为了解释列存为什么性能高，即对Figure 5中，CS(Row-MV)与CS两组实验的差异。</p><p>为了理解这组性能差异，我们在列存储中执行额外的体验，在此中，我们连续删除面向列的优化，直到列存开始模拟行存。在此过程中，我们了解了这些各种操作对查询性能的影响。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="631-tuple-overhead-and-join-costs列存可以避免元组开销和join开销">6.3.1 Tuple Overhead and Join Costs<em>（列存可以避免元组开销和join开销）</em><a href="#631-tuple-overhead-and-join-costs列存可以避免元组开销和join开销" class="hash-link" aria-label="631-tuple-overhead-and-join-costs列存可以避免元组开销和join开销的直接链接" title="631-tuple-overhead-and-join-costs列存可以避免元组开销和join开销的直接链接">​</a></h4><p>元组开销和Join开销是行存模拟列存中的两个性能损耗原因，但这在列存中并不存在。</p><p><strong>列存使用position来寻址数据，并不需要在每一列中维护主键等额外信息。同行的多列数据聚合也不需要join。</strong></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="632-breakdown-of-column-store-advantages拆解列存的优势">6.3.2 Breakdown of Column-Store Advantages（拆解列存的优势）<a href="#632-breakdown-of-column-store-advantages拆解列存的优势" class="hash-link" aria-label="6.3.2 Breakdown of Column-Store Advantages（拆解列存的优势）的直接链接" title="6.3.2 Breakdown of Column-Store Advantages（拆解列存的优势）的直接链接">​</a></h4><p>压缩、延迟物化、块遍历和invisible join都可以提升列存性能，我们通过在C-Store中一步步删掉这些优化，并测试性能。</p><ol><li>移除压缩很容易，只是一个flag参数。</li><li>移除invisible join也很容易，因为这是我们新加的一个算子。</li><li>移除延迟物化，就需要手动修改代码，在查询计划的开始位置就构造元组。</li><li>移除块迭代是最难的。C-Store中block的访问接口有两种：getNext和asArray。前者是迭代每个value，后者就是返回一个可以迭代一个数组的指针。所以使用前者代替后者。</li></ol><p><img loading="lazy" src="/assets/images/figure10-9f7d9aca7556d27a692708283a79694d.png" width="1313" height="709" class="img_ev3q"></p><p>参数解释：</p><table><thead><tr><th>优化项</th><th>大写</th><th>小写</th></tr></thead><tbody><tr><td>块遍历，block processing</td><td>T，元组迭代</td><td>t，块迭代</td></tr><tr><td>invisible join</td><td>I，enable</td><td>i，disable</td></tr><tr><td>压缩，compression</td><td>C，enable</td><td>c，disable</td></tr><tr><td>延迟物化，late materialization</td><td>L，enable</td><td>l，disable</td></tr></tbody></table><ul><li><strong>块处理的性能提升只有5%～50%</strong>。当压缩倍删掉之后，块处理的优势就没那么显著了。</li><li><strong>invisible join可以提高50%～70%</strong>。因为C-Store没有invisible join之前，用的是类似的延迟物化join，所以性能的差异主要是由于between谓词重写技术。在SSBM中，时间和地区两个维表都符合使用条件，而查询也都与这两个表相关，所以每个查询都会使用到between谓词重写技术。</li><li><strong>压缩可以提高2倍性能</strong>。但因为事实表不是按任意字段排序的，所以压缩的性能并没有发挥到极致。</li><li><strong>延迟物化能提高3倍性能</strong>。</li></ul><p>最重要的两个优化是压缩和延迟物化。</p><p>请注意，一旦删除所有这些优化，列存就像是行存了。简单对比下几组数据，Figure 7中Ticl（去除所有优化的列存）与Figure 5中RS与CS(Row-MV)相比，性能更差。<strong>说明没有优化的列存性能还不如行存。单单是存储层的不同不足以构成如此大的性能差异，更重要的是查询引擎层的优化。</strong></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="633-implications-of-join-performancejoin性能的影响">6.3.3 Implications of Join Performance（join性能的影响）<a href="#633-implications-of-join-performancejoin性能的影响" class="hash-link" aria-label="6.3.3 Implications of Join Performance（join性能的影响）的直接链接" title="6.3.3 Implications of Join Performance（join性能的影响）的直接链接">​</a></h4><p>研究中，发现join的性能影响很大。所以构造了一组没有维表只有事实表的测试，将维表中的数据，冗余的直接存储在事实表里。<strong>虽然存储冗余数据会增加空间占用，但我们觉得避免了join可以加速查询</strong>。</p><p>测试结果很意外。3个非维表化的版本与维表化的正常版本相比，性能居然更差。</p><p><img loading="lazy" src="/assets/images/figure11-ff9bd37384d150edcee203d2eca78281.png" width="1320" height="587" class="img_ev3q"></p><p>Base：基本版本，有维表的版本。</p><p>PJ：没有维表的版本，将维表数据都冗余地加到事实表中，只有一个事实表。</p><ul><li>第一组PJ测试，将nation这样的字符串字段，完整的保存到了事实表中，所以很多谓词优化都没法用。性能相较于Base组，差了4倍。</li><li>第二组PJ测试，<strong>将nation这样的字符串字段进行字典编码成int字段</strong>。这样性能就与Base组比较相近了，但在一些查询中还是比Base组差不少。原因有两个：</li></ul><ol><li>一些查询中有两个谓词作用于同一个维表的情况，在Base组中，invisible join可以优化两个维表谓词变成一个事实表谓词，而PJ组只能对事实表做两次谓词查询。</li><li>一些查询中有这样的情况：对维表的一列做谓词，对同一维表的另一列做group-by。这就需要对同一表访问两次。而C-Store的执行过程中，会将外键列缓存起来用于二次访问。而PJ的测试中，谓词列和group-by列，就只能分别访问两遍，造成两倍的IO。</li></ol><ul><li>第三组PJ测试，最大化压缩，比第二组的int压缩还小。在这组测试中，非维表化的性能才比Base要好一些。</li></ul><p>这些测试结果很有意思。<strong>长期以来，非维表化一直被当作提高查询性能的技术，增加冗余数据减少join次数来提高查询性能。本以为这种权衡（冗余和join）在列存中会更有优势，因为冗余并不算什么大问题。而测试结果却刚好相反：非维表化在列存（至少是星形scheme模型）中，不是很有用。事实上，只有当事实表中包含的维表属性被排序或者高度可压缩时，非维表化才有用</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7-conclusion">7. CONCLUSION<a href="#7-conclusion" class="hash-link" aria-label="7. CONCLUSION的直接链接" title="7. CONCLUSION的直接链接">​</a></h2><p>本文基于<strong>SSBM基准</strong>上C-Store的性能与行存系统的几个变体进行了比较。结果表明，试图通过垂直分区和仅索引计划等技术，<strong>在行存中模拟列存的物理布局，但效果并不好</strong>。我们解释了列存能够如此有效地处理以面向列的数据的原因，<strong>发现延迟物化（late materialization）将性能提高了3倍，压缩平均提供大约 2 倍</strong>。我们还支持一种新的连接技术，称为<strong>invisible join，进一步提高性能约50%</strong>。</p><p><img loading="lazy" src="/assets/images/figure12-5cc11ef97f29d222848de7a0a6222bc1.png" width="810" height="618" class="img_ev3q"></p><p>这个工作并不是说在行存中模拟列存是不可能的，而是，在如今的行存系统中这么做表现并不好。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="参考">参考<a href="#参考" class="hash-link" aria-label="参考的直接链接" title="参考的直接链接">​</a></h2><ul><li><a href="http://www.cs.umd.edu/~abadi/papers/abadi-sigmod08.pdf" target="_blank" rel="noopener noreferrer">原论文</a></li><li><a href="https://zhuanlan.zhihu.com/p/54433448" target="_blank" rel="noopener noreferrer">《Column-Stores vs. Row-Stores》读后感</a></li></ul>]]></content>
        <author>
            <name>Ddupg</name>
            <uri>https://ddupg.github.io</uri>
        </author>
        <category label="数据库" term="数据库"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[DynamoDB 2022 paper内部分享]]></title>
        <id>https://ddupg.github.io/blog/20220921-dynamodb-2022-paper</id>
        <link href="https://ddupg.github.io/blog/20220921-dynamodb-2022-paper"/>
        <updated>2022-09-21T06:32:10.791Z</updated>
        <summary type="html"><![CDATA[DynamoDB 2022 paper内部分享]]></summary>
        <content type="html"><![CDATA[<p>最近AWS发布了DynamoDB新论文，不是涉及细节的学术论文，而是介绍了公有云在工业生产实践上的设计与实践。值得思考和学习。</p><p>这是在内部分享使用的，基本是论文翻译了。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="abstract">Abstract<a href="#abstract" class="hash-link" aria-label="Abstract的直接链接" title="Abstract的直接链接">​</a></h2><p>DynamoDB是一个NoSQL云数据库，在任何规模下提供一致的性能体验。基本属性：一致的性能，可用性，可靠性，全托管的serverless体验。在2021年，66-hour Amazon Prime Day shooping enent（购物节），Amazon的系统对DynamoDB的调用峰值8900万/秒，高可用性和毫秒级的性能。自从2012年DynamoDB发布，它的设计和实现不断发展。该系统在不影响可用性和性能的情况下，成功解决了<strong>公平问题（多租户？）、跨partition流量不均衡问题、监控、自动化运维</strong>。可靠性（可用性）至关重要，因为即使是最轻微的中断也会对客户产生重大影响。本文介绍了我们大规模操作 DynamoDB 的经验，以及架构如何继续发展以满足客户工作负载不断增长的需求。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-introduction">1. Introduction<a href="#1-introduction" class="hash-link" aria-label="1. Introduction的直接链接" title="1. Introduction的直接链接">​</a></h2><p>DynamoDB是一个NoSQL云数据库服务，在任何规模下，提供高且可预测的性能。DynamoDB是AWS的一个基础服务，全球多机房部署，有成百上千的用户。
支撑了内部大量服务，很多服务以DynamoDB为基础做的，还有很多客户应用。
<img loading="lazy" src="/assets/images/figure1-c608ecb2279c412a64dab331446a5b20.png" width="2238" height="554" class="img_ev3q"></p><p>DynamoDB 6个基本属性</p><ul><li>全托管的云服务。像SaaS，serverless能力。</li><li>多租户架构。同一批物理机器（集群）上，服务不同的用户。</li><li>实现了表的无限扩展</li><li>提供可预测的性能。保证对于1KB的Get、Put请求，延迟稳定在几个毫秒级别。无论表大小。通过水平扩展应对任何级别的流量，能对数据自动分区/重分区来满足IO的性能要求。</li><li>高可用。数据副本跨多AZ，在磁盘或节点故障时自动重新复制副本。普通表单AZ SLA 99.99%，global table多AZ SLA 99.999%</li><li>提供灵活的用户案例。<ul><li>有多种数据模型：<strong>表模型，文档模型</strong>。</li><li>读请求可以选择<strong>强一致或最终一致</strong>。</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-history">2. History<a href="#2-history" class="hash-link" aria-label="2. History的直接链接" title="2. History的直接链接">​</a></h2><p>DynamoDB的前身——Dyname，只是个KV数据库。</p><p>用户直接去访问传统数据库，引入一系列问题，例如连接管理、不同workload并发进行互相干扰，和一些操作问题（像schema升级）。所以，service-oriented的架构被采用，用service-level APIs封装用户数据。</p><blockquote><p>这就挺像我们现在的阶段。</p></blockquote><p><strong>Dynamo设计的第一原则：高可用性和可预测的性能。</strong></p><p>最初Amazon内部只有Dynamo可选，Dynamo是单租户的设计，用户都是自己托管，自行安装、运维、升级。这要求用户都得是数据库方面的专家。</p><p>这段时间内，Amazon内部出现了SimpleDB和S3这样的全托管、弹性（自动扩缩容或按需计费这样的概念）服务。用户都更倾向于用这些全托管的弹性服务，即使Dynamo比那些服务更好，也不用Dynamo。因为用户能更专注于他们的业务，而不用运维数据库。</p><p>Amazon第一个database-as-a-service是SimpleDB，全托管的弹性NoSQL数据库服务。多数据中心同步、高可用、持久化、无需用户操作。</p><p>SimpleDB限制：</p><ul><li>单表数据量上限10G。单表吞吐也有上限。</li><li>读写延迟不可预判。意思是因为每个表属性都有索引，写操作要更新所有索引。</li></ul><p>这些要求用户需要做类似分表的方式来满足需求。</p><p>最后得出结论：更好的解决方案将原始 Dynamo 设计的最佳部分（弹性和可预测的高性能）与 SimpleDB 的最佳部分（云服务的易管理性、一致性以及比纯KV存储更丰富的基于表的数据模型）相结合。</p><p>然后2012年，AWS发布DynamoDB。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-architecture">3. Architecture<a href="#3-architecture" class="hash-link" aria-label="3. Architecture的直接链接" title="3. Architecture的直接链接">​</a></h2><p>DynamoDB的表是一个items集合，每个item有很多属性。</p><blockquote><p>表格模型</p></blockquote><p>每个item由主键区分。主键可以是一个partition key或一个partition key和一个sort key。partition key用作hash分区。</p><blockquote><p>可以看Pegasus的表模型，比Pegasus还更灵活。</p></blockquote><table><thead><tr><th>partition key</th><th>sort key (可选)</th><th>propertity a</th><th>propertity b</th><th>propertity c</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p><strong>支持二级索引</strong>。
<strong>支持跨items的ACID事务</strong>，且不会影响表的扩展性、可用性、性能。</p><p>DynamoDB表分成多个partition，每个partition持有不相交的一部分数据。每个partition都有跨AZ的多个副本，增强可用性。每个partition的多个副本形成一个replication group。replication group内使用Multi-Paxos来做选主和共识。任何副本都可以触发一轮选举，一旦选举成为leader，就可以不断刷新lease来维持leader身份。</p><p><strong>一个replication group里，只有leader可以响应写请求和强一致的读请求</strong>。leader收到写请求之后，会写一条write-ahead log记录，并发送给其他replica。一定数量的replica都持久化了这条写操作的write-ahead log，应用程序才会收到写成功的反馈。</p><p>group的leader通过一个lease机制来延续它的leader身份。如果其他replica探测到leader有问题（unhealthy or unavailable），就会发起一轮新的选举，它自己做新leader。直到老leader的lease过期之前，新leader不会处理写请求和强一致的读请求。</p><p>一个replication group包含多个storage replica，storage replica有write-ahead logs 和 B-tree，用B-tree存KV数据。
<img loading="lazy" src="/assets/images/figure2-ab5fe376daa8945241db36d434ebb55f.png" width="1320" height="704" class="img_ev3q">
为了提高可用性和可靠性，一个replication group里还可以包含多个log replica，log replica只有write-ahead logs没有B-tree，不存KV数据。log replica只做Paxos的acceptor。
<img loading="lazy" src="/assets/images/figure3-55304e71fab9460ac178c11913d6e109.png" width="1330" height="700" class="img_ev3q">
DynamoDB包含十数个微服务，几个核心的服务是：metadata service、request routing service、storage nodes、autoadmin service。
<img loading="lazy" src="/assets/images/figure4-f19a71d1d42741e25d065d06a1023720.png" width="1316" height="834" class="img_ev3q"></p><ul><li>metadata service：存储表、索引、replication group的路由信息，用表或索引的keys来查。</li><li>request routing service：负责授权、鉴权，和路由每个请求到相应的server。</li><li>storage service：负责存储用户数据，存储在一组存储节点上。每个存储节点都持有不同partition的replica。</li><li>autoadmin service：控制中枢。负责健康检查、表扩缩、执行控制平面的请求。持续监控所有partition的健康情况，替换不健康replica（慢、不可用、硬件故障）。也负责其他核心组件的健康检查，好像还能替换故障硬件。</li></ul><p>图 4 中未显示的其他 DynamoDB 服务支持功能，如<strong>时间点还原</strong>、按需备份、更新流（没有说是啥，猜测可能是CDC）、<strong>全局准入控制</strong>、<strong>全局表</strong>、全局二级索引和事务。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-journey-from-provisioned-to-on-demand">4. Journey from provisioned to on-demand<a href="#4-journey-from-provisioned-to-on-demand" class="hash-link" aria-label="4. Journey from provisioned to on-demand的直接链接" title="4. Journey from provisioned to on-demand的直接链接">​</a></h2><p>DynamoDB初期，引入partition这个核心概念来实现表在存储和吞吐两方面的动态扩缩。吞吐的计量用的是CU，读4KB记1RCU，写1KB记1WCU。</p><blockquote><p>和我们的计量方式一样，估计也是抄的。
写比读贵，可能是因为对B-tree来说，写代价更大，读反而小。对LSM-tree来说，写代价相对小。</p></blockquote><p>原来的系统将表分成多个partition，分布在多个存储节点上，并映射可用容量和性能到对应节点上。随着表容量或负载的增长，partition可能会进一步split或迁移到更合适的存储节点。partition的抽象被证明确实有价值，并继续成为DynamoDB的核心设计。<strong>然而早期版本将容量和性能的分配都耦合到了partition上，带来了挑战</strong>。</p><blockquote><p>partition的设计实现了容量和负载横向扩展。但也将容量和性能耦合在了partition上。</p></blockquote><p>DynamoDB使用准入控制，保障存储节点不会过载，避免同节点之上不同partiton互相影响，并且强硬限制用户请求的吞吐量。</p><blockquote><p>多租户互相影响。</p></blockquote><p>过去十年，DynamoDB的准入控制不断发展。每个存储节点根据本地存储的partition配额，独立执行准入控制。假设一个存储节点上，有来自多个表的partition，使用每个partition的吞吐配额来隔离工作负载。DynamoDB为每个partition设置最大可分配的吞吐量上限，并保证所有partition的最大吞吐量之和不超过单个存储节点的最大吞吐上限。存储节点的最大吞吐上限由硬件的物理性质决定。</p><blockquote><p>起初，需要给表配置流量配额，将配额均分给partition。
存储节点也有能承载的流量上限，根据partition配额，分配到合适的存储节点上。</p></blockquote><p>当全表的吞吐改变或partition被split成子partition，partition的吞吐配额会重新调整。直接举例说明：假设一个partition能承受的最高吞吐是1000WCUs，一个表建表时设置为吞吐3200WCUs，DynamoDB为其创建4个partition，每个partition有800WCUs的配额。如果表的吞吐增长到3600WCUs，那每个partition就增长到900WCUs。可如果表的吞吐增长到6000WCUs，4个partition就会split成8个partition（一个partition最高1000，超过了就得split），每个partition有750WCUs的吞吐配额。</p><p>表的吞吐均匀分布在所有partition上，是基于两个假设：</p><ul><li>用户会均匀访问表中的keys。</li><li>按数据量的切分和按性能的切分是等价的。</li></ul><blockquote><p>也就是没有热点，没有倾斜（数据/流量）。</p></blockquote><p>而实际发现应用的请求，在时间上（高低峰）和key range上（热点、倾斜）都是不均匀的。按照partition均分配额，就会出现partition被限流了，但表的整体吞吐配额还没达到。</p><p>两个问题：</p><ul><li>热点partition。</li><li>吞吐配额稀释。表的partition通常按数据量大小做切分，配额也基本按partition数量做均分，随着数据量增大，partition增多，配额逐渐被稀释。</li></ul><p>限流会导致用户应用程序周期性不可用，甚至造成不可预期的结果。用户就会去调大表的配额来规避限流。这就很难评估表的真正性能要求。</p><blockquote><p>两个问题都是我们实际中也碰到的。热点和限流。
论文中非常强调限流对客户的影响，极力在避免不正常限流的产生。
可能对于公有云来说，用户体验很重要。</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="41-initial-improvements-to-admission-control">4.1 Initial improvements to admission control<a href="#41-initial-improvements-to-admission-control" class="hash-link" aria-label="4.1 Initial improvements to admission control的直接链接" title="4.1 Initial improvements to admission control的直接链接">​</a></h3><p>热点和配额稀释两个问题，都来源于预置配额并把配额均分给每个partition。通过这种方式来规避分布式准入控制的复杂性。后来DynamoDB引入两个优化来解决这个问题：bursting和adaptive capacity</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="411-bursting超发">4.1.1 Bursting（超发）<a href="#411-bursting超发" class="hash-link" aria-label="4.1.1 Bursting（超发）的直接链接" title="4.1.1 Bursting（超发）的直接链接">​</a></h4><p>一个关键的发现：一个存储节点上，并不是所有partition都足量使用了预置的配额。因此DynamoDB引入了Bursting的概念来吸收不同workload在时间上的尖峰。Bursting背后的想法是，在partition级别上，尽力让应用程序使用未使用的配额，来满足<strong>短暂的流量尖峰</strong>。<strong>DynamoDB保存了一个partition最长300秒的未使用配额，在该partition流量超过预设值时使用</strong>。这个未使用的容量，叫做burst capacity。</p><p>DynamoDB仍然要保证workload的隔离，在存储节点级别上，只在有未使用的吞吐容量的情况下，才允许超发。在存储节点上，使用<strong>令牌桶</strong>（token bucket）来管理流量，每个partition有两个令牌桶，allocated和burst（理解为配额和超发）。每个存储节点也有一个令牌桶。</p><blockquote><p>超发的两个要素：</p><ol><li>使用前300s未使用的流量做超发，解决突发流量</li><li>超发的流量不能超过设置的节点流量上限</li></ol></blockquote><p><strong>这个方法只能解决突发流量，对于长期数据倾斜没用。</strong></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="412-adaptive-capacity自适应容量">4.1.2 Adaptive capacity（自适应容量）<a href="#412-adaptive-capacity自适应容量" class="hash-link" aria-label="4.1.2 Adaptive capacity（自适应容量）的直接链接" title="4.1.2 Adaptive capacity（自适应容量）的直接链接">​</a></h4><p>DynamoDB使用adaptive capacity来解决长周期的严重流量倾斜问题。adaptive capacity实时监控所有表的配额及消费的容量。<strong>如果一个partition碰到了限流，并且表级配额没有超发，就会扩大被限流partition的配额</strong>。autoadmin system会保证超发的partition所在存储节点可以承受住超发的流量（通过类似move partition去调整）。</p><p><img loading="lazy" src="/assets/images/adaptive_capacity-30e93a2f4adcb5885dae9b5051f70cac.png" width="2000" height="810" class="img_ev3q"></p><p>bursting和adaptive capacity解决了DynamoDB 99.99%的限流问题。</p><blockquote><p>缺点是必须触发限流，才会自动扩大capacity。用户会有感知。
我理解自动扩capacity的过程必然不能阻塞读写流程，应该是触发限流之后，异步去扩capacity。</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="42-global-admission-control">4.2 Global admission control<a href="#42-global-admission-control" class="hash-link" aria-label="4.2 Global admission control的直接链接" title="4.2 Global admission control的直接链接">​</a></h3><p>但以上两个方法仍有局限性。<strong>bursting只能短暂的解决突发流量；adaptive capacity必须要触发限流之后才能起作用，而触发限流就会影响用户</strong>。最重要的原因是这两个方法都将准入控制都强耦合在了partition级别。<strong>DynamoDB认识到将准入控制从partition级别移除，总是允许partition级别的超发，这才是更好的</strong>。</p><p>DynamoDB引入了全局准入控制global admission control(GAC)来取代掉adaptive capacity。GAC还是用令牌桶算法来记录所有表的流量使用情况。每个request router维护一个本地的令牌桶来做准入控制，并且定时和GAC通信补充本地令牌桶。</p><p>GAC server有多个，每个在内存里存储部分表的令牌桶，每个GAC server的上下线不能影响整体。多个GAC server组成hash ring。</p><blockquote><p>我理解这里就是一致性hash算法。</p></blockquote><p>每个请求到达request router之后，先消耗request router本地的令牌桶，request router再定时从GAC补充令牌桶。</p><p>partition级别的令牌桶还是保留了，说为了做深度防御。</p><blockquote><p>可能是为了避免突发热点吧。</p></blockquote><blockquote><p>总结一下，<strong>最终是独立出来了一个中心化的准入服务来做全局准入控制</strong>，才彻底地妥善解决流量倾斜与用户配额设置的矛盾问题。</p></blockquote><p><img loading="lazy" src="/assets/images/lindom_quota-9788103fa3dba4bb1b31a0547267b0af.png" width="1516" height="1288" class="img_ev3q"></p><blockquote><p>可以看下lindom的这个准入控制的图，思想是一样的。</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="43-balancing-consumed-capacity">4.3 Balancing consumed capacity<a href="#43-balancing-consumed-capacity" class="hash-link" aria-label="4.3 Balancing consumed capacity的直接链接" title="4.3 Balancing consumed capacity的直接链接">​</a></h3><p>总是允许partition超发就要求DynamoDB能有效的管理超发的流量。DynamoDB运行在不同型号的硬件上，不同硬件的吞吐和存储能力不同。最新代的存储节点能抗上千的partition replica。一个存储节点上的partition可能来自不同的表，完全不相关。在一个存储节点上托管来自多个表的partition，每个表又可能来自不同的客户，又不同的流量模式，这就需要一种分配方案，来决定哪些partition replica可以共存，且不会违反可用性、可预测的性能、安全性、弹性。</p><blockquote><p>也就是balance算法。</p></blockquote><p>如果没有bursting和adaptive capacity，为预设表的partition找到合适的存储节点很容易，根据存储节点的容量和吞吐分配就好了。</p><p>允许超发就会给多租户带来更复杂的挑战。DynamoDB实现了一个系统，根据吞吐量消耗和存储主动跨存储节点平衡partition。每个存储节点会独立监控它上面的replica的吞吐和数据量，一旦吞吐超过了节点最大吞吐量的百分比阙值，就会报告给autoadmin service一批要从当前节点挪走的replica。autoadmin会为这些replica找个新的存储节点，同时保证在选择的节点所在AZ没有该partition的其他replica。</p><blockquote><p>这个做法对我们意义也不大。这块可以看阿里云lindom的公众号，很有启发性。</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="44-splitting-for-consumption">4.4 Splitting for consumption<a href="#44-splitting-for-consumption" class="hash-link" aria-label="4.4 Splitting for consumption的直接链接" title="4.4 Splitting for consumption的直接链接">​</a></h3><p>即使有GAC和允许partition超发的能力，但如果表表流量严重倾斜到部分items（热点key或范围热点），还是可能被限流。为了解决这个问题，DynamoDB根据流量自动扩容partition。一旦partition的流量超过阙值，这个partition就会被split。<strong>split point的选择由partition key分布观测功能提供</strong>。key分布观测功能像一个agent一样，分析应用的访问模式。这样得到的split point比partition中间点更有效。partition split通常在几分钟内完成。</p><p>但仍然有些workload是split partition解决不了的，比如热点key和连续范围热点。DynamoDB可以探测这样的访问模式，避免去split这样的partition。</p><blockquote><p>论文里也没讲怎么探测热点key和范围热点。看下阿里云lindom的公众号吧，虽然也没给具体算法，但思路差不多。</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="45-on-demand-provisioning">4.5 On-demand provisioning<a href="#45-on-demand-provisioning" class="hash-link" aria-label="4.5 On-demand provisioning的直接链接" title="4.5 On-demand provisioning的直接链接">​</a></h3><p>很多应用在迁移到DynamoDB之前，是运行在本地或自托管的数据库的。在任何场景下，应用开发者都需要提供机器。DynamoDB提供了一种简单的serverless的运维模式和一个新的预估模型——读写CU。因为CU对消费者是新概念，准确的评估吞吐很难。客户要么过度配置导致利用率低，要么配置不足造成限流。为了改善有尖峰流量的workload的用户体验，我们发布了<strong>on-demand tables</strong>。on-demand表避免了用户设置预估流量。DynamoDB根据收集到的表的读写信号，<strong>为表预留之前尖峰两倍的资源</strong>。如果流量超过了先前尖峰的两倍，随着流量增加，DynamoDB会自动分配更多容量，以确保workload不会被限流。On-demand表也会通过split扩容partition。GAC会监控并且保护系统不会被一个应用消耗所有资源。根据消耗的容量做balance能有效的分配on-demand的partition，避免碰到存储节点级的限流。</p><blockquote><p>这种不太适合我们，或者说我们做不到。公有云的规模效应带来的好处。</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-durability-and-correctness">5 Durability and correctness<a href="#5-durability-and-correctness" class="hash-link" aria-label="5 Durability and correctness的直接链接" title="5 Durability and correctness的直接链接">​</a></h2><p>数据被提交后绝不能丢。在实践中，丢数据通常是因为硬件故障、软件bug或硬件bug。DynamoDB设计了很多机制来保障高可靠性（持久性），能避免、探测、纠正任何潜在的数据丢失。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="51-hardware-failures">5.1 Hardware failures<a href="#51-hardware-failures" class="hash-link" aria-label="5.1 Hardware failures的直接链接" title="5.1 Hardware failures的直接链接">​</a></h3><p>和大多数数据库系统一样，<strong>write-ahead logs是DynamoDB保障可靠性和故障恢复的核心</strong>。write-ahead logs在partition的3个replica中都存储了。为了更高的可靠性，也<strong>定期归档到S3</strong>（11个9的可靠性）。每个replica仍然保存了最近的未归档的write-ahead logs。未归档logs的大小通常只要几百MB。</p><p>在一个大型服务中，硬件故障，像内存和磁盘故障很常见。当一个节点故障，节点上的所有replication group中的partition就只剩2副本。恢复一个replica的过程需要几分钟，因为修复过程涉及了B-tree和write-ahead logs的拷贝。<strong>在探测到不健康的replica时，replication group的leader会增加一个log replica</strong>，确保不会影响可靠性。增加一个log replica只需要几秒，因为只需要拷贝最新的write-ahead log而不需要拷贝B-tree。所以，使用log replica快速修复能确保最新写入的数据的可靠性。</p><blockquote><p>核心是write-ahead logs。</p><ol><li>每个replica都会保存一份wal，可能不只3个</li><li>wal归档到S3，只有最新写入的几百MB数据未归档</li><li>丢replica后，秒级新加log replica，保障最新写入的数据可靠性。</li></ol></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="52-silent-data-errors">5.2 Silent data errors<a href="#52-silent-data-errors" class="hash-link" aria-label="5.2 Silent data errors的直接链接" title="5.2 Silent data errors的直接链接">​</a></h3><p>一些硬件故障会导致存储不正确的数据。在我们的经验中，可能由存储介质、CPU或内存导致。这种问题很难探测并且可能在系统的任何地方出现。DynamoDB使用checksum来探测这类错误（silent errors）。通过<strong>在每个log entry、消息和log文件里增加checksum</strong>，DynamoDB校验任意两个节点之间的传输的数据的完整性。这些checksum可以避免错误在系统中传播。例如，节点或组件之间的通信都会添加checksum，并且在信息传输过程中做校验。如果没有这些检查，在传输过程中的任何地方都可能引入silent error。</p><p>每个归档到S3的log都有个manifest文件，包含这个log相关的信息，像表、partition、log里存储数据的起止标记。负责归档log到S3的agent在上传log之前有多项校验。包括但不限于校验每个log entry是否属于正确的表、partition，校验checksum和探测silent error，校验log的sequence number是否含有hole（一般的wal实现，每个entry都会有个连续递增sequence id，应该是说检查这个id的连续性，避免丢entry）。只有所有的检查都通过，log和他的manifest才会归档。归档agent会在replication group的3个replica中都会运行，如果一个agent发现一个log已经归档了，这个agent会下载下来和本地log做比较，校验数据完整性。每个归档到S3的log文件和manifest文件都有一个内容的checksum。S3的put操作会检查这个内容checksum，保证存储到S3的过程中没有任何错误。</p><blockquote><p>硬件故障导致的数据错误叫做silent errors。 手段：</p><ol><li>每个数据传输的地方都加checksum校验</li><li>归档过程 <ol><li>每个log都有个manifest文件存储元信息 </li><li>归档前，校验log：entry的归属正确性、entry的checksum、sequence id连续性 等</li><li>3副本都会做归档</li><li>归档S3过程中，S3再做次checksum校验</li></ol></li></ol></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="53-continuous-verification">5.3 Continuous verification<a href="#53-continuous-verification" class="hash-link" aria-label="5.3 Continuous verification的直接链接" title="5.3 Continuous verification的直接链接">​</a></h3><p>DynamoDB也会在空闲时做持续的数据校验。我们的目标是探测系统中任何的silent data error或bit rot。scrub过程是持续校验的一个例子。scrub的目标是探测未知的错误。<strong>scrub过程校验两件事：相同replication group的3副本数据一致性，和使用归档的wal构造出的replica和live replica的数据一致性</strong>。scrub机制作为探测live replica和归档log构建的replica之间一致性的深度防御。这些全面的检查非常有利于增强对正在运行的系统的信心。<strong>类似的持续校验技术还被用于校验global table的replica</strong>。<strong>多年来，我们了解到，持续校验是防止硬件故障、silent error、软件bug的最可靠办法。</strong></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="54-software-bugs">5.4 Software bugs<a href="#54-software-bugs" class="hash-link" aria-label="5.4 Software bugs的直接链接" title="5.4 Software bugs的直接链接">​</a></h3><p>DynamoDB是一个分布式键值存储，建立在复杂的架构之上。高复杂度增加了设计、代码和操作中人为错误的可能性。系统中的错误可能导致数据丢失或损坏，或违反客户所依赖的其他接口协议。</p><p>我们使用formal methods来确保replication协议的正确性。核心的replication协议使用TLA+。当添加会影响replication协议的新feature时，他们将被合并到特定的模型中做检查。模型检查使我们能够在代码投入生产之前发现可能导致持久性和正确性的细微错误。S3等其他服务也发现模型检查在类似场景中很有用。</p><p>我们<strong>还采用了广泛的故障注入测试和压力测试来确保所部署的每一个软件的正确性</strong>。除了数据层面的测试和replication协议的校验之外，formal methods也被用于校验控制平面的正确性和分布式事务这样的features。</p><blockquote><p>上线前需要做类似大规模数据集的集成测试。
类似我们的ITBLL集成测试。</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="55-backups-and-restores">5.5 Backups and restores<a href="#55-backups-and-restores" class="hash-link" aria-label="5.5 Backups and restores的直接链接" title="5.5 Backups and restores的直接链接">​</a></h3><p>除了防止物理介质损坏之外，DynamoDB还支持<strong>备份和恢复</strong>，以防止用户应用程序中的错误导致的数据损坏。备份或恢复不会影响表的性能或可用性，因为是用归档在S3中的write-ahead log构建的。备份在多个partition之间是一致的，精确到秒。备份是DynamoDB表的完整拷贝，存储在S3的bucket中。备份中的数据可以随时恢复到新的DynamoDB表中。</p><p>DynamoDB也<strong>支持指定时间点的恢复</strong>。使用指定时间点恢复，用户可以恢复之前35天内任意时间点的内容。对于其定了时间点恢复的表，DynamoDB会定期创建该表partition的快照并上传S3。对分区做快照的周期取决于partition积累的write-ahead log的量。快照和write-ahead log一起用于时间点恢复。当请求一个表的时间点恢复时，DynamoDB识别表所有partition的距离请求的时间点最近的快照，然后回放指定时间点之后的log，创建这个表的快照，然后恢复它。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6-availability">6 Availability<a href="#6-availability" class="hash-link" aria-label="6 Availability的直接链接" title="6 Availability的直接链接">​</a></h2><p>为了实现高可用性，<strong>DynamoDB表在一个区域内的多个AZ中分布和复制</strong>。DynamoDB会定期测试对节点、机架、AZ故障的恢复能力。例如，为了测试整体服务的可用性和可靠性，执行<strong>断电测试</strong>。使用真实的模拟流量，用调度任务随机关闭节点。在所有断电测试结束时，测试工具验证存储在数据库中数据在逻辑上是有效的并且没有损坏。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="61-write-and-consistent-read-availability">6.1 Write and consistent read availability<a href="#61-write-and-consistent-read-availability" class="hash-link" aria-label="6.1 Write and consistent read availability的直接链接" title="6.1 Write and consistent read availability的直接链接">​</a></h3><p>一个partition的写可用性取决于有一个健康的leader和健康的quorum replica。对DynamoDB而言，健康的quorum replica就是，来自不同AZ的3副本中至少两副本。只要有足够多的健康的replica（leader和一个write quorum replica），那这个partition就是可用的。如果无法满足quorum的最小数量要求，那partition则变得写不可用。如果一个replica无法相应，leader会添加一个log replica到replication group里，添加一个log replica是确保write quorum最快的方法。这可以最大限度的减少由于write quorum不正常而对写入可用性造成的干扰。<strong>leader replica提供强一致的读</strong>。引入log replica对系统来说是巨大的变化，经过formal method验证过的Paxos实现给我们提供了信息，能安全地调整和试验来实现更高的可用性。我们已经能够在一个地区中，运行数百万个具有log replica的Paxos group了。<strong>任何replica都可以提供最终一致的读</strong>。如果leader replica不可用，其他repica会探测到并且选举一个新的leader，最小化对强一致性读的干扰。</p><blockquote><ol><li>只有leader replica能提供强一致的读。</li><li>任何replica都能提供最终一致的读。</li><li>普通副本故障后，会快速产生一个log replica</li><li>leader故障后，其他replica会探测到并选举出新leader。</li></ol></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="62-failure-detection">6.2 Failure detection<a href="#62-failure-detection" class="hash-link" aria-label="6.2 Failure detection的直接链接" title="6.2 Failure detection的直接链接">​</a></h3><p>新选举出来的leader要等老leader的lease过期才能相应请求。这个过程会花费几秒，在这期间新leader不能响应任何新的写请求和强一致的读请求，因此会影响可用性。高可用系统的核心组件之一是leader的故障检测。故障检测必须快和稳，最小化对可用性的干扰。故障检测中的误报可能导致更多的可用性受损。故障检测适用于group中的所有replica都与leader失联。然而，节点可能遇到gray network failures。由于leader和follower之间的通信问题，节点的出站入站通信问题，或者即使leader和follower通信正常，前端的router和leader之间的通信问题，都可能产生gray network failures。gray network failures可能会破坏可用性，因为故障检测中可能存在误报或检测不到故障。例如，一个没有接收到leader心跳replica会尝试选举成为新leader。前面讲过，这会影响可用性。为了解决由gray failures影响可用性问题，想要发起failover（选举）的follower要给group里的其他replica发送一条消息，询问是否能和leader通信。如果其他replica回复leader是健康的，这个follower就会放弃发起leader选举。DynamoDB在故障探测算法中的这个改变显著减少了误报的数量，从而减少了假leader选举的数量。</p><blockquote><p>leader选举过程要花费几秒，会影响可用性。 故障检测很重要，但如果有误报，反而也会影响可用性。 Gray network failures应该指部分节点网络故障这种情况。网络故障会导致故障检测误报的产生。 follower如果因为网络故障，错误判断leader状态，擅自发起选举，反而会影响可用性。所以加了优化：<strong>在发起选举之前，询问其他replica能否正常与leader通信，排除follower自身的问题</strong>。效果显著。</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="63-measuring-availability">6.3 Measuring availability<a href="#63-measuring-availability" class="hash-link" aria-label="6.3 Measuring availability的直接链接" title="6.3 Measuring availability的直接链接">​</a></h3><p><strong>DynamoDB的global table（全局表）有99.999%的可用性，地区表有99.99%的可用性</strong>。<strong>可用性计算方法是每5分钟内，成功请求的占比</strong>。为了实现这个目标，DynamoDB持续监控service和table级别的可用性。跟踪的可用性数据用于分析用户可感知的可用性趋势，如果用户可感知的错误超过一个阈值就触发报警。这些报警被叫做customer-facing alarm（CFA）。这些报警的目的是报告所有与可用性有关的问题，并自动或人为干预地解决问题。除了实时跟踪之外，系统会运行每日job，为每个用户聚合计算可用性指标。聚合结果上传到S3以定期分析可用性趋势。</p><p>DynamoDB还会观测用户侧可用性并且报警。有两套client用户观测用户感知的可用性。第一套client是使用DynamoDB做数据存储的内部Amazon服务。这些服务共享其观测到的DynamoDB API调用的可用性指标。第二套client是我们内部DynamoDB canary应用。这些应用运行在每个地区每个AZ，并且通过每个公共的endpoint和DynamoDB通信。真实的应用程序流量使我们能推断用户看到的DynamoDB可用性和延迟，并捕获Gray failures。它们很好的代表了客户可能经历的长期或短期趋势。</p><blockquote><p>作为服务侧，观测到的情况可能和用户侧有差异。所以得有服务侧视角和用户侧视角。</p><p>可用性观测有两套方案：</p><ol><li>系统内部观测，观测的应该是可能会影响用户的可用性问题。观测的数据也会被用于分析。</li><li>用户侧观测。系统内部观测不能完全说明用户问题。真正的用户侧可用性在用户应用程序里才能观测到，DynamoDB用了这两种办法来尽可能的观测用户侧可用性。<ol><li>使用DynamoDB的Amazon内部服务，将观测到的可用性数据共享出来。内部服务DynamoDB的用户，数据是有效的。 </li><li>canary应用，模拟用户请求，探测可用性。</li></ol></li></ol></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="64-deployments">6.4 Deployments<a href="#64-deployments" class="hash-link" aria-label="6.4 Deployments的直接链接" title="6.4 Deployments的直接链接">​</a></h3><p>与传统关系数据库不同，DynamoDB部署不需要维护窗口（变更窗口？），也不会影响客户的性能和可用性。软件部署有很多原因，包括新feature，bug fixes，和性能优化。部署通常涉及更新大量服务。DynamoDB定期推送软件更新。部署将软件从一种状态带到另一种状态。新部署的软件经历了完整的开发和测试周期，建立对代码正确性的信心。多年来，经过多次部署，DynamoDB了解到，重要的不仅仅是结束状态和开始状态，有时新部署的软件可能无法运行，需要回滚。回滚状态可能与初始状态不一样。回滚过程在测试中经常被遗漏，并可能影响客户。<strong>DynamoDB在每次部署之前，在组件级别运行一套升级和降级测试。然后故意回滚软件，并进行功能测试。DynamoDB发现这个过程对于捕获问题很有价值，否则在需要的时候很难回滚</strong>。</p><p>在单个节点上部署软件与在多个节点上部署软件完全不同。部署在分布式系统中不是原子的，并且在任何给定的时间，都会在有些节点运行着旧代码，有些节点运行这新代码。<strong>分布式部署的另一个调整是新软件可能会引入一种新类型的消息或旧软件无法理解的方式更改协议。DynamoDB通过read-write deployments处理这种变更。第一步是部署软件来读新的消息格式或协议。一旦所有节点能处理新消息，软件再更新发送新消息。软件部署也启用新消息。read-write deployments确保两种类型的消息可以在系统中共存。即使在回滚的情况下，系统也能理解新旧消息。</strong></p><p><strong>部署在全量推送到整个集群之前，都先部署在一小部分节点上</strong>。该策略减少了错误部署的潜在影响。DynamoDB在可用性指标上设置了报警阈值。<strong>如果在部署期间，错误率和延迟超过了阈值，系统会<em>自动触发回滚</em></strong>。软件部署到存储节点会触发leader的failover，这样设计来避免对可用性产生影响。<strong>leader replica放弃leader身份，新的leader不需要等老leader的lease过期</strong>。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="65-dependencies-on-external-services">6.5 Dependencies on external services<a href="#65-dependencies-on-external-services" class="hash-link" aria-label="6.5 Dependencies on external services的直接链接" title="6.5 Dependencies on external services的直接链接">​</a></h3><p>为了保证高可用性，所有DynamoDB依赖的在请求路径上的服务，都必须有比DynamoDB更高的可用性。或者，即使依赖的服务受损，DynamoDB也应该能够继续运行。DynamoDB在请求路径上依赖的服务包括IAM和KMS，用于使用客户密钥加密的表。虽然这些服务也具有高可用性，但DynamoDB被设计成能在这些服务不可用时继续运行，也不会牺牲这些系统提供的任何安全属性。</p><p>在使用IAM和KMS的情况下，DynamoDB采用了一种statically stable design，即使依赖关系受损，整个系统也能继续工作。尽管依赖受损，但依赖受损之前的一切都会继续发挥作用。DynamoDB将来自IAM和KMS的结果，缓存在对每个请求做身份验证的request router中。DynamoDB会定期异步地刷新缓存结果。如果IAM和KMS变得不可用，router会继续使用之前缓存的结果。如果客户端向没有缓存的router发送请求，会受到影响。然而在实践中，当IAM和KMS受损时，我们看到的影响很小。此外，缓存通过移除off-box call的需要来优化响应时间，在系统处于高负载下很有价值。</p><blockquote><p>没有说off-box call是啥骚操作。。</p></blockquote><blockquote><p>总结：尽可能减少关键路径上强依赖。必须的强依赖要考虑降级措施。</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="66-metadata-availability">6.6 Metadata availability<a href="#66-metadata-availability" class="hash-link" aria-label="6.6 Metadata availability的直接链接" title="6.6 Metadata availability的直接链接">​</a></h3><p>metadata最重要的一部分就是实现表的主键到存储节点的映射。DynamoDB将matedata存储在DynamoDB自身。路由信息包含所有一个表所有的partition，每个partition的key范围，每个partition存储在哪个存储节点上。当一个router接收到之前没见过的表的请求，<strong>router会下载整个表的路由信息并缓存在本地</strong>。因为partition replica的信息很少变化，所以<strong>缓存命中率能达到99.75%</strong>。缺点是缓存会引入两个典型的问题。在router冷启动的时候没有缓存，所有的请求都会导致查询metadata，可能需要metadata服务和router一起扩容。在实践中扩容router的时候能看到影响。有时候metadata服务的流量会飙升到75%。因此，扩容新的router节点会影响性能，导致系统不稳定。另外，无效缓存会导致大量流量直接访问数据源metadata，系统其他部分也出现级联失败。</p><blockquote><p>request router里有一份metadata的缓存 用缓存就会产生两个问题：</p><ol><li>冷启动的时候没有缓存。影响性能，影响稳定性。</li><li>metadata变更，缓存失效，缓存击穿。</li></ol></blockquote><p>DynamoDB希望删掉request router对metadata本地缓存的依赖，而不会影响客户端请求延迟。当响应一个请求的时候，router只需要知道请求的key对应的partition所在的存储节点。所以缓存整个表的路由信息很浪费，尤其是对partition多的大表。为了经济高效的解决metadata扩展问题和可用性风险，DynamoDB构建了一个分布式内存数据库——<em>MemDS</em>。<strong>MemDS在内存里存储所有metadata，并且在MemDS层面互相同步</strong>。MemDS可以水平扩展来应对DynamoDB全部的请求流量。数据是高度压缩的。MemDS封装了一个Perkle的数据结构，是一个Patricia tree和一个Merkle tree的混合体。支持KV插入数据，以完整key或key前缀查询。另外因为key是顺序存储的，所以也支持范围查询。然后还支持两种特殊的查询操作：flooring和ceiling。</p><blockquote><p>引入分布式缓存MemDS负责缓存metadata。</p></blockquote><p><strong>在router里，即使缓存命中，也会去异步访问MemDS来刷新缓存</strong>。因此确保MemDS的流量一直恒定，无论缓存是否命中。与传统缓存相比，MemDS的持续流量增加了metadata的负载，传统缓存的后端流量依赖缓存命中率，但能在缓存失效时避免级联影响到其他系统。</p><p>DynamoDB的存储节点，是partition存储信息的最权威数据源。partition信息更新后，存储节点会推送给MemDS，每个partition信息的更新都会传播到所有MemDS节点。如果router的请求发到一个MemDS节点，而这个MemDS存储的节点是旧的，router按旧信息请求存储节点，存储节点如果知道partition最新信息则返回最新信息，否则存储节点返回特定错误码，router再去请求其他MemDS节点。</p><blockquote><p>lindom用了不同的思路，同样值得参考。</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7-micro-benchmarks">7. Micro benchmarks<a href="#7-micro-benchmarks" class="hash-link" aria-label="7. Micro benchmarks的直接链接" title="7. Micro benchmarks的直接链接">​</a></h2><p>为了展示扩容不会影响用户侧延迟，我们跑了两组YCSB workload。
workload A：50%读，50%写
workload B：95%读，5%写</p><p>两组benckmark都用了大小是900bytes，分布相同的key和item。这个是DynamoDB在North Virginia的一个真实场景。workload从100K ops/s增长到1M ops/s。Figure 5展示了两组workload读延迟的P50和P99。结果显示，DynamoDB 读延迟差异非常小，并且即使workload的吞吐量增加也保持不变。Workload B的读流量是A的两倍，读延迟差异也很小。Figure 6展示了两组workload写延迟的P50和P99。和读延迟一样，无论工作负载的吞吐量如何，写延迟都保持不变。</p><p><img loading="lazy" src="/assets/images/figure5-f188dc17fd1f35df9a0b26398affd894.png" width="1114" height="760" class="img_ev3q"></p><p><img loading="lazy" src="/assets/images/figure6-d53768349273c9b401948bf52765db71.png" width="1098" height="800" class="img_ev3q"></p><blockquote><p>这个多少有点糊弄，很多情况没说清楚。但他核心的意思就是，在流量增长的情况下，延迟非常稳定。而且P99比P50高的不多。
这就是前面一直说的可预测延迟。</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="8-conclusion">8 Conclusion<a href="#8-conclusion" class="hash-link" aria-label="8 Conclusion的直接链接" title="8 Conclusion的直接链接">​</a></h2><p>DynamoDB开创了云原生NoSQL数据库的先河。它每天支撑数千应用，涉及领域包括购物、食品、交通、银行、娱乐等领域。开发者依赖它的数据扩展能力的同时，还提供稳定的性能，高可用性，低操作复杂度。10 多年来，DynamoDB 一直保持着这些关键属性，并通过按需容量、时间点备份和恢复、多区域复制和原子事务等改变游戏规则的功能扩大了对应用程序开发人员的吸引力。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="9-acknowledgements">9 Acknowledgements<a href="#9-acknowledgements" class="hash-link" aria-label="9 Acknowledgements的直接链接" title="9 Acknowledgements的直接链接">​</a></h2><p>感谢。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="资料">资料<a href="#资料" class="hash-link" aria-label="资料的直接链接" title="资料的直接链接">​</a></h2><ul><li><a href="https://www.usenix.org/system/files/atc22-elhemali.pdf" target="_blank" rel="noopener noreferrer">原论文</a></li><li><a href="http://_.0xffff.me/dynamodb2022.html" target="_blank" rel="noopener noreferrer">PingCAP 黄东旭博客</a></li><li><a href="https://mp.weixin.qq.com/s/ssTTtav-vJ5EMc8OP-DrUw" target="_blank" rel="noopener noreferrer">阿里云公众号文章</a></li><li><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/best-practices.html" target="_blank" rel="noopener noreferrer">AWS DynamoDB官网文档</a></li></ul>]]></content>
        <author>
            <name>Ddupg</name>
            <uri>https://ddupg.github.io</uri>
        </author>
        <category label="数据库" term="数据库"/>
        <category label="DynamoDB" term="DynamoDB"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docusaurus建站（4）- 自定义页面]]></title>
        <id>https://ddupg.github.io/blog/20220717-docusaurus-website-4</id>
        <link href="https://ddupg.github.io/blog/20220717-docusaurus-website-4"/>
        <updated>2022-07-17T11:27:25.140Z</updated>
        <summary type="html"><![CDATA[请输入描述]]></summary>
        <content type="html"><![CDATA[<p>Docusaurus允许创建独立页面，可以使用React或者Markdown来写。我刚好实现自己的导航页面。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="新建自定义页面">新建自定义页面<a href="#新建自定义页面" class="hash-link" aria-label="新建自定义页面的直接链接" title="新建自定义页面的直接链接">​</a></h2><p>我是打算用React组件来做，所以新建<code>src/pages/navigation/index.tsx</code>页面</p><div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">src/pages/navigation/index.tsx</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv codeBlockLinesWithNumbering_o6Pm"><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> React </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'react'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> Layout </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@theme/Layout'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain" style="display:inline-block"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">default</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">Navigation</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">Layout title</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"导航"</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">      Hello</span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">Layout</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>启动项目，之后在<code>http://localhost:3000/navigation</code>就可以看到自己的导航页面了。自定义的页面没有自带网站布局样式，所以从<code>@theme/Layout</code>中导入<code>Layout</code>组件，使用网站统一的导航栏、页脚等。</p><p>然后在<code>Layout</code>内编写自己的内容就好了。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="新页面添加到导航栏">新页面添加到导航栏<a href="#新页面添加到导航栏" class="hash-link" aria-label="新页面添加到导航栏的直接链接" title="新页面添加到导航栏的直接链接">​</a></h2><p>修改<code>docusaurus.config.js</code>，添加自定义页面的路由。</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">docusaurus.config.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv codeBlockLinesWithNumbering_o6Pm"><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token spread operator" style="color:#393A34">...</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> config </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">themeConfig</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">navbar</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">        </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">items</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">{</span><span class="token literal-property property" style="color:#36acaa">to</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'/blog'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">label</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Blog'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">position</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'left'</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">{</span><span class="token literal-property property" style="color:#36acaa">type</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'doc'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">docId</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'intro'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">position</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'left'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">label</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Docs'</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span></span><br></span><span class="token-line theme-code-block-highlighted-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span></span><br></span><span class="token-line theme-code-block-highlighted-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">            </span><span class="token literal-property property" style="color:#36acaa">to</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'/navigation'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span></span><br></span><span class="token-line theme-code-block-highlighted-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">            </span><span class="token literal-property property" style="color:#36acaa">position</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'left'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span></span><br></span><span class="token-line theme-code-block-highlighted-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">            </span><span class="token literal-property property" style="color:#36acaa">label</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'导航'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span></span><br></span><span class="token-line theme-code-block-highlighted-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">{</span><span class="token literal-property property" style="color:#36acaa">href</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'https://github.com/ddupg'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">label</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'GitHub'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">position</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'right'</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">      </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain" style="display:inline-block"></span></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>再刷新页面，导航栏上就会出现自定义的页面了。</p><p>到这里，自定义页面的方法其实就讲完了，Docusaurus确实给了开发者很大的自由度。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="导航页实现">导航页实现<a href="#导航页实现" class="hash-link" aria-label="导航页实现的直接链接" title="导航页实现的直接链接">​</a></h2><div class="theme-admonition theme-admonition-info alert alert--info admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>信息</div><div class="admonitionContent_S0QG"><p>下面再简单说一下我自己导航页的实现，不做详细介绍。业余前端，自用项目，仅为过程记录，不足以做参考，还是建议学习更专业的前端大佬实现。</p></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="数据格式与数据文件">数据格式与数据文件<a href="#数据格式与数据文件" class="hash-link" aria-label="数据格式与数据文件的直接链接" title="数据格式与数据文件的直接链接">​</a></h3><p>基于页面与数据分离的思路，定义自己的导航数据格式与数据文件，这样新增导航标签的时候，只需要添加数据就完了，不用再动页面。</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>提示</div><div class="admonitionContent_S0QG"><p>我们将导航页使用到的文件放到了<code>src/components/</code>目录下，而不是自定义页面的<code>src/pages/</code>。因为写在<code>src/pages/</code>的文件都会被渲染成页面。</p></div></div><p>定义数据格式</p><div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">src/components/Navigation/interface.tsx</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token class-name">Website</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 导航标签使用的网站信息</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  url</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  intro</span><span class="token operator" style="color:#393A34">?</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token class-name">Classify</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 导航网站分类</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  intro</span><span class="token operator" style="color:#393A34">?</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  websites</span><span class="token operator" style="color:#393A34">?</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Website</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>编辑数据文件</p><div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">src/components/Navigation/data.tsx</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> Classify </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"./interface"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> navigationData</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Classify</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"后端"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    intro</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"前端开发相关资料网站"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    websites</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        name</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"OpenJDK"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        url</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"https://openjdk.org/"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        intro</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"OpenJDK官网"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        name</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Maven官网"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        url</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"https://maven.apache.org/"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        intro</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">  </span><span class="token string" style="color:#e3116c">"Maven官网"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"前端"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    intro</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"前端开发相关资料网站"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    websites</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        name</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Docusaurus"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        url</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"https://docusaurus.io/zh-CN/"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        intro</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"快速构建以内容为核心的最佳网站"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        name</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Ant Design"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        url</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"https://ant.design/index-cn"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        intro</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"React UI 组件库，主要用于研发企业级中后台产品。"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">default</span><span class="token plain"> navigationData</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="导航页实现-1">导航页实现<a href="#导航页实现-1" class="hash-link" aria-label="导航页实现的直接链接" title="导航页实现的直接链接">​</a></h3><p>UI使用了MUI</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">yarn</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">add</span><span class="token plain"> @mui/material @emotion/react @emotion/styled</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我还有个需求是将网站链接复制到剪切板，所以还引入了<code>copy-to-clipboard</code></p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">yarn</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">add</span><span class="token plain"> copy-to-clipboard</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>然后是页面实现</p><div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">src/pages/navigation/index.tsx</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv codeBlockLinesWithNumbering_o6Pm"><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> React</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> useState </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'react'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> Layout </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@theme/Layout'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> classifies </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"@site/src/components/Navigation/data"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> Website</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> Classify </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@site/src/components/Navigation/interface'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> Paper</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> Card</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> CardContent</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> CardActions</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> Typography</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> Box</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> Button</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> Alert </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@mui/material'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> Snackbar</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> SnackbarOrigin </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@mui/material/Snackbar'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain" style="display:inline-block"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> copy </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'copy-to-clipboard'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain" style="display:inline-block"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">default</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">Navigation</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">Layout title</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"导航"</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">      </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">NavigationPage classifies</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">classifies</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">Layout</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain" style="display:inline-block"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> NavigationPage</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> React</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">FC</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">classifies</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Classify</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">}</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">classifies</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">Paper elevation</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> sx</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> paddingTop</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">      classifies</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">classify</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">div</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">          </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">SubTitle title</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">classify</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">          </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">Box sx</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> display</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'flex'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> flexWrap</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'wrap'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> flexDirection</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'row'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> p</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> m</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">              classify</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">websites</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">website</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">WebsiteCard website</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">website</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">              </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">          </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">Box</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">        </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">div</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">Paper</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain" style="display:inline-block"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> SubTitle</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> React</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">FC</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">title</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">}</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">title</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">Typography variant</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"h5"</span><span class="token plain"> sx</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">p</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> paddingLeft</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">title</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">Typography</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain" style="display:inline-block"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> WebsiteCard</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> React</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">FC</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">website</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Website</span><span class="token punctuation" style="color:#393A34">}</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">website</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> intro</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> url </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> website</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain" style="display:inline-block"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token builtin">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">website</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">showCopy</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> setShowCopy</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useState</span><span class="token punctuation" style="color:#393A34">(</span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:#d73a49">onCopy</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    </span><span class="token function" style="color:#d73a49">copy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">url</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    </span><span class="token function" style="color:#d73a49">setShowCopy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain" style="display:inline-block"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">Box sx</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> p</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> m</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">      </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">Card</span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">        variant</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'outlined'</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">        sx</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> width</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">300</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> height</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">120</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">      </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">        </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">CardContent sx</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> paddingBottom</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">          </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">Typography variant</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"h6"</span><span class="token plain"> component</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"div"</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">          </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">Typography</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">          </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">Typography variant</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"body2"</span><span class="token plain"> color</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"text.secondary"</span><span class="token plain"> noWrap</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> paragraph</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">intro</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">          </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">Typography</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">        </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">CardContent</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">        </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">CardActions sx</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> display</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"flex"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> justifyContent</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'flex-end'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> paddingTop</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> paddingBottom</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">          </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">Button size</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"small"</span><span class="token plain"> color</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"primary"</span><span class="token plain"> onClick</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">onCopy</span><span class="token punctuation" style="color:#393A34">}</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">            Copy</span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">          </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">Button</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">          </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">Button size</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"small"</span><span class="token plain"> color</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"primary"</span><span class="token plain"> onClick</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> window</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">open</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">url</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">            </span><span class="token constant" style="color:#36acaa">GO</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">          </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">Button</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">        </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">CardActions</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">      </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">Card</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">      </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">Snackbar</span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">        anchorOrigin</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> vertical</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'top'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> horizontal</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'center'</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">        open</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">showCopy</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">        autoHideDuration</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token number" style="color:#36acaa">1500</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">        onClose</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">setShowCopy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">      </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">        </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">Alert severity</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"success"</span><span class="token plain"> sx</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> width</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'100%'</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">          复制成功</span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">        </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">Alert</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">      </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">Snackbar</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">Box</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#393A34"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="题外话">题外话<a href="#题外话" class="hash-link" aria-label="题外话的直接链接" title="题外话的直接链接">​</a></h3><p>我之前用Ant Design比较多，最初还试过Ant Design和tailwind CSS做过一版，Ant Design的UI用起来确实方便快捷许多，也够漂亮，只是一些过于自定义的样式可能不太好做。另外在Docusaurus里使用Antd + tailwind，还会影响Docusaurus项目的样式，标题栏/字体大小和颜色都变了，作为前端新手也找不到原因，所以最终改用了MUI的实现。</p><p>目前的导航页实现比较简单，基本满足个人使用。之后网站多了也许会考虑做个侧边栏。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="参考">参考<a href="#参考" class="hash-link" aria-label="参考的直接链接" title="参考的直接链接">​</a></h2><ul><li><a href="https://docusaurus.io/zh-CN/docs/creating-pages" target="_blank" rel="noopener noreferrer">Docusaurus创建页面</a></li><li><a href="https://mui.com/zh/" target="_blank" rel="noopener noreferrer">MUI</a></li><li><a href="https://github.com/virzs/Search-Next" target="_blank" rel="noopener noreferrer">Search-Next，导航页实现参考开源项目</a></li></ul>]]></content>
        <author>
            <name>Ddupg</name>
            <uri>https://ddupg.github.io</uri>
        </author>
        <category label="Docusaurus" term="Docusaurus"/>
        <category label="前端" term="前端"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docusaurus建站（3）- hygen生成页面模版]]></title>
        <id>https://ddupg.github.io/blog/20220626-docusaurus-website-3</id>
        <link href="https://ddupg.github.io/blog/20220626-docusaurus-website-3"/>
        <updated>2022-06-26T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[写博客每次都要写一堆matter信息，贼麻烦，用hygen工具生成。]]></summary>
        <content type="html"><![CDATA[<p>写博客每次都要写一堆matter信息，贼麻烦，用hygen工具生成。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="hygen使用">hygen使用<a href="#hygen使用" class="hash-link" aria-label="hygen使用的直接链接" title="hygen使用的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="macos安装">MacOS安装<a href="#macos安装" class="hash-link" aria-label="MacOS安装的直接链接" title="MacOS安装的直接链接">​</a></h3><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ brew tap jondot/tap</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ brew </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> hygen</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>其他系统或安装方式参考官网。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="初始化项目">初始化项目<a href="#初始化项目" class="hash-link" aria-label="初始化项目的直接链接" title="初始化项目的直接链接">​</a></h3><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token builtin class-name">cd</span><span class="token plain"> your-project</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ hygen init self</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="添加自己的博客模版">添加自己的博客模版<a href="#添加自己的博客模版" class="hash-link" aria-label="添加自己的博客模版的直接链接" title="添加自己的博客模版的直接链接">​</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ hygen generator new blog</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>会产生一个<code>_templates/blog/new/hello.ejs.t</code>文件，把<code>hello.ejs.t</code>改名成<code>index.ejs.t</code></p><div class="language-yml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">_templates/blog/new/index.ejs.t</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">---</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">to</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> blog/&lt;%= name %</span><span class="token punctuation" style="color:#393A34">&gt;</span><span class="token plain">/index.md</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">---</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">---</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">slug</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">title</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">date</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> &lt;%= h.getBlogDate() %</span><span class="token punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">author</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Ddupg</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">author_title</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> 数据库工程师</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">author_url</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> https</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">//ddupg.github.io</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">tags</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">数据库</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> 后端</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">---</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;</span><span class="token tag" style="color:#00009f">!--</span><span class="token plain"> truncate </span><span class="token punctuation" style="color:#393A34">-</span><span class="token punctuation" style="color:#393A34">-</span><span class="token punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>每篇博客会生成一个单独的目录。个人习惯，方便在同目录下放图片等其他资源。</li><li>slug和title记得填，不然也跑不起来。</li><li>其他信息可以根据自己情况修改</li><li><code>h.getBlogDate()</code>是自定义的一个工具方法，定义在根目录的<code>.hygen.js</code>。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="hygenjs">.hygen.js<a href="#hygenjs" class="hash-link" aria-label=".hygen.js的直接链接" title=".hygen.js的直接链接">​</a></h3><p>在项目根目录下，放一个<code>.hygen.js</code>文件，可以放一些自定义的工具方法，比如模版中的日期生成的方法就放在这里</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">.hygen.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">module</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">exports</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">helpers</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function-variable function" style="color:#d73a49">getBlogDate</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Date</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toISOString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="生成">生成<a href="#生成" class="hash-link" aria-label="生成的直接链接" title="生成的直接链接">​</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ hygen blog new &lt;blog name&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>执行之后，就会生成新的博客了，文件放在<code>blog/&lt;blog name&gt;/index.md</code>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="参考">参考<a href="#参考" class="hash-link" aria-label="参考的直接链接" title="参考的直接链接">​</a></h2><ul><li><a href="https://www.hygen.io/" target="_blank" rel="noopener noreferrer">Hygen</a></li></ul>]]></content>
        <author>
            <name>Ddupg</name>
            <uri>https://ddupg.github.io</uri>
        </author>
        <category label="Docusaurus" term="Docusaurus"/>
        <category label="Hygen" term="Hygen"/>
        <category label="前端" term="前端"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docusaurus建站（2）- 部署到GitHub Pages]]></title>
        <id>https://ddupg.github.io/blog/20220626-docusaurus-website-2</id>
        <link href="https://ddupg.github.io/blog/20220626-docusaurus-website-2"/>
        <updated>2022-06-26T11:00:00.000Z</updated>
        <summary type="html"><![CDATA[部署到GitHub Pages。官网支持很多种方法，我选了GitHub Action。]]></summary>
        <content type="html"><![CDATA[<p>部署到GitHub Pages。官网支持很多种方法，我选了GitHub Action。
我有几台电脑，几套开发环境，如果每个都配一遍也够麻烦的，毕竟不是专业的前端。用GitHub Action的话，写简单博客或者文档直接push到仓库就好了，甚至可以在GitHub的网页编辑，方便得很。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="新建github仓库上传代码">新建GitHub仓库&amp;上传代码<a href="#新建github仓库上传代码" class="hash-link" aria-label="新建GitHub仓库&amp;上传代码的直接链接" title="新建GitHub仓库&amp;上传代码的直接链接">​</a></h2><p>上一步只能在本地运行部署，要把它部署到GitHub Pages，得先上传到GitHub的一个仓库里。</p><p>我这里就是上传到了ddupg.github.io仓库。</p><blockquote><p>以github.io后缀的仓库名，GitHub会默认这是个GitHub Pages项目，如果是其他项目还需要自己配置GitHub Pages。具体看下<a href="https://pages.github.com/" target="_blank" rel="noopener noreferrer">官网介绍</a>。</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="配置access-token">配置Access Token<a href="#配置access-token" class="hash-link" aria-label="配置Access Token的直接链接" title="配置Access Token的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="生成">生成<a href="#生成" class="hash-link" aria-label="生成的直接链接" title="生成的直接链接">​</a></h3><p>生成一个专用于GitHub Pages部署用的access token，GitHub Action需要用这个token才能部署。</p><p>在自己的GitHub账号里，从页面右上角开始：</p><p><em>Setting -&gt;Developer settings -&gt;  Personal access tokens</em></p><p>生成一个新的token，记得复制下来，马上要用：</p><p><img loading="lazy" alt="new-token.png" src="/assets/images/new-token-77a71a94047528c7490cc4dc2265e41b.png" width="802" height="627" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="配置">配置<a href="#配置" class="hash-link" aria-label="配置的直接链接" title="配置的直接链接">​</a></h3><p><img loading="lazy" src="/assets/images/env-var-0b10f2f47d231a7b23df34ff41c09527.png" width="1638" height="848" class="img_ev3q"></p><p>这里的环境变量名后面要用，不要乱起名。环境变量的值，就是上一步生成的token。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="配置github-action">配置GitHub Action<a href="#配置github-action" class="hash-link" aria-label="配置GitHub Action的直接链接" title="配置GitHub Action的直接链接">​</a></h2><p>详细的可以看<a href="https://www.docusaurus.cn/docs/deployment#triggering-deployment-with-github-actions" target="_blank" rel="noopener noreferrer">Docusaurus文档</a></p><p>配置GitHub Action非常简单，只需要在自己的项目的固定目录新加个配置文件就好了。</p><ul><li><p>文件名随意。目录必须是：<code>.github/workflows/</code></p></li><li><p>如果你的默认主分支不是main，那就改下<code>on.push.branches</code>。如果其他分支也需要触发，那也加上分支名。</p></li><li><p>如果你的环境变量名字不是<code>ACCESS_TOKEN</code>，就改个环境变量名，其他的不要动</p></li></ul><div class="language-yml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">.github/workflows/ci.yml</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Deploy to GitHub Pages</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">on</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">push</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">branches</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">jobs</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">deploy</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Deploy to GitHub Pages</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">runs-on</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ubuntu</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">latest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">steps</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">uses</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> actions/checkout@v2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">uses</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> actions/setup</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">node@v3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">with</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">node-version</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> 16.x</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">cache</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> yarn</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Install dependencies</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">run</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> yarn install </span><span class="token punctuation" style="color:#393A34">-</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">frozen</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">lockfile</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Build website</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">run</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> yarn build</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic"># Popular action to deploy to GitHub Pages:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic"># Docs: https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-docusaurus</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Deploy to GitHub Pages</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">uses</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> peaceiris/actions</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">gh</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">pages@v3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">with</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">github_token</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> $</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> secrets.ACCESS_TOKEN </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic"># Build output to publish to the `gh-pages` branch:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">publish_dir</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ./build</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="最后">最后<a href="#最后" class="hash-link" aria-label="最后的直接链接" title="最后的直接链接">​</a></h2><p>把修改后的配置文件push到仓库就好了，GitHub Action会自动触发。</p><p>再修改下GitHub Pages使用的分支，这事就成了。</p><p><img loading="lazy" src="/assets/images/github-pages-a97a1ac6b80121310c1c8774bb5f2ea1.png" width="1079" height="503" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="参考">参考<a href="#参考" class="hash-link" aria-label="参考的直接链接" title="参考的直接链接">​</a></h2><p><a href="https://www.docusaurus.cn/" target="_blank" rel="noopener noreferrer">Docusaurus文档</a></p>]]></content>
        <author>
            <name>Ddupg</name>
            <uri>https://ddupg.github.io</uri>
        </author>
        <category label="Docusaurus" term="Docusaurus"/>
        <category label="React" term="React"/>
        <category label="前端" term="前端"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docusaurus建站（1）- 项目初始化]]></title>
        <id>https://ddupg.github.io/blog/20220626-docusaurus-website-1</id>
        <link href="https://ddupg.github.io/blog/20220626-docusaurus-website-1"/>
        <updated>2022-06-26T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[本想重做自己的博客和文档，本打算从头写，调研了Next.js和Gatsby，都是很强大的框架，但对我个后端开发来说还是很有难度的。无意中看到了Docusaurus框架，能自带文档和博客，还能高度自定义页面，完美匹配我的需求，所以就有了这个系列，打算记录下整个博客改造过程，能写几期不一定，慢慢来吧。]]></summary>
        <content type="html"><![CDATA[<p>本想重做自己的博客和文档，本打算从头写，调研了Next.js和Gatsby，都是很强大的框架，但对我个后端开发来说还是很有难度的。无意中看到了Docusaurus框架，能自带文档和博客，还能高度自定义页面，完美匹配我的需求，所以就有了这个系列，打算记录下整个博客改造过程，能写几期不一定，慢慢来吧。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="初始化项目">初始化项目<a href="#初始化项目" class="hash-link" aria-label="初始化项目的直接链接" title="初始化项目的直接链接">​</a></h2><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ npx create-docusaurus@latest my-website classic --typescript</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ yarn</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ yarn build</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ yarn start # 开发过程中，能自动刷新</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ yarn serve # 不会自动刷新</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="修改网站配置">修改网站配置<a href="#修改网站配置" class="hash-link" aria-label="修改网站配置的直接链接" title="修改网站配置的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="修改网站基本信息">修改网站基本信息<a href="#修改网站基本信息" class="hash-link" aria-label="修改网站基本信息的直接链接" title="修改网站基本信息的直接链接">​</a></h3><p><img loading="lazy" alt="config-basic.png" src="/assets/images/config-basic-769cf3cfc8811e809d2f3c59aa7666fa.png" width="1102" height="796" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="修改图标导航栏">修改图标&amp;导航栏<a href="#修改图标导航栏" class="hash-link" aria-label="修改图标&amp;导航栏的直接链接" title="修改图标&amp;导航栏的直接链接">​</a></h3><p><img loading="lazy" src="/assets/images/config-navbar-cfd63c0f3bd7bb5a5396da10778ba00e.png" width="926" height="1408" class="img_ev3q"></p><p>制作图标过程中用到的几个工具，都是临时google找的：</p><p><a href="https://www.remove.bg/zh" target="_blank" rel="noopener noreferrer">图片背景消除</a></p><p><a href="https://www.logosc.cn/logo/favicon?s=d" target="_blank" rel="noopener noreferrer">icon图标生成工具</a></p><p><a href="https://www.aconvert.com/cn/image/png-to-svg/" target="_blank" rel="noopener noreferrer">PNG转SVG - 在线转换图像文件</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="修改footer">修改Footer<a href="#修改footer" class="hash-link" aria-label="修改Footer的直接链接" title="修改Footer的直接链接">​</a></h3><p><img loading="lazy" src="/assets/images/config-footer-13e3c99e1a491cefa4855282c1193f5c.png" width="1736" height="1660" class="img_ev3q"> &nbsp;</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="删掉自带的博客文档demo">删掉自带的博客/文档Demo<a href="#删掉自带的博客文档demo" class="hash-link" aria-label="删掉自带的博客/文档Demo的直接链接" title="删掉自带的博客/文档Demo的直接链接">​</a></h2><p>博客目录：<code>blog/</code>
文档目录：<code>docs/</code></p><p>文档目录只留个<code>intro.md</code>，因为配置里留了这个文件的引用，后面当个主页导航用。</p>]]></content>
        <author>
            <name>Ddupg</name>
            <uri>https://ddupg.github.io</uri>
        </author>
        <category label="Docusaurus" term="Docusaurus"/>
        <category label="React" term="React"/>
        <category label="前端" term="前端"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[初尝Gatsby]]></title>
        <id>https://ddupg.github.io/blog/20220618-first-try-gatsby</id>
        <link href="https://ddupg.github.io/blog/20220618-first-try-gatsby"/>
        <updated>2022-06-18T08:11:00.000Z</updated>
        <summary type="html"><![CDATA[第一次体验Gatsby项目，创建demo项目就碰到了不少问题。]]></summary>
        <content type="html"><![CDATA[<p>第一次体验Gatsby项目，创建demo项目就碰到了不少问题。
笔者用的是MacOS环境。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="sharp问题">sharp问题<a href="#sharp问题" class="hash-link" aria-label="sharp问题的直接链接" title="sharp问题的直接链接">​</a></h2><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">❯ Installing Gatsby...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! code 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! path /Users/ddupg/github/gatsby-demo/node_modules/sharp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! command failed</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! command sh -c (node install/libvips &amp;&amp; node install/dll-copy &amp;&amp; prebuild-install) || (node install/can-compile &amp;&amp; node-gyp rebuild &amp;&amp; node install/dll-copy)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! sharp: Downloading https://github.com/lovell/sharp-libvips/releases/download/v8.12.2/libvips-8.12.2-darwin-x64.tar.br</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! sharp: Please see https://sharp.pixelplumbing.com/install for required dependencies</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! sharp: Installation error: connect ETIMEDOUT 185.199.111.133:443</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! A complete log of this run can be found in:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> ERROR</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Command failed with exit code 1: npm install --loglevel error --color always</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>参考<a href="https://juejin.cn/post/6844903856464199687" target="_blank" rel="noopener noreferrer">解决gatsby安装失败sharp: Command failed</a>
这是国内连接github网络不稳，依赖资源下载不了。
从异常中能看出依需要下载的具体包，我这里就是<strong>libvips-8.12.2-darwin-x64.tar.br</strong>，手动从<a href="https://github.com/lovell/sharp-libvips/releases" target="_blank" rel="noopener noreferrer">github</a>下载对应版本，放到<code>~/.npm/_libvips</code>
目录，再尝试就好了。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="vips问题">vips问题<a href="#vips问题" class="hash-link" aria-label="vips问题的直接链接" title="vips问题的直接链接">​</a></h2><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">❯ Installing Gatsby...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! code 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! path /Users/ddupg/github/my-gatsby-site/node_modules/sharp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! command failed</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! command sh -c (node install/libvips &amp;&amp; node install/dll-copy &amp;&amp; prebuild-install) || (node install/can-compile &amp;&amp; node-gyp rebuild &amp;&amp; node install/dll-copy)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! sharp: Using cached /Users/ddupg/.npm/_libvips/libvips-8.12.2-darwin-x64.tar.br</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! sharp: Integrity check passed for darwin-x64</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR!   TOUCH Release/obj.target/libvips-cpp.stamp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR!   CC(target) Release/obj.target/nothing/node_modules/node-addon-api/nothing.o</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR!   LIBTOOL-STATIC Release/nothing.a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR!   CXX(target) Release/obj.target/sharp-darwin-x64/src/common.o</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! ../src/common.cc:24:10: fatal error: 'vips/vips8' file not found</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! #include &lt;vips/vips8&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR!          ^~~~~~~~~~~~</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! 1 error generated.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! make: *** [Release/obj.target/sharp-darwin-x64/src/common.o] Error 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! gyp ERR! build error</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! gyp ERR! stack Error: `make` failed with exit code: 2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! gyp ERR! stack     at ChildProcess.onExit (/Users/ddupg/.node_global/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:194:23)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! gyp ERR! stack     at ChildProcess.emit (node:events:526:28)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! gyp ERR! stack     at Process.ChildProcess._handle.onexit (node:internal/child_process:291:12)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! gyp ERR! System Darwin 19.3.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! gyp ERR! command "/usr/local/bin/node" "/Users/ddupg/.node_global/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js" "rebuild"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! gyp ERR! cwd /Users/ddupg/github/my-gatsby-site/node_modules/sharp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! gyp ERR! node -v v16.14.2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! gyp ERR! node-gyp -v v9.0.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! gyp ERR! not ok</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! A complete log of this run can be found in:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> ERROR</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Command failed with exit code 1: npm install --loglevel error --color always</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>参考<a href="https://stackoverflow.com/questions/66363572/vips-vips8-file-not-found-include-vips-vips8-in-ionic-cordova-in-ios" target="_blank" rel="noopener noreferrer">vips/vips8 file not found #include &lt;vips/vips8&gt; in Ionic cordova in IOS</a>
手动安装vips</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">brew install vips</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="其他">其他<a href="#其他" class="hash-link" aria-label="其他的直接链接" title="其他的直接链接">​</a></h2><p>国内环境brew下载贼慢，参考<a href="https://zhuanlan.zhihu.com/p/324691527" target="_blank" rel="noopener noreferrer">brew换源</a></p>]]></content>
        <author>
            <name>Ddupg</name>
            <uri>https://ddupg.github.io</uri>
        </author>
        <category label="Gatsby" term="Gatsby"/>
        <category label="React" term="React"/>
        <category label="前端" term="前端"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[HBase SCP & TRSP]]></title>
        <id>https://ddupg.github.io/blog/20220416-HBase-SCP-and-TRSP</id>
        <link href="https://ddupg.github.io/blog/20220416-HBase-SCP-and-TRSP"/>
        <updated>2020-04-16T15:20:00.000Z</updated>
        <summary type="html"><![CDATA[最近在组内进行的一次SCP和TRSP两个Procedure执行过程的分享，在这里记录一下，懒得去整理出文章了]]></summary>
        <content type="html"><![CDATA[<p>最近在组内进行的一次SCP和TRSP两个Procedure执行过程的分享，在这里记录一下，懒得去整理出文章了 😜</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="amv2">AMv2<a href="#amv2" class="hash-link" aria-label="AMv2的直接链接" title="AMv2的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="比较重要的类">比较重要的类<a href="#比较重要的类" class="hash-link" aria-label="比较重要的类的直接链接" title="比较重要的类的直接链接">​</a></h3><p><img loading="lazy" alt="AMv2主要的类" src="/assets/images/amv2-2f91d7e4ca3bdaccfcb134b65d0b65f9.png" width="1256" height="654" class="img_ev3q"></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="assignmentmanager">AssignmentManager<a href="#assignmentmanager" class="hash-link" aria-label="AssignmentManager的直接链接" title="AssignmentManager的直接链接">​</a></h4><p>管理Region的assign/unassign操作，管理Region的状态信息。</p><p>其中主要属性：</p><ul><li>RegionStates: 管理内存中的Region状态信息，RS上有哪些region</li><li>RegionStateStore: 操作meta表</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="regionstatenode">RegionStateNode<a href="#regionstatenode" class="hash-link" aria-label="RegionStateNode的直接链接" title="RegionStateNode的直接链接">​</a></h4><ul><li>lock: 对Region状态信息和RegionLoacation信息加锁，防止并发修改。</li><li>regionInfo: Region信息</li><li>event: 用于多个procedure等待Region的某个状态变化，比如open、close。</li><li>procedure: 记录唯一绑定的TRSP，保证每个Region只能同时进行一个TRSP。</li><li>regionLocation: region要被assign到哪个RS。</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="procedureevent">ProcedureEvent<a href="#procedureevent" class="hash-link" aria-label="ProcedureEvent的直接链接" title="ProcedureEvent的直接链接">​</a></h4><p>用于多个Procedure等待某个依赖的事件，在AMv2中，主要的就是等待Region的状态变化。</p><p><img loading="lazy" alt="ProcedureEvent" src="/assets/images/ProcedureEvent-9c68161b068f8ef7283f3bb74fbe04b6.png" width="419" height="222" class="img_ev3q"></p><p>事件状态就两种：</p><ul><li>ready: 某个事件已准备好，可以继续执行</li><li>suspend: 事件未准备好，之后调用suspendIfNotReady()方法的Procedure都会被加到 suspendedProcedure队列里，用于之后唤醒。</li></ul><p>主要方法：</p><ul><li>suspendIfNotReady: 如果是ready状态，表示可以继续执行；如果suspend状态，Procedure会被加到 suspendedProcedure队列里，用于之后唤醒。这时候Procedure会抛出ProcedureSuspendedException，Pv2框架会暂停Procedure的执行，等待被唤醒。</li></ul><p>这个功能有个问题就是只保存在内存中，无法恢复，如果Procedure使用不好，Master重启，等待队列无法恢复，Procedure可能永远无法被唤醒。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="servercrashprocedure">ServerCrashProcedure<a href="#servercrashprocedure" class="hash-link" aria-label="ServerCrashProcedure的直接链接" title="ServerCrashProcedure的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="触发条件">触发条件<a href="#触发条件" class="hash-link" aria-label="触发条件的直接链接" title="触发条件的直接链接">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="zk-session-expire被动触发">zk session expire（被动触发）<a href="#zk-session-expire被动触发" class="hash-link" aria-label="zk session expire（被动触发）的直接链接" title="zk session expire（被动触发）的直接链接">​</a></h4><p>监听zk上rs节点的变化，如果代表某个rs的子节点被过期删除，就触发SCP。</p><p>配置: {zookeeper.znode.parent}/{zookeeper.znode.rs}/</p><p>默认: /hbase/{cluster name}/rs/</p><p>此种情况下，如果rs处于非ONLINE状态，不会强制执行ServerCrashProcedure</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="hbck2-主动触发">HBCK2 （主动触发）<a href="#hbck2-主动触发" class="hash-link" aria-label="HBCK2 （主动触发）的直接链接" title="HBCK2 （主动触发）的直接链接">​</a></h4><p>要使用完整的ServerName，包含后面的startcode。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./hbase hbck -j hbase-hbck2-1.0.0-SNAPSHOT.jar scheduleRecoveries c4-hadoop-tst-st84.bj,55600,1586416554312 c4-hadoop-tst-st85.bj,55600,1586415546993</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>无论rs是否处于ONLINE状态，都会强制执行 HBCKServerCrashProcedure（ServerCrashProcedure的子类），大多数情况下行为和ServerCrashProcedure一样，不同的地方在于getRegionsOnCrashedServer方法：</p><p>如果ServerCrashProcedure.getRegionsOnCrashedServer返回空集合，HBCKServerCarshProcedure会scan读meta表，将meta表上记录的Opening和Opened两种状态的region返回，另外将Closing状态的region改为Close。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="状态变化">状态变化<a href="#状态变化" class="hash-link" aria-label="状态变化的直接链接" title="状态变化的直接链接">​</a></h3><p><strong>准备工作</strong></p><p>将当前处理的rs加到 DeadServer processing list。在SCP执行结束之后，才加到 DeadServers list。每个状态都会检查下，是否加进去了。</p><p><strong>等待meta表可用</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">case SERVER_CRASH_START:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">case SERVER_CRASH_SPLIT_META_LOGS:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">case SERVER_CRASH_DELETE_SPLIT_META_WALS_DIR:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">case SERVER_CRASH_ASSIGN_META:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">break;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">default:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// If hbase:meta is not assigned, yield.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if (env.getAssignmentManager().waitMetaLoaded(this)) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    throw new ProcedureSuspendedException();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>前面几个状态都是操作meta表的region的状态，所以meta表不可用也会执行，其他的状态会操作普通region，涉及到meta表的读写，所以其他状态都要求meta表的region可用，才可以继续执行。这里就利用了ProcedureEvent这个类的功能，等待meta region加载完成之后才允许继续下面的状态，否则直接抛出ProcedureSuspendedException暂停当前Procedure的执行，等待被唤醒。</p><p><strong>但这里好像使用AssignmentManager.metaAssignEvent更合适</strong>。因为meatLoadedEvent只有在Master启动之后才会触发一次，metaAssignEvent在Master启动和每次meta region open都会触发，所以metaAssignEvent来代表meta region可用更合适一些。</p><p><img loading="lazy" alt="SCP流程图" src="/assets/images/SCP-58989e5b9729bf091278156057abc06f.png" width="1339" height="1541" class="img_ev3q"></p><ul><li>START: 没有什么实际操作，根据RS上是否有meta表的region，来判断下一步的状态</li><li>SPLIT_META_LOGS: split meta表的WAL</li><li>DELETE_SPLIT_META_WALS_DIR: 删除HDFS上meta表split log的目录</li><li>ASSIGN_META: 重新assign meta region</li><li>GET_REGIONS: 查询RS上除meta外的region</li><li>SPLIT_LOGS: split非meta表的WAL</li><li>DELETE_SPLIT_WALS_DIR: 删除HDFS上非meta表的WAL目录</li><li>ASSIGN: assign 非meta的region</li><li>FINISH: 收尾工作，将RS加到 DeadServers list，触发CP</li></ul><p>其实这些状态主要可以做的就是Split WAL，Delete WAL dir，Assign region这三类，只不过将Region按是否是meta做了区分，meta region和普通region分别做了这三类操作。这里我理解原因应该是普通的region assign需要读写meta表，所以要求meta表的region必须可用才行，所以优先对meta region进行三步操作处理，meta region可用之后才会进行普通region的三步操作。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="问题">问题<a href="#问题" class="hash-link" aria-label="问题的直接链接" title="问题的直接链接">​</a></h3><p><strong>执行SCP的时候，RS上的region是怎么处理的？</strong></p><p>直接置为ABNORMALLY_CLOSED，认为所有的region都已经不可用了。</p><p>如果region有TRSP在进行，就进一步通知所有这些region的TRSP和RRP，做对应的操作。
如果没有，就新加TRSP去assign这些region。</p><p>如果rs再恢复或启动的话，也应该会发现zk的节点丢了，不能直接open它的region。（这个没有去看代码确认）</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="transitregionstateprocedure">TransitRegionStateProcedure<a href="#transitregionstateprocedure" class="hash-link" aria-label="TransitRegionStateProcedure的直接链接" title="TransitRegionStateProcedure的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="主要变量">主要变量<a href="#主要变量" class="hash-link" aria-label="主要变量的直接链接" title="主要变量的直接链接">​</a></h3><p><strong>type/initialState/lastState</strong></p><table><thead><tr><th>type</th><th>initialState</th><th>lastState</th></tr></thead><tbody><tr><td>ASSIGN</td><td>GET_ASSIGN_CANDIDATE</td><td>CONFIRM_OPENED</td></tr><tr><td>UNASSIGN</td><td>CLOSE</td><td>CONFIRM_CLOSED</td></tr><tr><td>MOVE</td><td>CLOSE</td><td>CONFIRM_OPENED</td></tr><tr><td>REOPEN</td><td>CLOSE</td><td>CONFIRM_OPENED</td></tr></tbody></table><p><strong>remoteProc</strong></p><p>绑定的某个RegionRemoteProcedureBase，用于执行open/close region这样的RPC操作，这里也只能有一个remoteProc，表示不能同时进行多个操作region状态的RPC。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="状态流转">状态流转<a href="#状态流转" class="hash-link" aria-label="状态流转的直接链接" title="状态流转的直接链接">​</a></h3><p><img loading="lazy" alt="TRSP状态简图" src="/assets/images/TRSP-simple-a558be829bcc6130a60a3c902c396ddc.png" width="817" height="372" class="img_ev3q"></p><p>可以看出来，TRSP中的5个状态形成一个环，通过initialState和lastState两个状态判断入环和出环的状态。</p><p>像ASSIGN和UNASSIGN两个操作，只需要跑完自己的状态就行了。MOVE/REOPEN操作则要先close然后open，不同的是，通过指定RegionStateNode.regionLocation来指定open在哪个RS上，open的rs变化了就是MOVE，不变就是REOPEN。</p><p>ASSIGN: GET_ASSIGN_CANDIDATE -&gt; OPEN -&gt; CONFIRM_OPENED<br>
<!-- -->UNASSIGN: CLOSE -&gt; CONFIRM_CLOSED<br>
<!-- -->MOVE/REOPEN: CLOSE -&gt; CONFIRM_CLOSE -&gt; GET_ASSIGN_CANDIDATE -&gt; OPEN -&gt; CONFIRM_OPENED  </p><p>简图中一些异常情况下的状态流转没有展示出来，比如如果close失败，会再将region open，然后再close，就会在环上转圈。就是说执行过程中出现问题，就会在环上循环执行，直到满足条件达到lastState最终出环。</p><p><img loading="lazy" alt="TRSP状态图" src="/assets/images/TRSP-0acef2ffb80beb4272a59cd963c82d85.png" width="1287" height="776" class="img_ev3q"></p><p><strong>准备工作</strong></p><p>执行之前必须获取RegionStateNode的锁，因为执行过程中，会多次对其中的数据（state、regionLocation）做修改，前面讲过，为保证RegionStateNode的属性不会并发修改，所有修改之前都要先拿锁。</p><p><strong>GET_ASSIGN_CANDIDATE</strong></p><p>主要做的事情就是为Region指定一个RS，将Region放入AM的pendingAssignQueue之后，直接suspend等待。AM以生产者消费者模式为Region指定RS，然后唤醒Procedure。</p><p><strong>OPEN</strong></p><ol><li>如果没有指定regionLocation，则有可能是上一步GET_ASSIGN_CANDIDATE出现问题。或者上一步执行过程中，Master重启，Procedure重试执行了。这时候重新执行上一步就好了。</li><li>如果成功制定了regionLocation，就通过OpenRegionProcedure去通知RS open该region。<ol><li>如果OpenRegionProcedure最终成功执行完了，TRSP继续执行</li><li>如果失败了，会在下一步CONFIRM_OPENED进行重试</li><li>如果Master重启，导致无法唤醒，OpenRegionProcedure有超时机制，超时之后会再重试。</li></ol></li></ol><p><strong>CONFIRM_OPENED</strong></p><p>检查OPEN操作最终是否成功。</p><ol><li>如果Region成功OPEN<ol><li>要看lastState是否就是CONFIRM_OPENED，是的话就完事了。</li><li>不是的话要再执行CLOSE操作。就像简图中的环上一样执行。有可能出现的一种情况是，当merge/split region的时候，要unassign一个region，但过程中RS crash了，就得先把这个region open了，再执行unassign操作，防止RS crash时数据丢失无法恢复。</li></ol></li><li>重试次数达到上限，直接结束</li><li>抹掉regionLocation，重新执行GET_ASSIGN_CANDIDATE</li></ol><p><strong>CLOSE</strong></p><ol><li>region当前的状态合理，通过CloseRegionProcedure，执行过程类似于OpenRegionProcedure。</li><li>不合理直接再去GET_ASSIGN_CANDIDATE走OPEN的逻辑</li></ol><p><strong>CONFIRM_CLOSED</strong></p><ol><li>如果Region当前状态是CLOSE，说明上一步执行成功了<ol><li>如果lastState == CONFIRM_CLOSED，说明当前状态就是要求的最终状态，可以结束了。</li><li>否则，说明可能是move或者reopen操作，需要再assign region，去GET_ASSIGN_CANDIDATE走OPEN的逻辑。<strong>只有这一个地方回到GET_ASSIGN_CANDIDATE没有抹掉regionLocation</strong>。</li></ol></li><li>如果Region当前状态是CLOSING，说明close rpc执行失败了，rs没有回调通知（eg. rs重启了），一直等到了CloseRegionProcedure超时触发了TRSP继续执行，才走到了当前状态，需要再重新Close一次。</li><li>走到这里的Region可能是ABNORMALLY_CLOSED状态，应该只有RS crash才会导致这个状态。<ol><li>如果非default region，ABNORMALLY_CLOSED可以被当作CLOSE处理，直接结束掉。只有开启了read region replicas功能才有这样的region。非default region不接收写操作，所以即使非正常close也不会造成数据丢失。</li><li>Region close异常，需要再open之后再正常close，保证数据不会丢失。原因和CONFIRM_OPENED里的逻辑类似，比如merge/split region的时候，要先close region，如果失败了，则必须先恢复region再重新close，避免数据丢失。</li></ol></li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="问题-1">问题<a href="#问题-1" class="hash-link" aria-label="问题的直接链接" title="问题的直接链接">​</a></h3><p><strong>region merge/split是怎么处理的？</strong></p><p>region merge/split分别是由MergeTableRegionsProcedure和SplitTableRegionProcedure来执行的，它们步步骤都可以拆分成region assign/unassign，也就会拆成不同的TRSP去执行。</p><p>以 region split为例</p><ol><li>close父region（unassign）</li><li>处理好子region的信息保存之后</li><li>open子region（assign）</li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="regionremoteprocedurebase">RegionRemoteProcedureBase<a href="#regionremoteprocedurebase" class="hash-link" aria-label="RegionRemoteProcedureBase的直接链接" title="RegionRemoteProcedureBase的直接链接">​</a></h3><p>RegionRemoteProcedureBase是OpenRegionProcedure和CloseRegionProcedure的父类，实现了基本的RPC相关功能。RegionRemoteProcedureBase与TRSP的配合主要也是利用了ProcedureEvent机制。</p><p><img loading="lazy" alt="RegionRemoteProcedureBase时序图" src="/assets/images/RegionRemoteProcedureBase-b15690d1fc59375f46f06f3bc50ed9bb.png" width="821" height="421" class="img_ev3q"></p><ol><li>addOperationToNode方法就是将RPC操作封装起来，放到一个集合中等待执行。</li><li>执行当前Region的ProcedureEvent.suspend操作，等待RPC执行完毕之后唤醒。</li><li>RSProcedureDispatcher会分批将RPC操作按RS和操作类型分类，批量请求某个RS。</li><li>RS执行完对应操作之后，通过reportTransition通知AM（当然中间还有Master），Region open/close完成。</li><li>然后AM就会唤醒RegionStateNode.event，继续执行RegionRemoteProcedureBase</li><li>RegionRemoteProcedureBase执行完成之后，继续执行TRSP后续步骤。</li></ol><h4 class="anchor anchorWithStickyNavbar_LWe7" id="问题-2">问题<a href="#问题-2" class="hash-link" aria-label="问题的直接链接" title="问题的直接链接">​</a></h4><p><strong>RPC回调之后，怎么确定对应的哪个Procedure？</strong></p><p>RegionInfo -&gt; AM.regionStates (类型 RegionStates) -&gt; RegionStates.regionMap (类型 Map&lt;byte[], RegionStateNode&gt;) -&gt; RegionStateNode.procedure (类型 TRSP) -&gt; TRSP.remoteProc (类型 RegionRemoteProcedureBase) -&gt; RegionRemoteProcedureBase.reportTransition</p><p><strong>RS重启导致没有RPC回调，或者Master重启之后event队列丢失 怎么办？</strong></p><p>RegionRemoteProcedureBase有个超时限制，超时之后重新再执行一次。</p>]]></content>
        <author>
            <name>Ddupg</name>
            <uri>https://ddupg.github.io</uri>
        </author>
        <category label="HBase" term="HBase"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[HBase不停服跨集群数据迁移]]></title>
        <id>https://ddupg.github.io/blog/20200314-HBase不停服跨集群数据迁移</id>
        <link href="https://ddupg.github.io/blog/20200314-HBase不停服跨集群数据迁移"/>
        <updated>2020-03-14T15:42:00.000Z</updated>
        <summary type="html"><![CDATA[最近接到两个用户提的JIRA，都是目前数据只存在了一个srv集群，需要将数据备份prc集群做数据备份或者离线计算，同时两集群之间还要做数据实时同步。所以在这里记录下操作过程并介绍下原因。]]></summary>
        <content type="html"><![CDATA[<p>最近接到两个用户提的JIRA，都是目前数据只存在了一个srv集群，需要将数据备份prc集群做数据备份或者离线计算，同时两集群之间还要做数据实时同步。所以在这里记录下操作过程并介绍下原因。</p><p>集群之间增量数据同步自然是利用replication，单向同步配置一个peer，双向同步配置两个peer就好。</p><p>存量数据使用snapshot同步。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="操作步骤">操作步骤<a href="#操作步骤" class="hash-link" aria-label="操作步骤的直接链接" title="操作步骤的直接链接">​</a></h2><p><strong>0. 准备工作</strong></p><p>在prc集群新建namespace</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">create_namespace 'ns'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>1. 新建srv到prc集群的peer</strong></p><p><strong>注意peer要disable掉</strong></p><p>如果之前没有srv到prc集群的peer，直接新建peer</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// 复制namespace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">add_peer '1', CLUSTER_KEY =&gt; "zk1,zk2,zk3:11000:/hbase/prc", STATE =&gt; "DISABLED", NAMESPACES =&gt; ["ns"]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 复制table</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">add_peer '1', CLUSTER_KEY =&gt; "zk1,zk2,zk3:11000:/hbase/prc", STATE =&gt; "DISABLED", TABLE_CFS =&gt; { "ns:table1" =&gt; [] }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>如果之前已经有srv到prc集群的peer，在peer中加入要操作的namespace</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">disable_peer '1'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 新加namespace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">append_peer_namespaces '1', ["ns"]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 新加table</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">append_peer_tableCFs '1', { "ns:table1" =&gt; []}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>2. 打snapshot</strong></p><p>将要同步的表打snapshot，如果复制整个namespace，要一个一个打</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">snapshot 'ns:table1', 'ns_table1_snapshot'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>3. 将snapshot复制到prc集群</strong></p><p>使用<code>ExportSnapshot</code>将snapshot从srv复制到prc集群</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./bin/hbase --config /path/to/conf org.apache.hadoop.hbase.snapshot.ExportSnapshot -copy-from hdfs://srv/hbase/srv -copy-to hdfs://prc/hbase/prc -snapshot ns_table1_snapshot -mappers 100 -bandwidth 512 -overwrite &gt;&gt; copy.log 2&gt;&amp;1 &amp;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>4. 在prc集群使用snapshot生成表</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">clone_snapshot 'ns_table1_snapshot', 'ns:table1'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>5. 开启peer</strong></p><p>将srv到prc集群的peer打开</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">enable_peer '1'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>6. 其他</strong></p><p>在peer集群加权限</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">grant 'kerberos_name', 'RW', '@ns1'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>如果需要俩集群双向同步，在增加prc到srv集群的peer</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">add_peer '2', CLUSTER_KEY =&gt; "zk1,zk2,zk3:11000:/hbase/srv", STATE =&gt; "ENABLED", NAMESPACES =&gt; ["ns"]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="操作原因">操作原因<a href="#操作原因" class="hash-link" aria-label="操作原因的直接链接" title="操作原因的直接链接">​</a></h2><p>数据复制自然不能丢数据，也就是要保证snapshot的存量数据和replication的增量数据之间不能有间隙，但其实可以有重叠。</p><p>我们先新建replication peer，将现有的WAL和之后再生成的WAL都加进该peer的复制队列中，disable掉peer的原因则是prc集群还没有新建表，replication开始复制则会出现<code>Table xxx does not exist</code>的报错。这一步如果是修改的原有peer，则会导致replication延迟增加。</p><p>之后再打snapshot便不用担心数据有丢失了，此时replication的数据与snapshot的数据已经有重叠了。</p><p>最后总结一句，一定要先新建replication peer，然后在打snapshot。</p>]]></content>
        <author>
            <name>Ddupg</name>
            <uri>https://ddupg.github.io</uri>
        </author>
        <category label="HBase" term="HBase"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Maven项目以Shaded形式引入第三方依赖库]]></title>
        <id>https://ddupg.github.io/blog/20200113-Shaded-Thirdparty-Dependencies</id>
        <link href="https://ddupg.github.io/blog/20200113-Shaded-Thirdparty-Dependencies"/>
        <updated>2020-01-13T17:46:00.000Z</updated>
        <summary type="html"><![CDATA[最近有用户反馈，他的项目中同时使用了HBase和一个RPC框架，HBase依赖2.5.0的protobuf，RPC框架依赖3.7的protobuf，导致他的项目编译都失败。0.98版本的HBase还是使用的原生的protobuf-java依赖，2.0版本才使用了shaded形式的protobuf，所以我们决定自己提供以shaded形式引入protobuf的HBase Client。]]></summary>
        <content type="html"><![CDATA[<p>最近有用户反馈，他的项目中同时使用了HBase和一个RPC框架，HBase依赖2.5.0的protobuf，RPC框架依赖3.7的protobuf，导致他的项目编译都失败。0.98版本的HBase还是使用的原生的protobuf-java依赖，2.0版本才使用了shaded形式的protobuf，所以我们决定自己提供以shaded形式引入protobuf的HBase Client。</p><p>相信这个问题不只是出现在HBase中，或者出现在与protobuf相关的项目中，其实当我们项目间接依赖了像protobuf、netty等大版本之间互不兼容的框架，甚至guava这种某些接口不兼容的框架，都有可能出现类似的问题。这里也是提供一个可以参考的解决方法。</p><p>方法上，参考了HBase 2.0之后对第三方依赖的处理，简单来说就是将常用第三方依赖的代码负责一份，修改所有类的package，发布一个自己的artifact到仓库中。这样肯定就不会再依赖冲突了。</p><p>而protobuf的依赖处理起来则比较麻烦一点，除了修改原生protobuf类的package之外，还需要处理proto生成的Java文件。所以本文就以protobuf为例，提供第三方依赖冲突的解决方案。因为都是使用Maven插件实现，所以也只对Maven项目有用，相信其他项目也有类似的解决办法。</p><p>本文相关代码都已放在<a href="https://github.com/ddupg/demos/tree/master/shaded" target="_blank" rel="noopener noreferrer">Github</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="生成shaded依赖包">生成shaded依赖包<a href="#生成shaded依赖包" class="hash-link" aria-label="生成shaded依赖包的直接链接" title="生成shaded依赖包的直接链接">​</a></h2><p>可以直接参考<a href="https://github.com/ddupg/demos/blob/master/shaded/pom.xml" target="_blank" rel="noopener noreferrer">pom.xml的代码</a>，其中主要使用到的插件是以下几个：</p><ul><li>maven-dependency-plugin 将protobuf依赖包下载下来并解包放在src/main/java目录下，变成自己项目的源码</li><li>maven-shade-plugin 在打包阶段，修改protobuf类的package名。例如HBase项目是将<code>com.google.protobuf</code>改为<code>org.apache.hbase.thirdparty.com.google.protobuf</code>，我的代码中是将<code>com.google.protobuf</code>改为<code>ddupg.demo.thirdparty.com.google.protobuf</code></li><li>maven-clean-plugin 在操作之前，清理下之前生成的文件</li></ul><p>修改好pom文件之后，直接mvn clean deploy发布到仓库就好了，中央仓库和私有仓库都是一样的。</p><p>可以解压target目录下打好的包，就可以看到class文件的package路径已经变化了。因为是在package阶段才修改的package名，所以直接看target/generated-sources下的class文件其实是不变的。</p><p>普通的第三方依赖项目使用这一步其实就可以解决了。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="生成proto文件">生成proto文件<a href="#生成proto文件" class="hash-link" aria-label="生成proto文件的直接链接" title="生成proto文件的直接链接">​</a></h2><p>解决掉了protobuf的源文件，下一步就是处理proto生成的文件了。</p><p>因为需要依赖上一步生成的shaded包，而我又没有将它deploy到中央仓库，也没有自己的私人仓库，所以便使用了<a href="https://github.com/apache/hbase-thirdparty" target="_blank" rel="noopener noreferrer">HBase项目的第三方依赖</a>，道理都一样，替换一下dependency就好了。</p><p>可以直接参考<a href="https://github.com/ddupg/demos/blob/master/shaded/shaded-protocol/pom.xml" target="_blank" rel="noopener noreferrer">pom.xml的代码</a>.</p><p>这一步主要使用的插件：</p><ul><li>protobuf-maven-plugin 生成proto文件，这一步生成的文件依旧使用的是原生protobuf。</li><li>com.google.code.maven-replacer-plugin:replacer 替换源代码，将protobuf原生的package路径<code>com.google.protobuf</code>改成第一步中修改后的package名。因为我在这里使用的HBase的第三方依赖项目，所以就是将<code>com.google.protobuf</code>改为<code>org.apache.hbase.thirdparty.com.google.protobuf</code></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="参考">参考<a href="#参考" class="hash-link" aria-label="参考的直接链接" title="参考的直接链接">​</a></h2><ul><li><a href="https://www.xolstice.org/protobuf-maven-plugin/" target="_blank" rel="noopener noreferrer">Maven Protocol Buffers Plugin</a></li><li><a href="https://maven.apache.org/plugins/maven-shade-plugin/" target="_blank" rel="noopener noreferrer">Apache Maven Shade Plugin</a></li><li><a href="https://code.google.com/archive/p/maven-replacer-plugin/" target="_blank" rel="noopener noreferrer">maven-replacer-plugin</a></li></ul>]]></content>
        <author>
            <name>Ddupg</name>
            <uri>https://ddupg.github.io</uri>
        </author>
        <category label="Java" term="Java"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[初步了解HBase Region Replicas]]></title>
        <id>https://ddupg.github.io/blog/20191205-Initial-Analysis-Region-Replicas</id>
        <link href="https://ddupg.github.io/blog/20191205-Initial-Analysis-Region-Replicas"/>
        <updated>2019-12-05T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[背景]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="背景">背景<a href="#背景" class="hash-link" aria-label="背景的直接链接" title="背景的直接链接">​</a></h2><p>CAP原理中，指出对于一个分布式系统来说，不可能同时满足一致性 (Consistency)、可用性（Availability）、分区容错性（Partition tolerance），而HBase则被设计成一个CP系统，保证了强一致性的同时，选择牺牲了一定的可用性。</p><p>在对HBase的压测中，很容易发现虽然HBase的平均读写延迟很低，但却存在很高的毛刺，P99、P999延迟很高，主要的一个影响因素则是单点的GC，另外Region的MTTR（平均修复时间）也较高，一旦某个RegionServer宕机或某个Region出现问题，甚至是一次Full GC，都有可能出现较长时间的不可用，影响可用性。</p><p>HBase的Read Region Replicas功能，提供一个或多个副本，在region恢复期间或请求时间过长时，支持最终一致性的读服务。在一些不要求强一致性的应用中，可以通过此功能来提高可用性降低读请求延迟。</p><p>为了实现高可用读，HBase提供了一个feature，叫<code>region replication</code>。在这种模型下，表的每个region，都会有多个副本，分布在不同的RegionServer上。默认region replication为1，此时与之前的region模型并无不同。当region replication被设置为2或更多时，Master将会assign所有region的secondary region，Load Balancer会保证同一个region的多个备份会被分散在不同的RegionServer上。</p><p>一个region的所有副本都有一个唯一的replica_id。replica_id=0的是primary region（和之前模型中唯一的region一样），其他的副本region被都叫做secondary region。</p><p>primary region，支持读写请求；secondary region，只支持读请求。如此设计保证primary region依旧具有强一致性，同时提高读可用性。但也因为写请求只有primary region可以处理，所以写请求依然会因为primary region不可用而被阻塞，HBase的写可用性依然没有得到改善。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="timeline-consistency">Timeline Consistency<a href="#timeline-consistency" class="hash-link" aria-label="Timeline Consistency的直接链接" title="Timeline Consistency的直接链接">​</a></h2><p>在该功能的实现中，HBase提供了一种支持<strong>单次读请求</strong>的一致性定义。</p><div class="language-Java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-Java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public enum Consistency {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    STRONG,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    TIMELINE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>HBase默认的就是<code>Consistency.STRONG</code>强一致性模型，与之前的模型一样，所有读写操作都通primary region完成。</p><p>而当client使用<code>Consistency.TIMELINE</code>的一致性发起读请求时，会首先向primary region发起请求，一定时间内没有返回响应，则同时并发向所有的secondary region发起请求，最终采用率先返回的请求。为了区分最终的响应是否来自secondary region，在<code>Result</code>中增加了<code>stale</code>的boolean属性，<code>true</code>则表示来自secondary region。</p><p>从语义上讲，HBase的TIMELINE一致性并不同于常见的最终一致性解决方案。</p><ul><li>即使存在多副本，也不需要考虑副本之间数据冲突的问题。</li><li>secondary region接收primary region同步的数据，按同样顺序处理数据，所以secondary region总是primary region在之前某个时刻的快照。从这一点上看，更像是RDBMS（关系型数据库管理系统）的复制、或是HBase多数据中心多集群之间的复制。</li><li>另一方面，client可以自行决定是否需要读取最新数据，自行决定使用哪一种一致性来满足功能需求。</li><li>client依然会读到乱序的数据，比如多次请求发往了不同的region。目前并没有类似于事务的东西来解决这个问题。</li></ul><p><img loading="lazy" alt="Timeline Consistency" src="/assets/images/timeline_consistency-cbd096b06c5cd9b876ac242581fd5752.png" width="720" height="540" class="img_ev3q"></p><p>根据上图我们来更好的理解TIMELINE的语义。首先client1按顺序写了x=1,x=2,x=3，primary region也按写入顺序处理，并将WAL同步给其他secondary region（一种数据同步方式，后面会再讲）。在图中注意到，replica_1只接收到两次更新，所以最终数据是x=2，replica_2只接收到1次更新，数据是x=1。</p><p>如果client1使用STRONG一致性来读数据，都只会和primary region交互，数据都是最新值x=3。可如果使用TIMELINE一致性读取数据，有可能和所有副本做交互，最终获得的数据1、2、3都有可能。如果client请求多次，甚至可能出现数据回退，即第1次请求获得x=2，第2次请求则获得了x=1。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="实现">实现<a href="#实现" class="hash-link" aria-label="实现的直接链接" title="实现的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="数据模型">数据模型<a href="#数据模型" class="hash-link" aria-label="数据模型的直接链接" title="数据模型的直接链接">​</a></h3><p><img loading="lazy" alt="一个region replication为2的表在meta表中的列" src="/assets/images/meta-4e25459c12011f47545533ebf41291ce.png" title="一个region replication为2的表在meta表中的列" width="1150" height="96" class="img_ev3q"></p><p>在上图中，是一个region replication为2的表在meta表中info列族下的列，可以看到有一些名为info:xxx_0001的列，这些列存储的数据就是replica_id=1的secondary region的数据。同理，当region的备份数量更多时，meta表中名为info:xxx_0002、info:xxx_0003的列存储的则为replica_id为2、3的secondary region的数据。</p><p>明白了meta表中是如何存储secondary region数据，client要获取secondary region所在的RegionServer自然也简单，多解析几个server_xxxx的列便可以了。</p><p><img loading="lazy" alt="client访问secondary region" src="/assets/images/client-read-replicas-ccdc2076b27cf4c406b28e22fcf3f5d0.png" title="client访问secondary region" width="547" height="356" class="img_ev3q"></p><p>上图展示的是client访问secondary region的示意图。HBase的读请求有两种，Get和Scan。对于Get这种无状态的请求，每次RPC对server端来说都是一次独立的请求。client端的用户可以多次超时重试，直到获取到数据；也可以并发请求多个replica，选择率先返回的数据；还可以使用TIMELINE Read，请求primary region超时之后再请求其他secondary region。但对于Scan这种有状态的请求，一次scan可能与同一个region交互多次，也可能跨多个region多个RegionServer请求数据，server端会记录每个scan的状态数据，那么一次scan产生的多次RPC便不能随意地发给所有的replica。</p><p><img loading="lazy" alt="client scan过程" src="/assets/images/client_scan_replicas-fd7fa07654a40cb9ee74b05ea7769eb9.png" title="client scan过程" width="735" height="344" class="img_ev3q"></p><p>上图展示的是client执行一个跨region的scan过程，假设当前表有2个逻辑region（Region_A和Region_B），region的起始区间分别为[a, d)、[d, f)，且该表的region replication为2，即每个逻辑region都有一主一备，4个region分布在4个RegionServer上。当我们执行一次scan操作，设置cacheing为2（每次RPC最多获取2个Result），则scan至少进行4次RPC，图中连线则表示每次RPC，连线上的数字表示RPC的顺序编号，虚线表示RPC超时或返回太慢结果没有被采用。可以看到当client要进行第1次RPC时，将请求同时发给了Region_A的主备2个region，因为此时server端是没有任何关于此次scan的状态数据，client可以选择率先返回响应的region进行后续的RPC交互。当第2次RPC时便不可以随意选择region了，因为Region_A_primary存储了此次scan的状态数据，而Region_A_replica_1没有，如果请求Region_A_replica_1则只会抛出异常。当第2次RPC结束，已经获取了Region_A中的全部数据，便可以清理掉Region_A_primary中存储的状态数据了。当第3次RPC时，和第1次时情况有些类似，server端暂时没有存储scan的状态数据了，client便可以像第1次RPC一样，将请求同时发给了Region_A的主备2个region。第4次RPC则像第2次一样。总结一下：当scan进行TIMELINE Read时，只有对每个逻辑region的第1次rpc可以任意选择region请求。</p><p>目前，Read Region Replicas功能并没有支持批量请求，即批量Get、Scan都是直接请求primary region。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="数据同步">数据同步<a href="#数据同步" class="hash-link" aria-label="数据同步的直接链接" title="数据同步的直接链接">​</a></h3><p>secondary region要支持读请求，则必然要有数据，而secondary region又不支持写请求，那么数据是哪来的呢？</p><p><img loading="lazy" alt="RegionServer 内部结构" src="/assets/images/rs-structure-4c2478b8d9d3eed71dec635557afba24.png" title="RegionServer 内部结构" width="691" height="369" class="img_ev3q"></p><p>从HBase的数据模型上看，数据主要分为两部分：MemStore和HFile。HFile存储于HDFS上，secondary region只要及时获知HFile的变化便可以获取。但MemStore存在于内存，却只有primary region持有。以下便介绍两种secondary region同步数据的方式。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="storefile-refresher">StoreFile Refresher<a href="#storefile-refresher" class="hash-link" aria-label="StoreFile Refresher的直接链接" title="StoreFile Refresher的直接链接">​</a></h4><p>第一种方式是StoreFile Refresher，在HBase-1.0+版本引入。在RegionServer上有一个StorefileRefresherChore任务，会定期地在HDFS上检查primary region的HFile有没有变化，以此来及时的发现primary region通过flush、compact、bulk load等操作产生的新HFile。</p><p>该方案实现上较为简单，也不需要太多多余的存储和网络开销，但缺点也非常明显，在数据写入primary region，到secondary region可以读到数据，有相当长的时间间隔，中间需要等待memstore的flush和StorefileRefresherChore任务的定时刷新。</p><p>如果要开启这个功能，只要将<code>hbase.regionserver.storefile.refresh.period</code>配置设置为非零值即可，表示StorefileRefresherChore任务刷新的时间间隔。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="asynchronous-replication">Asynchronous Replication<a href="#asynchronous-replication" class="hash-link" aria-label="Asynchronous Replication的直接链接" title="Asynchronous Replication的直接链接">​</a></h4><p>HBase有提供集群间replication功能，利用WAL在多个集群之间同步数据。在HBase-1.1+版本中，便利用replication在集群内部同步数据，将实时写入的WAL同步到secondary region。</p><p><img loading="lazy" alt="Asynchronous Replication示意图" src="/assets/images/region_replica_replication-0e540a03227d17865c1070363956a8bb.png" title="Asynchronous Replication 示意图" width="552" height="495" class="img_ev3q"></p><p>如上图中所示，通过实现一个特殊的<code>ReplicationEndpoint</code>便可以将WAL的数据同步给集群中的其他RegionServer。如此primary region MemStore中的数据，也通过replication实时同步到secondary region，从secondary region中也可以读到primary region还没有flush到HFile的数据。所以利用<code>Asnyc WAL replication</code>的同步方式比上面讲到的<code>StoreFile Refresher</code>同步方式具有更低的同步延迟。</p><p>primary region还会将flush、compaction和bulk load事件写到WAL，同样由replication功能同步到secondary region。当secondary region接收到这些事件时，便也回放同样的事件来更新自己的数据。所以对HFile文件列表的更新也比<code>StoreFile Refresher</code>定时刷新的方式更加实时。</p><p>在这种同步模式下，secondary region的MemStore中也是有数据，从WAL同步的Put/Delete操作就pPrimaryrRegion一样写入MemStore，并且secondary region也会使用block cache，所以在这种模式中内存的开销会成倍的增长。不同于primary region的是，secondary region在接收到flush事件时，并不会将MemStore中的数据flush成HFile，只会释放掉MemStore占用的内存。</p><p><code>Asnyc WAL replication</code>功能默认是关闭的。需要设置<code>hbase.region.replica.replication.enabled</code>为<code>true</code>来打开这个功能。当第一次创建一个region replication大于1的表时，将会创建一个名为<code>region_replica_replication</code>的replication peer，这个replication peer将负责集群内所有表region replica的数据同步。一旦开启之后想要再关闭该功能，就不只是改<code>hbase.region.replica.replication.enabled</code>为<code>false</code>了，还需要disable掉<code>region_replica_replication</code>这个replication peer。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="存在的问题">存在的问题<a href="#存在的问题" class="hash-link" aria-label="存在的问题的直接链接" title="存在的问题的直接链接">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="hfile的过期时间">HFile的过期时间<a href="#hfile的过期时间" class="hash-link" aria-label="HFile的过期时间的直接链接" title="HFile的过期时间的直接链接">​</a></h4><p>在以上两种数据同步方式中，都会在多个RegionServer上打开同一个HFile，所以当primary region进行完了major compaction之后，secondary region因为HFile文件变化更新不及时，依旧引用着旧的HFile。目前并没有有效的措施保证HFile文件并不会被过早的删除。只能是将配置项<code>hbase.master.hfilecleaner.ttl</code>设置为一个较大的值，比如一小时，以此来尽量避免请求过程中不会出错。但同时也会增加HDFS的存储开销。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="replication不能同步meta表数据">replication不能同步meta表数据<a href="#replication不能同步meta表数据" class="hash-link" aria-label="replication不能同步meta表数据的直接链接" title="replication不能同步meta表数据的直接链接">​</a></h4><p>目前的Asynchronous Replication功能并不能同步meta表的WAL数据（最初该功能是用于集群间同步数据的，毕竟不能把meta数据同步给其他集群）。所以对于meta表的操作，并不能通过replication尽快的同步到secondary region，只能通过类似于<code>StoreFile Refresher</code>的方式，使用定时刷新的任务来同步meta表HFile文件的变化。</p><p><code>hbase.regionserver.meta.storefile.refresh.period</code>配置项用于控制meta表StoreFile的更新时间。该配置项并不同于<code>StoreFile Refresher</code>功能的<code>hbase.regionserver.storefile.refresh.period</code>。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="内存消耗">内存消耗<a href="#内存消耗" class="hash-link" aria-label="内存消耗的直接链接" title="内存消耗的直接链接">​</a></h4><p>在之前已经提到，Asynchronous Replication同步因为使用MemStore和block cache，会导致内存开销成倍增加。并且secondary region并不会主动进行flush，只会当接收到同步的WAL中的flush事件时，才会进行flush。在一些极端情况下，比如replication阻塞收不到flush事件、primary region确实长时间没有进行flushsecondaryarRegion持有的内存得不到释放，而一个RegionServer上同时有多个primary region和secondary region，内存的过度消耗可能会阻塞primary region正常的写入操作，也会阻塞replication同步的flush事件。</p><p>所以HBase提供了一个配置项<code>hbase.region.replica.storefile.refresh.memstore.multiplier</code>，默认值为4，表示如果secondary region的MemStore比primary region最大的MemStore的4倍还要大时，便允secondaryarRegion自行refresh检查HFile文件是否变化，如果primary region早已flush过，却因为replication阻塞没有同步到，则可以利用该机制进行flush。默认情况下最好不要执行这个操作，可以把该配置项设置大一些来避免。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="secondary-region-failover">secondary region Failover<a href="#secondary-region-failover" class="hash-link" aria-label="secondary region Failover的直接链接" title="secondary region Failover的直接链接">​</a></h4><p>当一个secondary region刚open或者fail over，此时必然丢失了之前MemStore的数据，因为secondary region毕竟不能像primary region一样通过回放WAL来恢复MemStore。如果此时直接提供读服务，则可能出现数据版本回退的问题，即恢复之后比恢复之前读到的数据更旧。为了避免数据回退，secondary region就必须等待primary region进行一次完整的flush操作或open region事件，在这之前，secondary region都将拒绝接服务。</p><p><code>hbase.region.replica.wait.for.primary.flush</code>配置项是该机制的开关，默认是<code>enable</code>开启。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="使用">使用<a href="#使用" class="hash-link" aria-label="使用的直接链接" title="使用的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="配置">配置<a href="#配置" class="hash-link" aria-label="配置的直接链接" title="配置的直接链接">​</a></h3><p><strong>server端</strong></p><table><thead><tr><th>配置项</th><th>默认值</th><th>单位</th><th>描述</th></tr></thead><tbody><tr><td>hbase.regionserver.storefile.refresh.period</td><td>0</td><td>毫秒</td><td>secondary region刷新storefile的时间间隔，默认0为关闭</td></tr><tr><td>hbase.regionserver.meta.storefile.refresh.period</td><td>0</td><td>毫秒</td><td>secondary region刷新hbase:meta表storefile的时间间隔，默认0为关闭</td></tr><tr><td>hbase.region.replica.replication.enabled</td><td>false</td><td></td><td>是否开启<code>Asnyc WAL replication</code>功能，开启后再想关闭，需要改为false之后再disable掉<code>region_replica_replication</code>的peer</td></tr><tr><td>hbase.master.hfilecleaner.ttl</td><td>300000(5分钟)</td><td>毫秒</td><td>storefile文件的过期删除时间间隔</td></tr><tr><td>hbase.meta.replica.count</td><td>1</td><td>个</td><td>meta表的region replication数量</td></tr><tr><td>hbase.region.replica.storefile.refresh.memstore.multiplier</td><td>4</td><td>倍</td><td>secondary region的MemStore大于同RegionServer上primary region最大的MemStore该倍数时，会触发刷新storefile文件列表的任务</td></tr><tr><td>hbase.region.replica.wait.for.primary.flush</td><td>true</td><td></td><td>secondary region open之后，是否要等待primary region进行一次flush再提供服务</td></tr><tr><td>hbase.master.loadbalancer.class</td><td>org.apache.hadoop.hbase.master.balancer.StochasticLoadBalancer</td><td></td><td>默认的实现可以保证region的replicas尽量不会分布在同一个RegionServer上，如果修改该配置，要注意replicas的分布</td></tr></tbody></table><p><strong>client端</strong></p><table><thead><tr><th>配置项</th><th>默认值</th><th>单位</th><th>描述</th></tr></thead><tbody><tr><td>hbase.ipc.client.specificThreadForWriting</td><td>false</td><td></td><td>是否使用特殊线程用于写请求。使用region replicas功能，经常会在IO过程中中断线程，所以必须开启该配置</td></tr><tr><td>hbase.client.primaryCallTimeout.get</td><td>10000</td><td>微秒</td><td>TIMELINE一致性Get时，等待primary region响应的时间，超时之后便请求secondary region</td></tr><tr><td>hbase.client.primaryCallTimeout.scan</td><td>10000</td><td>微秒</td><td>TIMELINE一致性Scan时，等待primary region响应的时间，超时之后便请求secondary region</td></tr><tr><td>hbase.meta.replicas.use</td><td>false</td><td></td><td>是否使用meta表的secondary region</td></tr></tbody></table><h3 class="anchor anchorWithStickyNavbar_LWe7" id="建表">建表<a href="#建表" class="hash-link" aria-label="建表的直接链接" title="建表的直接链接">​</a></h3><p><code>REGION_REPLICATION</code>参数控制表中region有多少备份，默认值为1，即只有primary region。</p><p>shell方式建表</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">create </span><span class="token string" style="color:#e3116c">'t1'</span><span class="token plain">, </span><span class="token string" style="color:#e3116c">'f1'</span><span class="token plain">, </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">REGION_REPLICATION </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>shell方式修改表</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">alter </span><span class="token string" style="color:#e3116c">'t1'</span><span class="token plain">, </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">REGION_REPLICATION </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="client">Client<a href="#client" class="hash-link" aria-label="Client的直接链接" title="Client的直接链接">​</a></h3><p>Client访问secondary region必须要用户明确的表示可以接收非强一致性的数据，如果希望请求可以发送给secondary region，必须明确指定为<code>TIMELINE</code>的一致性。</p><div class="language-Java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-Java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public enum Consistency {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    STRONG,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    TIMELINE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="shell">Shell<a href="#shell" class="hash-link" aria-label="Shell的直接链接" title="Shell的直接链接">​</a></h4><p>允许以<code>TIMELINE</code>的一致性读取数据</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">hbase</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">main</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">:001:</span><span class="token operator file-descriptor important" style="color:#393A34">0</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> get </span><span class="token string" style="color:#e3116c">'t1'</span><span class="token plain">,</span><span class="token string" style="color:#e3116c">'r6'</span><span class="token plain">, </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">CONSISTENCY </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"TIMELINE"</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">hbase</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">main</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">:001:</span><span class="token operator file-descriptor important" style="color:#393A34">0</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> get </span><span class="token string" style="color:#e3116c">'t1'</span><span class="token plain">,</span><span class="token string" style="color:#e3116c">'r6'</span><span class="token plain">, </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">CONSISTENCY </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"TIMELINE"</span><span class="token plain">, , REGION_REPLICA_ID </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="java">Java<a href="#java" class="hash-link" aria-label="Java的直接链接" title="Java的直接链接">​</a></h4><p>Get</p><div class="language-Java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-Java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Get get = new Get(row);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">get.setConsistency(Consistency.TIMELINE);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Result result = table.get(get);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Scan</p><div class="language-Java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-Java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Scan scan = new Scan();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">scan.setConsistency(Consistency.TIMELINE);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ResultScanner scanner = table.getScanner(scan);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以通过<code>Result.isStale()</code>判断数据是否来自于secondary region</p><div class="language-Java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-Java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Result result = table.get(get);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if (result.isStale()) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="性能测试">性能测试<a href="#性能测试" class="hash-link" aria-label="性能测试的直接链接" title="性能测试的直接链接">​</a></h2><p><strong>机器配置</strong></p><p>HBase版本：2.2.0
HDFS版本： 3.1.4</p><table><thead><tr><th>service</th><th>job</th><th>实例数</th><th>cpu</th><th>disk</th><th>netowork</th><th>comment</th></tr></thead><tbody><tr><td>HBase</td><td>master</td><td>2</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>HBase</td><td>region server</td><td>5</td><td>24 core</td><td>12*3.7T HDD</td><td>10000bps</td><td>onheap=50g/offheap=50g</td></tr><tr><td>HDFS</td><td>namenode</td><td>2</td><td>-</td><td>-</td><td>-</td><td>onheap=10g</td></tr><tr><td>HDFS</td><td>datanode</td><td>5</td><td>24 core</td><td>12*3.7T HDD</td><td>10000bps</td><td>onheap=2g</td></tr></tbody></table><p><strong>不限制QPS</strong></p><table><thead><tr><th></th><th>strong</th><th>timeline-10ms</th><th>reta</th></tr></thead><tbody><tr><td>qps_sec</td><td>12608.23</td><td>11171.18</td><td>-11.4%</td></tr><tr><td>max_latency_us</td><td>195174.38</td><td>202603.69</td><td>3.81%</td></tr><tr><td>min_latency_us</td><td>149.38</td><td>148.75</td><td>-0.42%</td></tr><tr><td>avg_latency_us</td><td>3760.69</td><td>4276.76</td><td>13.72%</td></tr><tr><td>p90_latency_us</td><td>11811.92</td><td>14258.31</td><td>20.71%</td></tr><tr><td>p99_latency_us</td><td>32512.23</td><td>31148.14</td><td>-4.2%</td></tr><tr><td>p999_latency_us</td><td>64646.38</td><td>58621.93</td><td>-9.32%</td></tr><tr><td>p9999_latency_us</td><td>136835.92</td><td>115951.63</td><td>-15.26%</td></tr></tbody></table><p><strong>限制7000QPS</strong></p><table><thead><tr><th></th><th>strong</th><th>timeline-10ms</th><th>reta</th></tr></thead><tbody><tr><td>qps_sec</td><td>6999.58</td><td>6999.56</td><td>-0.0%</td></tr><tr><td>max_latency_us</td><td>126860.75</td><td>130148.86</td><td>2.59%</td></tr><tr><td>min_latency_us</td><td>147.25</td><td>150.68</td><td>2.33%</td></tr><tr><td>avg_latency_us</td><td>3223.38</td><td>3495.51</td><td>8.44%</td></tr><tr><td>p90_latency_us</td><td>10612.49</td><td>11379.48</td><td>7.23%</td></tr><tr><td>p99_latency_us</td><td>23793.54</td><td>24469.25</td><td>2.84%</td></tr><tr><td>p999_latency_us</td><td>48791.00</td><td>39795.06</td><td>-18.44%</td></tr><tr><td>p9999_latency_us</td><td>93389.08</td><td>78618.61</td><td>-15.82%</td></tr></tbody></table><p>对单Client实例做压力测试，<code>hbase.client.primaryCallTimeout.get</code>参数设置为10000，即等待primary region响应的时间超时10ms之后便请求secondary region。</p><p>第一组极限QPS的压测中，可以看出开启TIMELINE Read之后，QPS有一定损失，平均延迟有一定升高，P999和P9999一定程度优化。优化效果有限。</p><p>因为read replicas会增加线程资源的使用，而日常使用也不会把Client侧压到极限，所以又做了一组限制QPS的压测，可以看到各项延迟指标均有所好转。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a href="#总结" class="hash-link" aria-label="总结的直接链接" title="总结的直接链接">​</a></h2><p><code>Region Replica</code>功能可以提高HBase的读可用性，但也要根据具体的用例考虑是否适用。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="优点">优点<a href="#优点" class="hash-link" aria-label="优点的直接链接" title="优点的直接链接">​</a></h3><ul><li>当应用依赖是只读的表，或者应用并不要求强一致性（要求最终一致性，可以接受短时间内数据不一致）时，可以使用该功能来提高读可用性。在RegionServer或Region出现单点故障恢复期间或长时间Full GC期间尽量保证业务读请求正常，减少MTTR过长对业务产生的影响，同时也可以减少大量重试请求进一步地增加故障节点的压力。</li><li>对于部分不要求强一致性且对延迟毛刺有一定要求的应用，当在Client侧QPS较低或CPU、带宽等资源富余时，可以使用该功能降低读请求P99/P999和P9999延迟。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="缺点">缺点<a href="#缺点" class="hash-link" aria-label="缺点的直接链接" title="缺点的直接链接">​</a></h3><ul><li>多倍的MemStore导致更多的内存消耗</li><li>增加block cache的需求和使用</li><li>为了传输WAL导致更多的网络带宽消耗</li><li>大量的集群内部RPC请求</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="参考">参考<a href="#参考" class="hash-link" aria-label="参考的直接链接" title="参考的直接链接">​</a></h2><ul><li><a href="http://hbase.apache.org/book.html#arch.timelineconsistent.reads" target="_blank" rel="noopener noreferrer">Timeline-consistent High Available Reads</a></li><li><a href="https://issues.apache.org/jira/browse/HBASE-10070" target="_blank" rel="noopener noreferrer">HBASE-10070</a></li><li><a href="https://issues.apache.org/jira/secure/attachment/12616659/HighAvailabilityDesignforreadsApachedoc.pdf" target="_blank" rel="noopener noreferrer">HighAvailabilityDesignforreadsApachedoc.pdf</a></li></ul>]]></content>
        <author>
            <name>Ddupg</name>
            <uri>https://ddupg.github.io</uri>
        </author>
        <category label="HBase" term="HBase"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[「记」Jdk8 CompletableFuture在高并发环境下的性能问题]]></title>
        <id>https://ddupg.github.io/blog/20191011-CompletableFuture-in-high-concurrent</id>
        <link href="https://ddupg.github.io/blog/20191011-CompletableFuture-in-high-concurrent"/>
        <updated>2019-10-11T19:30:00.000Z</updated>
        <summary type="html"><![CDATA[最近的工作内容就是写一个 DualHBaseClient，在查询数据时间过长时，能够将同样的请求发给 replication 的集群，缩小 client 端的 p99、p999 延迟，减小毛刺。]]></summary>
        <content type="html"><![CDATA[<p>最近的工作内容就是写一个 <code>DualHBaseClient</code>，在查询数据时间过长时，能够将同样的请求发给 replication 的集群，缩小 client 端的 p99、p999 延迟，减小毛刺。
实际开发最初的一版代码都没有花费1pd，性能测试倒测了好几天都不及预期，甚至优化之后各方面性能更差劲。</p><p>本文就是记录下导致此次性能问题的主要原因：CompletableFuture.</p><p>使用 Java 异步编程的时候，<code>CompletableFuture</code> 用起来还是相当舒服的，在HBase的异步API里，也大量的使用了<code>CompletableFuture</code>，如果 <code>CompletableFuture</code> 有性能问题，那可就悲催了。</p><p>看下以下这段测试<code>CompletableFuture</code>的代码</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">import com.google.common.collect.Lists;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.util.List;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.util.concurrent.CompletableFuture;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.util.concurrent.ExecutionException;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class FutureTest {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) throws ExecutionException, InterruptedException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        new FutureTest().run();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private void run() throws ExecutionException, InterruptedException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        List&lt;CompletableFuture&gt; futures = Lists.newArrayList();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for (int i = 0; i &lt; 1000; i++) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            CompletableFuture future = new CompletableFuture();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            CompletableFuture f = CompletableFuture.runAsync(this::read);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            f.whenComplete((r, e) -&gt; future.complete(r));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            futures.add(future);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for (CompletableFuture future : futures) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            future.get();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private void read() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        try {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Thread.sleep(100);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } catch (InterruptedException e) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            e.printStackTrace();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>以上这段代码实际只是让 <code>CompletableFuture</code> 空转，除了 sleep 没再做其他的，循环1000让运行时间尽量长一些，足够让我们跑一个火焰图出来。</p><p><img loading="lazy" alt="火焰图" src="/assets/images/CompletableFuture-in-jdk8-traces-5268b75d0499fa3aef10b4efa6ab80c8.svg" width="1200" height="742" class="img_ev3q"></p><p>火焰图里注意到有个最大的平顶 <code>java.lang.Runtime.availableProcessors</code>，该方法耗时极大，甚至超过了 Thread.sleep，这可不正常吧。</p><p>随后我们测下 <code>java.lang.Runtime.availableProcessors()</code> 方法是不是真的慢。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">import com.google.common.base.Stopwatch;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import org.junit.Assert;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import org.junit.Test;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.util.concurrent.TimeUnit;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class AvailableProcessorsTest {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void test() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Stopwatch sw = Stopwatch.createStarted();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for (int i = 0; i &lt; 1000000; i++) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Runtime.getRuntime().availableProcessors();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Assert.assertTrue(sw.elapsed(TimeUnit.SECONDS) &gt; 10);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在我的机器上循环1000000次，耗时超过了10s，不算快。</p><p>再来看看 <code>CompletableFuture</code> 是怎么使用 <code>Runtime.availableProcessors()</code> 的</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">private Object waitingGet(boolean interruptible) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    while ((r = result) == null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (spins &lt; 0)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            spins = (Runtime.getRuntime().availableProcessors() &gt; 1) ?</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                1 &lt;&lt; 8 : 0; // Use brief spin-wait on multiprocessors</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        else if (spins &gt; 0) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (ThreadLocalRandom.nextSecondarySeed() &gt;= 0)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                --spins;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>while 死循环要直到出现异常或获取到最终结果才会结束，而循环中又会大量调用 <code>Runtime.availableProcessors()</code>，这就是<code>CompletableFuture</code>存在的性能问题。</p><p>而实际上Openjdk已有对该问题的讨论，<a href="https://bugs.openjdk.java.net/browse/JDK-8227018" target="_blank" rel="noopener noreferrer">JDK-8227018</a>，该优化也很简单，在这里其实只是需要知道运行环境是不是多处理器环境而已，缓存起来就好，完全没必要每次循环都去获取。在jdk8u232版本就fix掉了。</p><p>而且我还看了 jdk11、jdk13 的实现，都不再使用<code>Runtime.availableProcessors()</code>了，所以算是低版本 jdk8 用户独有的烦恼。</p><blockquote><p>一个小插曲</p><p>jdk8u232版本是2019.10.15才正式release的，而我发现这个问题是在10.13。
也幸运也不幸，幸运的是起码问题fix掉了，不幸的是 DualHBaseClient 不能采用 CompletableFuture 实现了，总不好要求用户升级jdk吧</p></blockquote><p>知道低版本的 jdk8 有问题之后，<code>DualHBaseClient</code> 还是要写的，只能寻求其他的异步框架来实现，好在 guava 的 <code>ListenableFuture</code> 实现很像<code>CompletableFuture</code>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a href="#总结" class="hash-link" aria-label="总结的直接链接" title="总结的直接链接">​</a></h2><p>如果是jdk8低版本用户（刚发布几天不会有公司升级吧）频繁的大量使用 CompletableFuture，是存在性能问题，升级 jdk 是最简单的办法，使用 guava 的 Future 库实现也可以，但可能要大量修改代码了。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="附录">附录<a href="#附录" class="hash-link" aria-label="附录的直接链接" title="附录的直接链接">​</a></h2><ul><li><a href="https://blog.wangqi.love/articles/Java/%E7%81%AB%E7%84%B0%E5%9B%BE%E6%8E%92%E6%9F%A5Java%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98.html" target="_blank" rel="noopener noreferrer">火焰图排查Java性能问题</a></li><li><a href="https://bugs.openjdk.java.net/browse/JDK-8227018" target="_blank" rel="noopener noreferrer">JDK-8227018</a></li></ul>]]></content>
        <author>
            <name>Ddupg</name>
            <uri>https://ddupg.github.io</uri>
        </author>
        <category label="Jdk" term="Jdk"/>
        <category label="Java" term="Java"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[「记」子类复写父类方法与类初始化顺序引发的bug]]></title>
        <id>https://ddupg.github.io/blog/20190930-class-init-order-in-inheritance</id>
        <link href="https://ddupg.github.io/blog/20190930-class-init-order-in-inheritance"/>
        <updated>2019-09-30T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[bug现象]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="bug现象">bug现象<a href="#bug现象" class="hash-link" aria-label="bug现象的直接链接" title="bug现象的直接链接">​</a></h2><p>bug出现的条件：</p><ul><li>继承关系</li><li>子类属性有默认的初始化</li><li>子类复写了父类的钩子方法</li><li>钩子方法在父类构造方法中调用</li></ul><p>可以看下以下的示例代码</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Father {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public Father() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        init();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    protected void init() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Child extends Father {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    int a = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public Child() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        super();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    protected void init() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        super.init();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        a = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">import org.junit.Test;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import static org.junit.Assert.*;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class ChildTest {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void testConstructor() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Child child = new Child();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        assertEquals(0, child.a);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="类加载过程">类加载过程<a href="#类加载过程" class="hash-link" aria-label="类加载过程的直接链接" title="类加载过程的直接链接">​</a></h2><p>顺便复习一下类加载过程，类加载过程分为加载、链接、初始化三大步骤</p><p>加载：查找并加载类的二进制字节流数据，并且据此创建类，即代表这个类的Class对象。</p><p>链接：将创建成的类合并至Java虚拟机中，使之能够执行的过程。还分验证、准备、解析三个阶段。</p><ul><li>验证：确保被加载类的正确性</li><li>准备：为类的静态变量分配内存，并将其初始化为默认值</li><li>解析：把类中的符号引用转换为直接引用</li></ul><p>初始化：标记为常量值的字段赋值，以及执行方法。初始化的时机：</p><ol><li>虚拟机启动时，初始化用户指定的主类</li><li>当遇到以新建目标类实例的new指令时，初始化new指定的目标类</li><li>当遇到调用静态方法的指令字段是，初始化该静态方法所在的类</li><li>当遇到访问静态字段的指令时，初始化该静态字段所在的类</li><li>子类的初始化会触发父类的初始化</li><li>如果一个接口定义了default方法，那么直接或间接实现该接口的类初始化，会触</li><li>该接口的初始化</li><li>使用反射API对某个类进行反射调用时，初始化这个类</li><li>当初次调用MethodHandle实例时，初始化该MethodHandle指向的方法所在的类</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="类初始化顺序">类初始化顺序<a href="#类初始化顺序" class="hash-link" aria-label="类初始化顺序的直接链接" title="类初始化顺序的直接链接">​</a></h2><ol><li>按定义顺序初始化父类的static成员，在准备阶段完成</li><li>按定义顺序初始化子类的static成员，在准备阶段完成</li><li>按定义顺序执行父类的普通成员初始化</li><li>执行父类的构造函数</li><li>按定义顺序执行子类的指定初始化</li><li>执行子类的构造函数</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="回头解bug">回头解bug<a href="#回头解bug" class="hash-link" aria-label="回头解bug的直接链接" title="回头解bug的直接链接">​</a></h2><p>现在再回头看下bug代码就知道是什么原因：父类执行构造方法时调用了会修改子类成员<code>a</code>的钩子方法，然后子类才初始化了自己的成员，覆盖了钩子方法里对<code>a</code>的修改。</p><p>解决方法也简单，对<code>a</code>不加默认值就好了。</p>]]></content>
        <author>
            <name>Ddupg</name>
            <uri>https://ddupg.github.io</uri>
        </author>
        <category label="Java" term="Java"/>
        <category label="Bug" term="Bug"/>
    </entry>
</feed>