"use strict";(self.webpackChunkddupg_github_io=self.webpackChunkddupg_github_io||[]).push([[7446],{3905:(e,n,r)=>{r.d(n,{Zo:()=>d,kt:()=>h});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=t.createContext({}),s=function(e){var n=t.useContext(u),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},d=function(e){var n=s(e.components);return t.createElement(u.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=s(r),m=o,h=p["".concat(u,".").concat(m)]||p[m]||c[m]||a;return r?t.createElement(h,i(i({ref:n},d),{},{components:r})):t.createElement(h,i({ref:n},d))}));function h(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=r[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1276:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var t=r(3117),o=(r(7294),r(3905));const a={},i=void 0,l={unversionedId:"Algorithm/\u94fe\u8868",id:"Algorithm/\u94fe\u8868",title:"\u94fe\u8868",description:"\u6570\u636e\u7ed3\u6784",source:"@site/docs/Algorithm/\u94fe\u8868.md",sourceDirName:"Algorithm",slug:"/Algorithm/\u94fe\u8868",permalink:"/docs/Algorithm/\u94fe\u8868",draft:!1,editUrl:"https://github.com/ddupg/ddupg.github.io/blob/main/docs/Algorithm/\u94fe\u8868.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"My Dosc",permalink:"/docs/intro"},next:{title:"configuration",permalink:"/docs/HBase/configuration"}},u={},s=[{value:"\u6570\u636e\u7ed3\u6784",id:"\u6570\u636e\u7ed3\u6784",level:2},{value:"\u5355\u5411\u94fe\u8868",id:"\u5355\u5411\u94fe\u8868",level:3},{value:"\u57fa\u7840",id:"\u57fa\u7840",level:2},{value:"\u53cd\u8f6c\u94fe\u8868",id:"\u53cd\u8f6c\u94fe\u8868",level:2},{value:"\u5feb\u6162\u6307\u9488",id:"\u5feb\u6162\u6307\u9488",level:2},{value:"\u7efc\u5408",id:"\u7efc\u5408",level:2}],d={toc:s},p="wrapper";function c(e){let{components:n,...r}=e;return(0,o.kt)(p,(0,t.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"\u6570\u636e\u7ed3\u6784"},"\u6570\u636e\u7ed3\u6784"),(0,o.kt)("h3",{id:"\u5355\u5411\u94fe\u8868"},"\u5355\u5411\u94fe\u8868"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"public class ListNode {\n    int val;\n    ListNode next;\n    ListNode() {}\n    ListNode(int val) { this.val = val; }\n    ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n}\n")),(0,o.kt)("h2",{id:"\u57fa\u7840"},"\u57fa\u7840"),(0,o.kt)("h2",{id:"\u53cd\u8f6c\u94fe\u8868"},"\u53cd\u8f6c\u94fe\u8868"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/reverse-linked-list/"},"206.\xa0\u53cd\u8f6c\u94fe\u8868")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"class Solution {\n    public ListNode reverseList(ListNode head) {\n        if (head == null) { // \u867d\u7136\u4e0d\u5904\u7406\u4e5f\u53ef\u4ee5\uff0c\u8fd8\u662f\u5efa\u8bae\u505a\u4e0b\u7279\u5224\n            return null;\n        }\n        // pre\u76f8\u5f53\u4e8e\u4e3ahead\u5b9a\u5236\u7684\u5934\u8282\u70b9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4ecehead\u5f00\u59cb\u5904\u7406\u3002\n        // \u5982\u679cpre=head, curr=head.next\u5904\u7406\uff0c\n        // \u5219\u9700\u8981\u7279\u6b8a\u5904\u7406\uff1ahead.next=null\n        ListNode pre = null, curr = head;\n        while (curr != null) {\n            ListNode tmp = curr.next;\n            curr.next = pre;\n            pre = curr;\n            curr = tmp;\n        }\n        return pre;\n    }\n}\n")),(0,o.kt)("h2",{id:"\u5feb\u6162\u6307\u9488"},"\u5feb\u6162\u6307\u9488"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u7b97\u597d\u5feb\u6162\u4e24\u6307\u9488\u7684\u5dee\u8ddd"),(0,o.kt)("li",{parentName:"ul"},"\u9009\u62e9\u8fed\u4ee3\u65b9\u5f0f\uff1a\u5feb\u6162/\u5148\u540e")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/middle-of-the-linked-list/"},"876.\xa0\u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"class Solution {\n    public ListNode middleNode(ListNode head) {\n        if (head == null) { // \u505a\u7279\u5224\n            return head;\n        }\n        \n        ListNode fst = head, snd = head.next;\n        while (snd != null) {\n            fst = fst.next;\n            snd = snd.next;\n            if (snd != null) {\n                snd = snd.next;\n            }\n        }\n        return fst;\n    }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/remove-nth-node-from-end-of-list/"},"19.\xa0\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c N \u4e2a\u7ed3\u70b9")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"class Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        ListNode fast = head;\n        // \u5feb\u6307\u9488\u5148\u8d70n\u6b65\n        for (int i = 0; i < n; i++) {\n            fast = fast.next;\n        }\n        // \u53cc\u6307\u9488\u4e00\u8d77\u8d70\u5230\u5e95\n        ListNode slow = head, pre = null;\n        while (fast != null) {\n            pre = slow;\n            slow = slow.next;\n            fast = fast.next;\n        }\n        // \u5355\u72ec\u5904\u7406\u5220\u9664\u7b2c\u4e00\u4e2a\u7ed3\u70b9\u7684\u60c5\u51b5\n        if (pre == null) {\n            return head.next;\n        }\n        pre.next = slow.next;\n        return head;\n    }\n}\n")),(0,o.kt)("h2",{id:"\u7efc\u5408"},"\u7efc\u5408"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/reverse-nodes-in-k-group/"},"25. K \u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868")),(0,o.kt)("p",null,"\u7ed3\u5408\u4e86\u5feb\u6162\u6307\u9488\uff0c\u53cd\u8f6c\u94fe\u8868\u3002\n\u5176\u5b9e\u8fd8\u6709\u4f18\u5316\u7a7a\u95f4\uff0c\u5373",(0,o.kt)("inlineCode",{parentName:"p"},"goGroupEnd()"),"\u53ef\u4ee5\u6574\u5408\u5728\u8fed\u4ee3\u91cc\uff0c\u51cf\u5c11\u4e00\u904d\u5faa\u73af\uff0c\u53d8\u91cf\u518d\u591a\u51e0\u4e2a\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"class Solution {\n    public ListNode reverseKGroup(ListNode head, int k) {\n        // mock\u4e00\u4e2a\u5934\u8282\u70b9\uff0c\u7528\u4e8e\u6a21\u62df\u524d\u4e00\u7ec4\u94fe\u8868\uff0c\u907f\u514d\u8fb9\u754c\u6761\u4ef6\u5904\u7406\n        ListNode mockHead = new ListNode(0, head);\n        ListNode preGroupTail = mockHead;\n        ListNode currGroupHead = head;\n        while (true) {\n            ListNode currGroupTail = goGroupEnd(currGroupHead, k);\n            if (currGroupTail == null) {\n            // \u4e0d\u8db3k\u4e2a\u4e00\u7ec4\n                preGroupTail.next = currGroupHead;\n                break;\n            }\n\n            ListNode nextGroupHead = currGroupTail.next;\n            // \u53cd\u8f6c\u540e\uff0c\u9996\u5c3e\u4e92\u6362\n            ListNode reverseHead = reverse(currGroupHead, k);\n            currGroupTail = currGroupHead;\n            // \u548c\u4e0a\u4e00\u7ec4\u8fde\u63a5\u8d77\u6765\n            preGroupTail.next = reverseHead;\n            // \u521d\u59cb\u5316\u4e0b\u4e00\u7ec4\u7684\u53d8\u91cf\n            currGroupHead = nextGroupHead;\n            preGroupTail = currGroupTail;\n        }\n        return mockHead.next;\n    }\n\n    /**\n    * \u53cd\u8f6c\u8fde\u7eedk\u4e2a\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u53cd\u8f6c\u4e00\u7ec4\n    * @return \u8fd4\u56de\u53cd\u8f6c\u540e\u7684\u5934\u8282\u70b9\n    */\n    private ListNode reverse(ListNode head, int n) {\n        ListNode pre = null, curr = head;\n        for (int i = 0; i < n && curr != null; i++) {\n            ListNode next = curr.next;\n            curr.next = pre;\n            pre = curr;\n            curr = next;\n        }\n        return pre;\n    }\n\n    /**\n    * \u5f80\u524d\u8d70k-1\u6b65\uff0c\u8d70\u5230\u5f53\u524d\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\n    * @return \u5982\u679c\u8d70\u5230null\uff0c\u8bf4\u660e\u8fd9\u7ec4\u4e0d\u8db3k\u4e2a\n    */\n    private ListNode goGroupEnd(ListNode head, int n) {\n        for (int i = 0; i < n - 1 && head != null; i++) {\n            head = head.next;\n        }\n        return head;\n    }\n}\n")))}c.isMDXComponent=!0}}]);